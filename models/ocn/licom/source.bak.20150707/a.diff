Only in ./: a.diff
diff ./barotr.F90 /work1/jjr/wangty/CAS_ESM_wty/models/ocn/licom/source/barotr.F90
21,24c21,22
< !zhh 2014-10-20       fil_lat1=63.0D0
< !zhh 2014-10-20       fil_lat2=63.0D0
<        fil_lat1=66.0D0
<        fil_lat2=66.0D0
---
>        fil_lat1=63.0D0
>        fil_lat2=63.0D0
389,391c387
< !zhh        IF (MOD(ISB,1440)==1) THEN   ! original set
<          IF (MOD(ISB,10)==1) THEN
< !zhh         IF (MOD(ISB,2)==1) THEN
---
>          IF (MOD(ISB,1440)==1) THEN
diff ./bclinc.F90 /work1/jjr/wangty/CAS_ESM_wty/models/ocn/licom/source/bclinc.F90
44,47c44,45
< !zhh 2014-10-20       fil_lat1=65.0D0
< !zhh 2014-10-20       fil_lat2=65.0D0
<        fil_lat1=66.0D0
<        fil_lat2=66.0D0
---
>        fil_lat1=65.0D0
>        fil_lat2=65.0D0
349,352c347
< !zhh     IF (MOD(ISC,160)==1) THEN   !original set
< !zhh     IF (MOD(ISC,80)==1) THEN
<      IF (MOD(ISC,8)==1) THEN
< !zhh     IF (MOD(ISC,2)==1) THEN
---
>      IF (MOD(ISC,160)==1) THEN
diff ./def-undef.h /work1/jjr/wangty/CAS_ESM_wty/models/ocn/licom/source/def-undef.h
1,29c1,28
< #define NX_PROC 20 
< #define NY_PROC 6 
< #define SPMD
< #define  SYNCH
< #undef  FRC_ANN
< #define CDFIN
< #undef  FRC_DAILY
< #undef  FRC_CORE
< #define SOLAR
< #define  ACOS
< #undef  BIHAR
< #undef  SMAG_FZ
< #undef  SMAG_OUT
< #define NETCDF
< #undef BOUNDARY
< #define NODIAG
< #undef  ICE
< #undef SHOW_TIME
< #define DEBUG
< #define COUP
< #define  ISO
< #define D_PRECISION
< #define  CANUTO
< #undef SOLARCHLORO
< #undef LDD97
< #undef TSPAS
< #undef  SMAG
< #define JMT_GLOBAL 196
< #define BACKMX
---
> #define NX_PROC 4 
> #define NY_PROC 4 
> #define SPMD
> #define  SYNCH
> #undef  FRC_ANN
> #define CDFIN
> #undef  FRC_DAILY
> #undef  FRC_CORE
> #define SOLAR
> #define  ACOS
> #undef  BIHAR
> #undef  SMAG_FZ
> #undef  SMAG_OUT
> #define NETCDF
> #undef BOUNDARY
> #define NODIAG
> #undef  ICE
> #undef SHOW_TIME
> #define DEBUG
> #define COUP
> #define  ISO
> #define D_PRECISION
> #define  CANUTO
> #undef SOLARCHLORO
> #undef LDD97
> #define TSPAS
> #undef  SMAG
> #define JMT_GLOBAL 196
diff ./exchange.F90 /work1/jjr/wangty/CAS_ESM_wty/models/ocn/licom/source/exchange.F90
383,384c383,384
<             aa(imt,k,j)=eee(k,j)
<             aa(1,k,j)=ddd(k,j)
---
>             aa(imt,j,k)=eee(j,k)
>             aa(1,j,k)=ddd(j,k)
397,398c397,398
<             aa(1,k,j)=ddd(k,j)
<             aa(imt,k,j)=eee(k,j)
---
>             aa(1,j,k)=ddd(j,k)
>             aa(imt,j,k)=eee(j,k)
405,406c405,406
<             aa(1,k,j)=ddd(k,j)
<             aa(imt,k,j)=eee(k,j)
---
>             aa(1,j,k)=ddd(j,k)
>             aa(imt,j,k)=eee(j,k)
diff ./flux_cpl.F90 /work1/jjr/wangty/CAS_ESM_wty/models/ocn/licom/source/flux_cpl.F90
92c92
<         else if (iy == ny_proc-1) then
---
>         else if (iy == nproc-1) then
102,103c102,103
< !           if(vit(i,j,1)<0.5) U_cpl(i,j)=SHR_CONST_SPVAL !wangty bug
< !           if(vit(i,j,1)<0.5) v_cpl(i,j)=SHR_CONST_SPVAL !wangty bug
---
>            if(vit(i,j,1)<0.5) U_cpl(i,j)=SHR_CONST_SPVAL !wangty bug
>            if(vit(i,j,1)<0.5) v_cpl(i,j)=SHR_CONST_SPVAL !wangty bug
diff ./forc_mod.F90 /work1/jjr/wangty/CAS_ESM_wty/models/ocn/licom/source/forc_mod.F90
1,65c1,65
< !  CVS: $Id: forc_mod.F90,v 1.7 2003/08/25 07:47:52 lhl Exp $
< module forc_mod
< #include <def-undef.h>
< !
< use precision_mod
< use param_mod
< !
< !
< !     ------------------------------------------------------------------
< !     Forcing Fields
< !     ------------------------------------------------------------------
<       real(r8),allocatable,dimension(:,:,:)::su3,sv3,psa3,tsa3,qar3,uva3, &
<                    swv3,cld3,sss3,sst3&
< !lhl
<                     ,nswv3,dqdt3,chloro3&
< !lhl
< !lhl090730
<                    ,wspd3,wspdu3,wspdv3,lwv3,seaice3,rain3,snow3,runoff3
< !lhl090730
<       real(r8),dimension(imt,jmt)::su,sv,psa,tsa,sss,swv,uva,qar,cld,&
<                     ddd,qqq,sst&
< !lhl
<                    ,nswv,dqdt,chloro&
< !lhl
< !lhl090730
<                    ,lwv,seaice,rain,snow,fresh,runoff&
< !lhl090730
< !linpf091126
<                    ,lthf,sshf !only for output
< !linpf091126
< 
< !lhl1204
<       real(r8),dimension(imt,jmt)::USTAR,BUOYTUR,BUOYSOL
< !lhl1204
< !
< !#ifdef SPMD
<       real(r8),allocatable,dimension(:,:,:)::su3_io,sv3_io,psa3_io,tsa3_io,qar3_io,uva3_io, &
<                     swv3_io,cld3_io,sss3_io,sst3_io&
<                    ,nswv3_io,dqdt3_io,chloro3_io& 
< !lhl
< !lhl090730
<                    ,wspdu3_io,wspdv3_io,lwv3_io,seaice3_io,rain3_io,snow3_io,runoff3_io
< !lhl090730
<                                                         
< #if (defined FRC_DAILY)
<       real(r4),dimension(imt_global,jmt_global)::su_in_io,sv_in_io
<       real(r8),dimension(imt_global,jmt_global)::su_io,sv_io
< #endif
< !lhl
< !#endif
< !
< !
< #if (defined BOUNDARY)
<       real(r8),dimension(imt,jmt,km,ntra)::restore
<       ! lihuimin 2012.6.18
<       real(r8),dimension(imt,jmt_global,km,ntra)::restore_io
<       ! modi end
< #endif
< !
< #ifdef SPMD
<        real(r4),dimension(imt_global,jmt_global):: tsf_global,ssf_global,su_global,sv_global,swv_global, mius_global,fresh1_global,u3_global,sss1_global,fresh11_global
< #endif
< 
<        real(r8),dimension(imt,jmt):: tsf,ssf,mius,fresh1,u3,sss1,fresh11
< end module forc_mod
---
> !  CVS: $Id: forc_mod.F90,v 1.7 2003/08/25 07:47:52 lhl Exp $
> module forc_mod
> #include <def-undef.h>
> !
> use precision_mod
> use param_mod
> !
> !
> !     ------------------------------------------------------------------
> !     Forcing Fields
> !     ------------------------------------------------------------------
>       real(r8),allocatable,dimension(:,:,:)::su3,sv3,psa3,tsa3,qar3,uva3, &
>                    swv3,cld3,sss3,sst3&
> !lhl
>                     ,nswv3,dqdt3,chloro3&
> !lhl
> !lhl090730
>                    ,wspd3,wspdu3,wspdv3,lwv3,seaice3,rain3,snow3,runoff3
> !lhl090730
>       real(r8),dimension(imt,jmt)::su,sv,psa,tsa,sss,swv,uva,qar,cld,&
>                     ddd,qqq,sst&
> !lhl
>                    ,nswv,dqdt,chloro&
> !lhl
> !lhl090730
>                    ,lwv,seaice,rain,snow,fresh,runoff&
> !lhl090730
> !linpf091126
>                    ,lthf,sshf !only for output
> !linpf091126
> 
> !lhl1204
>       real(r8),dimension(imt,jmt)::USTAR,BUOYTUR,BUOYSOL
> !lhl1204
> !
> !#ifdef SPMD
>       real(r8),allocatable,dimension(:,:,:)::su3_io,sv3_io,psa3_io,tsa3_io,qar3_io,uva3_io, &
>                     swv3_io,cld3_io,sss3_io,sst3_io&
>                    ,nswv3_io,dqdt3_io,chloro3_io& 
> !lhl
> !lhl090730
>                    ,wspdu3_io,wspdv3_io,lwv3_io,seaice3_io,rain3_io,snow3_io,runoff3_io
> !lhl090730
>                                                         
> #if (defined FRC_DAILY)
>       real(r4),dimension(imt_global,jmt_global)::su_in_io,sv_in_io
>       real(r8),dimension(imt_global,jmt_global)::su_io,sv_io
> #endif
> !lhl
> !#endif
> !
> !
> #if (defined BOUNDARY)
>       real(r8),dimension(imt,jmt,km,ntra)::restore
>       ! lihuimin 2012.6.18
>       real(r8),dimension(imt,jmt_global,km,ntra)::restore_io
>       ! modi end
> #endif
> !
> #ifdef SPMD
>        real(r4),dimension(imt_global,jmt_global):: tsf_global,ssf_global,su_global,sv_global,swv_global
> #endif
> 
>        real(r8),dimension(imt,jmt):: tsf,ssf
> end module forc_mod
diff ./isoadv.F90 /work1/jjr/wangty/CAS_ESM_wty/models/ocn/licom/source/isoadv.F90
147c147
<       call exchange_3d_iso(adv_vetiso,km,1,1) !jjr vnt-vet
---
>       call exchange_3d_iso(adv_vntiso,km,1,1)
199c199
<       call exchange_3d_iso(adv_vbtiso,km+1,1,0)
---
>       call exchange_3d_iso(adv_vntiso,km,1,0)
diff ./local_to_global.F90 /work1/jjr/wangty/CAS_ESM_wty/models/ocn/licom/source/local_to_global.F90
125,134d124
<            do m=1,mm
<            do k=1,kk
<              do j=1,jmt_global
<             do i=1,imt_global
< !jjr             do j=1,jmt_global
<                global(i,j,k,m)=spval
<              enddo
<             enddo
<            end do
<            end do
148a139,147
>            do m=1,mm
>            do k=1,kk
>             do i=1,imt_global
>              do j=1,jst_global
>                global(i,j,k,m)=spval
>              enddo
>             enddo
>            end do
>            end do
188d186
< use output_mod, only: spval
198,207d195
<            do m=1,mm
<            do k=1,kk
<             do i=1,imt_global
<              do j=1,jmt_global
<                global(i,j,k,m)=spval
<              enddo
<             enddo
<            end do
<            end do
< 
diff ./post_cpl.F90 /work1/jjr/wangty/CAS_ESM_wty/models/ocn/licom/source/post_cpl.F90
1,223c1,133
< !-----------------------------------------------------------------------------
< !   Processing some variables from flux coupler.
< !-----------------------------------------------------------------------------
< !
< !        By Yongqiang Yu , 16 Apr., 1999
< !
< !
< !
<       SUBROUTINE post_cpl
< 
< #include <def-undef.h>
< use precision_mod
< use dyn_mod
< use work_mod
< 
< use param_mod
< use pconst_mod
< use tracer_mod
< use forc_mod
< use buf_mod
< use control_mod
< use shr_sys_mod
< !use work_mod,only : wkj
< use output_mod,only:spval
< #ifdef SPMD
< use msg_mod,only: tag_1d,tag_2d,tag_3d,tag_4d,nproc,status,mpi_comm_ocn
< #endif
< 
< 
< !
<       implicit none
<       real(r8),dimension(:,:),allocatable::tmp_su,tmp_sv
< !JJB20140830 
<       REAL(r8)    :: ERR0,FRESH01,FRESH011,ERR1,ERR2,ERR3,ERR4,ERR5,ERR6,ERR7,sss2  
<       REAL(r8), ALLOCATABLE :: FRESH_EN1(:,:)
< !JJB20140830
< !
<         tsf=0.0D0
<         ssf=0.0D0
<         swv=0.0D0
<         su=0.0D0
<         sv=0.0D0
<         mius=0.0D0
<         fresh1=0.0D0
<         err0=0.0D0
<         err2=0.0D0
<         err3=0.0D0
<         err5=0.0D0
< !open(5,file='out.txt3')
< !open(6,file='out.txt4')
< 
< !$OMP PARALLEL DO PRIVATE (i,j)
<         do j=jsm,jmm
<         do i= 2,imm
<     fresh1(i,j)=vit(i,j,1)*(prec(i,j)+evap(i,j)+ meltw(i,j)+roff(i,j))
<     sss1(I,J)=vit(i,j,1)*(ATB (I,J,1,2)*1000.0+35.0)*1.0e-3
<      end do
<       end do
< !JJB20140830   MAKE SURE GLOBAL AREA-MEAN FRESH FLUX IS ZERO
< !$OMP PARALLEL DO PRIVATE (J,I),reduction(+:ERROR2)  
<          DO J = jsm,jmm
<          DO I = 2,imm
<          ERR0 = ERR0 + DYT(J)* SINT (J)* fresh1(I,J)*vit(I,J,1)
<          ERR2 = ERR2 + DYT(J)* SINT (J)*sss1(I,J)*vit(I,J,1)
<          END DO
<          END DO
< #ifdef SPMD 
< 
<       call mpi_reduce(ERR0,ERR1,1,MPI_PR,mpi_sum,0,mpi_comm_ocn,ierr)
<       call mpi_bcast(ERR1,1,MPI_PR,0,mpi_comm_ocn,ierr)
<       call mpi_reduce(ERR2,ERR4,1,MPI_PR,mpi_sum,0,mpi_comm_ocn,ierr)
<       call mpi_bcast(ERR4,1,MPI_PR,0,mpi_comm_ocn,ierr)
<       FRESH01 = - ERR1/ ASEA
<       sss2=ERR4/ASEA
< #else
<        FRESH01 = - ERR0/ ASEA
<        sss2=ERR2/ASEA
< #endif
< 
< !$OMP PARALLEL DO PRIVATE (J,I)
<       DO J = JST,JMT
<          DO I = 1,IMT
<             FRESH1(I,J)= (FRESH1(I,J) + FRESH01)* VIT (I,J,1)
<          END DO
<        END DO
< 
< 
< !$OMP PARALLEL DO PRIVATE (i,j)
<         do j=jsm,jmm
<         do i= 2,imm
<     fresh11(i,j)=-vit(i,j,1)*(prec(i,j)+evap(i,j)+ meltw(i,j)+roff(i,j))*((ATB (I,J,1,2)-sss2)*1000.0+35.0)*1.0e-3*OD0
<     u3(I,J)=vit(i,j,1)*(SQRT(duu10n(I,J)))**3  
<  !  write(5,*) fresh11(56,:)
<       end do
<       end do
< !JJB20140830   MAKE SURE GLOBAL AREA-MEAN FRESH FLUX IS ZERO
< !$OMP PARALLEL DO PRIVATE (J,I),reduction(+:ERROR2)  
<          DO J = jsm,jmm
<          DO I = 2,imm
<          ERR5 = ERR5 + DYT(J)* SINT (J)*fresh11(I,J)*vit(I,J,1)   
<          ERR3 = ERR3 + DYT(J)* SINT (J)*u3(I,J)*vit(I,J,1)
<          END DO
<          END DO
< #ifdef SPMD   
<       call mpi_reduce(ERR5,ERR7,1,MPI_PR,mpi_sum,0,mpi_comm_ocn,ierr)
<       call mpi_bcast(ERR7,1,MPI_PR,0,mpi_comm_ocn,ierr)
<       call mpi_reduce(ERR3,ERR6,1,MPI_PR,mpi_sum,0,mpi_comm_ocn,ierr)
<       call mpi_bcast(ERR6,1,MPI_PR,0,mpi_comm_ocn,ierr)
<        FRESH011 = ERR7/(sss2*ERR6)
<   !    write(6,*) fresh011,ERR6,ERR7,ASEA,sss2,fresh01
< #else
<        FRESH011 =  ERR5/(ERR3*sss2)
< #endif
< !JJB20140830  
< !jjb 20140713  miu*S+lamda*S
< 
< !open(3,file='out.txt1')
< !open(4,file='out.txt2')
< !$OMP PARALLEL DO PRIVATE (J,I)
<             DO J = 1,JMT
<                DO I = 2,IMT
< ! mius(I,J) = -(0.002256*(SQRT(duu10n))**3.*(ATB (I,J,1,2)*1000.0+35.0)+0.11107)*(1.0-seaice(i,j))*0.01/365./86400/1000.0*VIT(I,J,1)
<  
<   mius(i,j)=-FRESH011*(SQRT(duu10n(i,j)))**3.*(ATB(I,J,1,2)*1000.0+35.0)*(1.0-seaice(i,j))*VIT(I,J,1)*1.0e-3
<             
< !write(3,*) mius(56,:) 
<            END DO
<             END DO
< !jjb 20140713  
< 
< !$OMP PARALLEL DO PRIVATE (i,j)
<         do j=1,jmt
< !        do i= 2,imt-1 ! 1,imt !LPF 20120822
<         do i= 1,imt
<            ! net heat flux
<            TSF(i,j) = vit(i,j,1)*(lat1(i,j)+sen(i,j)+lwup(i,j)+lwdn(i,j )+netsw(i,j)+melth(i,j)) *OD0CP  
<            ! net solar radiation
<            SWV(i,j) = vit(i,j,1)*netsw(i,j) 
<            ! none solar radiation !for BUOY
<            NSWV(i,j)= vit(i,j,1)*(lat1(i,j)+sen(i,j)+lwup(i,j)+lwdn(i,j) +melth(i,j))
<           !SSF(i,j) =-vit(i,j,1)*(prec(i,j)+evap(i,j)+ meltw(i,j)+roff(i,j))  *34.7*1.0e-3/DZP(1)*OD0                                     ! P+E+melting !linpf 25->DZP(1)
<          
<   !jjb 20140713  
<         ! SSF(i,j) =-vit(i,j,1)*(prec(i,j)+evap(i,j)+ meltw(i,j)+roff(i,j))*(ATB (I,J,1,2)*1000.0+35.0)*1.0e-3/DZP(1)*OD0+mius(i,j)*vit(i,j,1)/DZP(1)*OD0    
< 
<     SSF(i,j) =-vit(i,j,1)*FRESH1(I,J)*(ATB (I,J,1,2)*1000.0+35.0)*1.0e-3/DZP(1)*OD0+vit(i,j,1)*mius(i,j)/DZP(1)    
<    !  write(4,*) SSF(56,:)                      
<    ! jjb 20140713  
<         end do
<         end do
< !wangty bug
< !wangty bug
<         call exchange_2d(tsf,1,1)
<         call exchange_2d(swv,1,1)
<         call exchange_2d(ssf,1,1)
<         call exchange_2d(roff,1,1)
< 
< !for ocn output
<         lthf  = lat1        !latent flux
<         sshf  = sen         !sensible flux
<         lwv   = lwup+lwdn   !long wave flux
<         fresh = ssf
<         runoff= roff
< 
<         where(vit(:,:,1)<0.5) tsf=spval
<         where(vit(:,:,1)<0.5) swv=spval
<         where(vit(:,:,1)<0.5) nswv=spval
<         where(vit(:,:,1)<0.5) ssf=spval
< 
<         where(vit(:,:,1)<0.5) lthf=spval
<         where(vit(:,:,1)<0.5) sshf=spval
<         where(vit(:,:,1)<0.5) lwv=spval
<         where(vit(:,:,1)<0.5) fresh=spval
<         where(vit(:,:,1)<0.5) runoff=spval
< !
< #ifdef USE_OCN_CARBON
<         call exchange_2d(pco2)
< #endif         
< !
< ! surface stress
< !$OMP PARALLEL DO PRIVATE (i,j)
<         do j=1,jmt-1
<         do i=2,imt
<            SU(i,j) = (taux(i-1,j)+taux(i,j)+taux(i-1,j+1)+taux(i,j+1))*0.25
<         end do
<         end do
< !$OMP PARALLEL DO PRIVATE (i,j)
<         do j=2,jmt-1
<         do i=2,imt
<             SV(i,j) = (tauy(i-1,j)+tauy(i,j)+tauy(i-1,j+1)+tauy(i,j+1))*0.25 !linpf
<         end do
<         end do
< !
<         call exchange_2d(SU,1,1)
<         call exchange_2d(SV,1,1)
< 
<         where(viv(:,:,1)<0.5) su=spval
<         where(viv(:,:,1)<0.5) sv=spval
< 
< !calculate USTAR
<       DO J = 1,jmt
<          DO I = 1,imt
<           USTAR(I,J)=sqrt(sqrt(taux(i,j)*taux(i,j)+tauy(i,j)*tauy(i,j))*OD0)*vit(i,j,1) 
<          END DO
<       END DO        
<       
< !$OMP PARALLEL DO PRIVATE (i,j)
<        do i=1,imt
<        do j=1,jmt
<           licomqice (i,j)= 0.0D0
<        end do
<        end do
< 
< !      call chk_var2d(taux,"us",1)
< !      call chk_var2d(tauy,"vs",1)
< !      call chk_var2d(SU,"SU",0)
< !      call chk_var2d(SV,"SV",0)
< !      call chk_var2d(SWV,"sw",1)
< !      call chk_var2d(NSWV,"sw",1)
< !      call chk_var2d(USTAR,"US",1)
< 
<         return
<         end
---
> !-----------------------------------------------------------------------------
> !   Processing some variables from flux coupler.
> !-----------------------------------------------------------------------------
> !
> !        By Yongqiang Yu , 16 Apr., 1999
> !
> !
> !
>       SUBROUTINE post_cpl
> 
> #include <def-undef.h>
> 
> 
> use param_mod
> use pconst_mod
> use tracer_mod
> use forc_mod
> use buf_mod
> use control_mod
> use shr_sys_mod
> !use work_mod,only : wkj
> use output_mod,only:spval
> !
>       implicit none
>       real(r8),dimension(:,:),allocatable::tmp_su,tmp_sv
> !
>         tsf=0.0D0
>         ssf=0.0D0
>         swv=0.0D0
>         su=0.0D0
>         sv=0.0D0
>         tmp_su=0.0D0
>         tmp_sv=0.0D0
>         allocate(tmp_su(imt,jmt))
>         allocate(tmp_sv(imt,jmt))          
> 
> !$OMP PARALLEL DO PRIVATE (i,j)
>         do j=1,jmt
> !        do i= 2,imt-1 ! 1,imt !LPF 20120822
>         do i= 1,imt
>            ! net heat flux
>            TSF(i,j) = vit(i,j,1)*(lat1(i,j)+sen(i,j)+lwup(i,j)+lwdn(i,j )+netsw(i,j)+melth(i,j)) *OD0CP  
>            ! net solar radiation
>            SWV(i,j) = vit(i,j,1)*netsw(i,j) 
>            ! none solar radiation !for BUOY
>            NSWV(i,j)= vit(i,j,1)*(lat1(i,j)+sen(i,j)+lwup(i,j)+lwdn(i,j) +melth(i,j))
>            SSF(i,j) =-vit(i,j,1)*(prec(i,j)+evap(i,j)+ meltw(i,j)+roff(i,j))  *34.7*1.0e-3/DZP(1)*OD0                                     ! P+E+melting !linpf 25->DZP(1)
>            tmp_su(i,j) = taux(i,j)
>            tmp_sv(i,j) = -tauy(i,j)
>         end do
>         end do
> !wangty bug
>         if(nx_proc==1) then
>         do j=1,jmt
>          tmp_su(1,j)=tmp_su(imm,j)
>          tmp_su(imt,j)=tmp_su(2,j)
>          tmp_sv(1,j)=tmp_sv(imm,j)
>          tmp_sv(imt,j)=tmp_sv(2,j)
>         end do
>         end if
> !wangty bug        
>         call exchange_2d(tsf,1,1)
>         call exchange_2d(swv,1,1)
>         call exchange_2d(ssf,1,1)
>         call exchange_2d(roff,1,1)
>         call exchange_2d(tmp_su,1,1)
>         call exchange_2d(tmp_sv,1,1)
> !for ocn output
>         lthf  = lat1        !latent flux
>         sshf  = sen         !sensible flux
>         lwv   = lwup+lwdn   !long wave flux
>         fresh = ssf
>         runoff= roff
> 
>         where(vit(:,:,1)<0.5) tsf=spval
>         where(vit(:,:,1)<0.5) swv=spval
>         where(vit(:,:,1)<0.5) nswv=spval
>         where(vit(:,:,1)<0.5) ssf=spval
> 
>         where(vit(:,:,1)<0.5) lthf=spval
>         where(vit(:,:,1)<0.5) sshf=spval
>         where(vit(:,:,1)<0.5) lwv=spval
>         where(vit(:,:,1)<0.5) fresh=spval
>         where(vit(:,:,1)<0.5) runoff=spval
> !
> #ifdef USE_OCN_CARBON
>         call exchange_2d(pco2)
> #endif         
> !
> ! surface stress
> !$OMP PARALLEL DO PRIVATE (i,j)
>         do j=1,jmt-1
>         do i=2,imt
>            SU(i,j) = (taux(i-1,j)+taux(i,j)+taux(i-1,j+1)+taux(i,j+1))*0.25
>         end do
>         end do
> !$OMP PARALLEL DO PRIVATE (i,j)
>         do j=2,jmt-1
>         do i=2,imt
>             SV(i,j) = (tauy(i-1,j)+tauy(i,j)+tauy(i-1,j+1)+tauy(i,j+1))*0.25 !linpf
>         end do
>         end do
> !
>         call exchange_2d(SU,1,1)
>         call exchange_2d(SV,1,1)
> 
>         where(viv(:,:,1)<0.5) su=spval
>         where(viv(:,:,1)<0.5) sv=spval
> 
> !calculate USTAR
>       DO J = 1,jmt
>          DO I = 1,imt
>           USTAR(I,J)=sqrt(sqrt(taux(i,j)*taux(i,j)+tauy(i,j)*tauy(i,j))*OD0)*vit(i,j,1) 
>          END DO
>       END DO        
>       
> !$OMP PARALLEL DO PRIVATE (i,j)
>        do i=1,imt
>        do j=1,jmt
>           licomqice (i,j)= 0.0D0
>        end do
>        end do
> 
> !      call chk_var2d(taux,"us",1)
> !      call chk_var2d(tauy,"vs",1)
> !      call chk_var2d(SU,"SU",0)
> !      call chk_var2d(SV,"SV",0)
> !      call chk_var2d(SWV,"sw",1)
> !      call chk_var2d(NSWV,"sw",1)
> !      call chk_var2d(USTAR,"US",1)
> 
>         return
>         end
diff ./tracer.F90 /work1/jjr/wangty/CAS_ESM_wty/models/ocn/licom/source/tracer.F90
49,50c49,50
<        fil_lat1=66.0D0
<        fil_lat2=66.0D0
---
>        fil_lat1=63.0D0
>        fil_lat2=63.0D0
