! CVS: $Id: ctrlc.F90,v 2.1 2004/06/10 07:45:17 cvsroot Exp $	! CVS: $Id: ctrlc.F90,v 2.1 2004/06/10 07:45:17 cvsroot Exp $
  SUBROUTINE CTRLC						  SUBROUTINE CTRLC
!========================					!========================
! CTRLC								! CTRLC
!------------------------------------------------------------	!------------------------------------------------------------
!								!
! purpose: set the control constants used in the CARBON model	! purpose: set the control constants used in the CARBON model
!								!
! author: Zhao Liang@lapc 2004/03/02				! author: Zhao Liang@lapc 2004/03/02
!								!
!------------------------------------------------------------	!------------------------------------------------------------
#include <def-undef.h>       					#include <def-undef.h>       
!								!
      USE param_mod						      USE param_mod
      USE carbon_mod						      USE carbon_mod
      USE cforce_mod						      USE cforce_mod
      USE coutput_mod						      USE coutput_mod
#ifdef SPMD							#ifdef SPMD
      USE msg_mod,only:mpi_comm_ocn				      USE msg_mod,only:mpi_comm_ocn
#endif      							#endif      
!								!
!------------------------------------------------------------	!------------------------------------------------------------
      IMPLICIT NONE						      IMPLICIT NONE
!     								!     
#include <netcdf.inc>						#include <netcdf.inc>
!#ifdef SPMD							!#ifdef SPMD
!#include <mpif.h>      					!#include <mpif.h>      
!#endif								!#endif
!								!
      NAMELIST /controlc/ NSTARTC,yearData,yearStart,yearStor	      NAMELIST /controlc/ NSTARTC,yearData,yearStart,yearStor
!								!
#ifdef carbonBio      						#ifdef carbonBio      
! default value of r_cp is 120, r_np is 16,r_o2p is -170, sig	! default value of r_cp is 120, r_np is 16,r_o2p is -170, sig
!  r_fec is 5.0E-6 (based on Archer&Johnson,2000) 		!  r_fec is 5.0E-6 (based on Archer&Johnson,2000) 
      NAMELIST /bioconst/ r_cp,r_np,r_fec0,sigma_b,tau_b,r_o2	      NAMELIST /bioconst/ r_cp,r_np,r_fec0,sigma_b,tau_b,r_o2
#endif								#endif
      								      
#ifdef SPMD							#ifdef SPMD
      IF(mytid==0) THEN						      IF(mytid==0) THEN
#endif      							#endif      
      WRITE(6,*) 'Begining------CTRLC'				      WRITE(6,*) 'Begining------CTRLC'
#ifdef SPMD							#ifdef SPMD
      ENDIF							      ENDIF
#endif								#endif
      								      
#ifdef SPMD							#ifdef SPMD
      IF(mytid==0) THEN						      IF(mytid==0) THEN
#endif      							#endif      
      OPEN(11,FILE='controlc',FORM='formatted')			      OPEN(11,FILE='controlc',FORM='formatted')
      REWIND(11)						      REWIND(11)
      READ(11,nml=controlc)					      READ(11,nml=controlc)
      CLOSE(11)							      CLOSE(11)
#ifdef SPMD							#ifdef SPMD
      ENDIF							      ENDIF
      call mpi_barrier(mpi_comm_ocn,ierr)			      call mpi_barrier(mpi_comm_ocn,ierr)
      call mpi_bcast(NSTARTC,1,mpi_integer,0,mpi_comm_ocn,ier	      call mpi_bcast(NSTARTC,1,mpi_integer,0,mpi_comm_ocn,ier
      call mpi_bcast(yearData,1,mpi_integer,0,mpi_comm_ocn,ie	      call mpi_bcast(yearData,1,mpi_integer,0,mpi_comm_ocn,ie
      call mpi_bcast(yearStart,1,mpi_integer,0,mpi_comm_ocn,i	      call mpi_bcast(yearStart,1,mpi_integer,0,mpi_comm_ocn,i
      call mpi_bcast(yearStore,1,mpi_integer,0,mpi_comm_ocn,i	      call mpi_bcast(yearStore,1,mpi_integer,0,mpi_comm_ocn,i
      call mpi_bcast(IO_out,1,mpi_integer,0,mpi_comm_ocn,ierr	      call mpi_bcast(IO_out,1,mpi_integer,0,mpi_comm_ocn,ierr
#endif      							#endif      
!								!
#ifdef carbonBio						#ifdef carbonBio
#ifdef SPMD							#ifdef SPMD
      IF(mytid==0) THEN						      IF(mytid==0) THEN
#endif      							#endif      
!read r_cp, r_np, sigma_b,tau_b,r_o2p				!read r_cp, r_np, sigma_b,tau_b,r_o2p
      OPEN(11,FILE='bioconst',FORM='formatted')			      OPEN(11,FILE='bioconst',FORM='formatted')
      REWIND(11)						      REWIND(11)
      READ(11,nml=bioconst)					      READ(11,nml=bioconst)
      CLOSE(11)							      CLOSE(11)
#ifdef SPMD							#ifdef SPMD
      ENDIF							      ENDIF
      call mpi_barrier(mpi_comm_ocn,ierr)			      call mpi_barrier(mpi_comm_ocn,ierr)
      call mpi_bcast(r_cp,1,mpi_real8,0,mpi_comm_ocn,ierr)	      call mpi_bcast(r_cp,1,mpi_real8,0,mpi_comm_ocn,ierr)
      call mpi_bcast(r_np,1,mpi_real8,0,mpi_comm_ocn,ierr)	      call mpi_bcast(r_np,1,mpi_real8,0,mpi_comm_ocn,ierr)
      call mpi_bcast(r_fec0,1,mpi_real8,0,mpi_comm_ocn,ierr)	      call mpi_bcast(r_fec0,1,mpi_real8,0,mpi_comm_ocn,ierr)
      call mpi_bcast(sigma_b,1,mpi_real8,0,mpi_comm_ocn,ierr)	      call mpi_bcast(sigma_b,1,mpi_real8,0,mpi_comm_ocn,ierr)
      call mpi_bcast(tau_b,1,mpi_real8,0,mpi_comm_ocn,ierr)	      call mpi_bcast(tau_b,1,mpi_real8,0,mpi_comm_ocn,ierr)
      call mpi_bcast(r_o2p,1,mpi_real8,0,mpi_comm_ocn,ierr)	      call mpi_bcast(r_o2p,1,mpi_real8,0,mpi_comm_ocn,ierr)
#endif								#endif
      r_fec(:,:)=r_fec0						      r_fec(:,:)=r_fec0
      r_fep(:,:)=r_fec(:,:)*r_cp      				      r_fep(:,:)=r_fec(:,:)*r_cp      
#endif								#endif
      								      
!								!
#ifdef SPMD							#ifdef SPMD
      IF(mytid==0) THEN						      IF(mytid==0) THEN
#endif      							#endif      
      WRITE(6,*) 'END-----------CTRLC'				      WRITE(6,*) 'END-----------CTRLC'
#ifdef SPMD							#ifdef SPMD
      ENDIF							      ENDIF
#endif								#endif
      								      
  END SUBROUTINE CTRLC						  END SUBROUTINE CTRLC

! CVS: $Id: inirun_pt.F90,v 2.1 2004/06/10 07:45:17 cvsr/ot E	! CVS: $Id: inirun_pt.F90,v 2.1 2004/06/10 07:45:17 cvsr/ot E
!------------------------------------------			!------------------------------------------
    SUBROUTINE INIRUN_PT					    SUBROUTINE INIRUN_PT
!========================					!========================
!								!
! purpose: initialization carbon model				! purpose: initialization carbon model
!								!
! author: Zhao Liang@lapc 2004/03/02				! author: Zhao Liang@lapc 2004/03/02
!------------------------------------------------------------	!------------------------------------------------------------
#include <def-undef.h>       					#include <def-undef.h>       
!								!
      USE param_mod						      USE param_mod
      USE carbon_mod						      USE carbon_mod
      USE cforce_mod						      USE cforce_mod
      USE coutput_mod						      USE coutput_mod
      USE pconst_mod 						      USE pconst_mod 
#ifdef SPMD      						#ifdef SPMD      
      USE msg_mod,only:mpi_comm_ocn				      USE msg_mod,only:mpi_comm_ocn
#endif      							#endif      
!lyc 2014.09.17							!lyc 2014.09.17
#ifdef COUP							#ifdef COUP
     USE buf_mod,only:pco2,co2_cpl,pco2up			     USE buf_mod,only:pco2,co2_cpl,pco2up
#endif								#endif
!								!
!------------------------------------------------------------	!------------------------------------------------------------
      IMPLICIT NONE						      IMPLICIT NONE
#include <netcdf.inc>      					#include <netcdf.inc>      
!								!
      REAL*4::ddd						      REAL*4::ddd
      integer::dd,np						      integer::dd,np
      REAL*4,DIMENSION(km)::tactmp,po4tmp			      REAL*4,DIMENSION(km)::tactmp,po4tmp
!lyc 2013,07							!lyc 2013,07
      real*4,dimension(imt_global,jmt_global,km)::fe_in		      real*4,dimension(imt_global,jmt_global,km)::fe_in
      integer::ncid,iret					      integer::ncid,iret
!								!
#ifdef SPMD							#ifdef SPMD
      IF(mytid==0) THEN						      IF(mytid==0) THEN
#endif      							#endif      
      WRITE(6,*) 'Begining------INIRUN_PT'			      WRITE(6,*) 'Begining------INIRUN_PT'
#ifdef SPMD							#ifdef SPMD
      ENDIF							      ENDIF
#endif								#endif
!lyc------------------------------------			!lyc------------------------------------
!2008.12.26 for the calculation of normalized surface total a	!2008.12.26 for the calculation of normalized surface total a
!!------------------------------------				!!------------------------------------
!    call mpi_bcast(basin,imt*jmt_global,mpi_integer,0,mpi_co	!    call mpi_bcast(basin,imt*jmt_global,mpi_integer,0,mpi_co
!!-----------------------------------------------------------	!!-----------------------------------------------------------
!lyc 2014.09.17							!lyc 2014.09.17
#ifdef COUP							#ifdef COUP
    allocate(pco2(imt,jmt),co2_cpl(imt,jmt),pco2up(imt,jmt))	    allocate(pco2(imt,jmt),co2_cpl(imt,jmt),pco2up(imt,jmt))
#endif								#endif
#ifdef SPMD							#ifdef SPMD
    IF(mytid==0) THEN						    IF(mytid==0) THEN
     pt_io=0.0							     pt_io=0.0
        							        
!$OMP PARALLEL DO PRIVATE (j,i)					!$OMP PARALLEL DO PRIVATE (j,i)
   DO j=1,jmt_global						   DO j=1,jmt_global
    DO i=1,imt_global						    DO i=1,imt_global
    totup_io(i,j)=0.0						    totup_io(i,j)=0.0
    tpco2o_io(i,j)=0.0						    tpco2o_io(i,j)=0.0
    tdpco2o_io(i,j)=0.0						    tdpco2o_io(i,j)=0.0
    ENDDO							    ENDDO
   ENDDO							   ENDDO
!								!
!$OMP PARALLEL DO PRIVATE (k,j,i)				!$OMP PARALLEL DO PRIVATE (k,j,i)
  DO k=1,km							  DO k=1,km
   DO j=1,jmt_global						   DO j=1,jmt_global
    DO i=1,imt_global						    DO i=1,imt_global
      tocaco3_io(i,j,k)=0.0					      tocaco3_io(i,j,k)=0.0
      toa0_io(i,j,k)=0.0					      toa0_io(i,j,k)=0.0
    ENDDO							    ENDDO
   ENDDO							   ENDDO
  ENDDO								  ENDDO

    ENDIF							    ENDIF
#endif								#endif
!$OMP PARALLEL DO PRIVATE (j,i)					!$OMP PARALLEL DO PRIVATE (j,i)
      DO j=1,jmt						      DO j=1,jmt
        DO i=1,imt						        DO i=1,imt
          ssfc(i,j)=0.0						          ssfc(i,j)=0.0
          sge(i,j)=0.0						          sge(i,j)=0.0
        ENDDO							        ENDDO
      ENDDO							      ENDDO
!     -------------------------------------------------------	!     -------------------------------------------------------
!     Output Arrays						!     Output Arrays
!     -------------------------------------------------------	!     -------------------------------------------------------
!C$OMP PARALLEL DO PRIVATE (k,j,i)				!C$OMP PARALLEL DO PRIVATE (k,j,i)
      DO k=1,km							      DO k=1,km
        DO j=1,jmt						        DO j=1,jmt
          DO i=1,imt						          DO i=1,imt
            ccmon(i,j,k)=0.0					            ccmon(i,j,k)=0.0
#ifdef carbonBio						#ifdef carbonBio
            po4mon(i,j,k)=0.0					            po4mon(i,j,k)=0.0
            ldocmon(i,j,k)=0.0					            ldocmon(i,j,k)=0.0
            tamon(i,j,k)=0.0					            tamon(i,j,k)=0.0
            prodmon(i,j,k)=0.0					            prodmon(i,j,k)=0.0
            fpopmon(i,j,k)=0.0					            fpopmon(i,j,k)=0.0
            pldocmon(i,j,k)=0.0					            pldocmon(i,j,k)=0.0
            remimon(i,j,k)=0.0					            remimon(i,j,k)=0.0
            jpopmon(i,j,k)=0.0					            jpopmon(i,j,k)=0.0
            caco3mon(i,j,k)=0.0					            caco3mon(i,j,k)=0.0
	    o2mon(i,j,k)=0.						    o2mon(i,j,k)=0.
            femon(i,j,k)=0.0					            femon(i,j,k)=0.0
#endif								#endif
          ENDDO							          ENDDO
        ENDDO							        ENDDO
      ENDDO							      ENDDO
!								!
#ifdef carbonBio						#ifdef carbonBio
      r_cap(1:km)=0.0						      r_cap(1:km)=0.0
      kappa_b(1:km)=0.0						      kappa_b(1:km)=0.0
      delta_a(1:km)=0.0						      delta_a(1:km)=0.0
!C$OMP PARALLEL DO PRIVATE (k,j,i)				!C$OMP PARALLEL DO PRIVATE (k,j,i)
      DO k=1,km							      DO k=1,km
        DO j=1,jmt						        DO j=1,jmt
          DO i=1,imt						          DO i=1,imt
            a0_b(i,j,k)=0.0					            a0_b(i,j,k)=0.0
            a1_b(i,j,k)=0.0					            a1_b(i,j,k)=0.0
            a2_b(i,j,k)=0.0					            a2_b(i,j,k)=0.0
            b0_b(i,j,k)=0.0					            b0_b(i,j,k)=0.0
            b1_b(i,j,k)=0.0					            b1_b(i,j,k)=0.0
            b2_b(i,j,k)=0.0					            b2_b(i,j,k)=0.0
            c_b(i,j,k)=0.0					            c_b(i,j,k)=0.0
!lyc ----------------------------------				!lyc ----------------------------------
           tocaco3(i,j,k)=0.0					           tocaco3(i,j,k)=0.0
           toa0(i,j,k)=0.0					           toa0(i,j,k)=0.0
          ENDDO							          ENDDO
        ENDDO							        ENDDO
      ENDDO							      ENDDO
#endif								#endif
!--------------------------					!--------------------------
          monthR=1						          monthR=1
!----------------------						!----------------------
      IF(NSTARTC==1) THEN					      IF(NSTARTC==1) THEN
!   ------------------------------------------			!   ------------------------------------------
!     INITIALIZE CARBON VARIABLES 				!     INITIALIZE CARBON VARIABLES 
!   ------------------------------------------			!   ------------------------------------------
#if (defined carbonBio) || (defined carbonAbio)			#if (defined carbonBio) || (defined carbonAbio)
#ifdef SPMD							#ifdef SPMD
      IF (mytid==0) THEN					      IF (mytid==0) THEN
#ifdef preindustrial						#ifdef preindustrial
!     initial TC data         					!     initial TC data         
        OPEN(81,FILE="tcinitial.dat")				        OPEN(81,FILE="tcinitial.dat")
        DO k=1,km						        DO k=1,km
          READ(81,*) ddd,tactmp(k)				          READ(81,*) ddd,tactmp(k)
        ENDDO							        ENDDO
        CLOSE(81)						        CLOSE(81)
        DO k=1,km						        DO k=1,km
          DO j=1,jmt_global					          DO j=1,jmt_global
            DO i=1,imt_global 					            DO i=1,imt_global 
#ifdef carbonAbio						#ifdef carbonAbio
              pt_io(i,j,k,1)=tactmp(k)-2000.			              pt_io(i,j,k,1)=tactmp(k)-2000.
#else								#else
              pt_io(i,j,k,1)=tactmp(k)				              pt_io(i,j,k,1)=tactmp(k)
#endif								#endif
            ENDDO						            ENDDO
          ENDDO							          ENDDO
        ENDDO							        ENDDO
#ifdef carbonBio						#ifdef carbonBio
!-     initial PO4						!-     initial PO4
      OPEN (81,file='po4initial.dat')				      OPEN (81,file='po4initial.dat')
       do k=1,km						       do k=1,km
	   read(81,*) ddd,po4tmp(k)					   read(81,*) ddd,po4tmp(k)
       enddo							       enddo
       do  k=1,km						       do  k=1,km
         do j=1,jmt_global					         do j=1,jmt_global
            do i=1,imt_global					            do i=1,imt_global
            pt_io(i,j,k,2)=po4tmp(k)				            pt_io(i,j,k,2)=po4tmp(k)
	    enddo							    enddo
	 enddo								 enddo
       enddo							       enddo
       CLOSE(81)						       CLOSE(81)

!     initial TA data         					!     initial TA data         
!        OPEN(81,FILE="tainitial.dat")				!        OPEN(81,FILE="tainitial.dat")
       OPEN(81,FILE="ta-profile.dat")				       OPEN(81,FILE="ta-profile.dat")
        DO k=1,km						        DO k=1,km
          READ(81,*) ddd,tactmp(k)				          READ(81,*) ddd,tactmp(k)
        ENDDO							        ENDDO
        CLOSE(81)						        CLOSE(81)
        DO k=1,km						        DO k=1,km
          DO j=1,jmt_global					          DO j=1,jmt_global
            DO i=1,imt_global 					            DO i=1,imt_global 
              pt_io(i,j,k,4)=tactmp(k)				              pt_io(i,j,k,4)=tactmp(k)
            ENDDO						            ENDDO
          ENDDO							          ENDDO
        ENDDO							        ENDDO
!     initial LDOC data         				!     initial LDOC data         
!        DO k=1,kmmix						!        DO k=1,kmmix
        DO k=1,km						        DO k=1,km
          DO j=1,jmt_global					          DO j=1,jmt_global
            DO i=1,imt_global					            DO i=1,imt_global
              pt_io(i,j,k,3)=4.2				              pt_io(i,j,k,3)=4.2
            ENDDO						            ENDDO
          ENDDO							          ENDDO
        ENDDO							        ENDDO
!     initial o2 data						!     initial o2 data
        DO k=1,km						        DO k=1,km
          DO j=1,jmt_global					          DO j=1,jmt_global
            DO i=1,imt_global 					            DO i=1,imt_global 
              pt_io(i,j,k,5)=170.				              pt_io(i,j,k,5)=170.
            ENDDO						            ENDDO
          ENDDO							          ENDDO
        ENDDO							        ENDDO
!     initial Fe data						!     initial Fe data
      iret=nf_open('Initial_Fe.nc',nf_nowrite,ncid)		      iret=nf_open('Initial_Fe.nc',nf_nowrite,ncid)
       call check_err (iret)					       call check_err (iret)
   								   
      iret=nf_get_vara_real(ncid,   4,(/1,1,1/),(/imt_global,	      iret=nf_get_vara_real(ncid,   4,(/1,1,1/),(/imt_global,
      call check_err (iret)					      call check_err (iret)
    								    
      iret=nf_close(ncid)					      iret=nf_close(ncid)
      call check_err (iret)					      call check_err (iret)

       pt_io(:,:,:,6)=fe_in					       pt_io(:,:,:,6)=fe_in
      								      
       								       
#endif								#endif
!lyc								!lyc
	 write(6,*) 'tc initial:'					 write(6,*) 'tc initial:'
         write(6,*)pt_io(imt_global/2,jmt_global/2,1:km,1)	         write(6,*)pt_io(imt_global/2,jmt_global/2,1:km,1)
	 write(6,*) 'po4 initial:'					 write(6,*) 'po4 initial:'
         write(6,*)pt_io(imt_global/2,jmt_global/2,1:km,2)	         write(6,*)pt_io(imt_global/2,jmt_global/2,1:km,2)
	 write(6,*)'LODC initial:'					 write(6,*)'LODC initial:'
	 write(6,*)pt_io(imt_global/2,jmt_global/2,1:km,3)		 write(6,*)pt_io(imt_global/2,jmt_global/2,1:km,3)
	 write(6,*) 'ta initial:'					 write(6,*) 'ta initial:'
         write(6,*)pt_io(imt_global/2,jmt_global/2,1:km,4)	         write(6,*)pt_io(imt_global/2,jmt_global/2,1:km,4)
	 write(6,*) 'fe initial:'					 write(6,*) 'fe initial:'
         write(6,*)pt_io(imt_global/2,jmt_global/2,1:km,6)	         write(6,*)pt_io(imt_global/2,jmt_global/2,1:km,6)
! write end							! write end	
#else								#else
        OPEN(32,FILE='fort.32',FORM='unformatted')		        OPEN(32,FILE='fort.32',FORM='unformatted')
        REWIND(32)						        REWIND(32)
#ifdef carbonAbio 						#ifdef carbonAbio 
        READ(32) pt_io,totup_io,tpco2o_io,tdpco2o_io,monthR	        READ(32) pt_io,totup_io,tpco2o_io,tdpco2o_io,monthR
#endif     							#endif     
#ifdef carbonBio 						#ifdef carbonBio 
        read(32) pt_io!,totup_io,tpco2o_io,tdpco2o_io,tocaco3	        read(32) pt_io!,totup_io,tpco2o_io,tdpco2o_io,tocaco3
#endif								#endif
        close(32)						        close(32)
!        monthR=1						!        monthR=1
#endif 								#endif 
  !fort.32 here is for AnthroCO2 from pre-industrial results	  !fort.32 here is for AnthroCO2 from pre-industrial results
      ENDIF							      ENDIF
!------------------------------------------------------------	!------------------------------------------------------------
        call mpi_bcast(monthR,1,mpi_integer,0,mpi_comm_ocn,ie	        call mpi_bcast(monthR,1,mpi_integer,0,mpi_comm_ocn,ie
!        call global_to_local_4d(pt_io,pt,km,nptra)		!        call global_to_local_4d(pt_io,pt,km,nptra)
!lyc 2014.06							!lyc 2014.06
        do np=1,nptra						        do np=1,nptra
        do k=1,km						        do k=1,km
        call global_distribute(pt_io(:,:,k,np),pt(:,:,k,np))	        call global_distribute(pt_io(:,:,k,np),pt(:,:,k,np))
        enddo							        enddo
        enddo							        enddo
       								       
!       if(mytid==2)print*,'pt(1) in inirun',pt(:,:,1,1)	!       if(mytid==2)print*,'pt(1) in inirun',pt(:,:,1,1)
!       if(mytid==2)print*,'pt(2) in inirun',pt(:,:,1,6)	!       if(mytid==2)print*,'pt(2) in inirun',pt(:,:,1,6)
!------------------------------------------------------------	!------------------------------------------------------------
#else        							#else        
!     initial TC data         					!     initial TC data         
      OPEN(81,FILE="tcinital.dat")				      OPEN(81,FILE="tcinital.dat")
      DO k=1,km							      DO k=1,km
        READ(81,*) ddd,tactmp(k)				        READ(81,*) ddd,tactmp(k)
      ENDDO							      ENDDO
      CLOSE(81)							      CLOSE(81)
      DO k=1,km							      DO k=1,km
        DO j=1,jmt						        DO j=1,jmt
          DO i=1,imt 						          DO i=1,imt 
#ifdef carbonAbio						#ifdef carbonAbio
            pt(i,j,k,1)=tactmp(k)-2000.				            pt(i,j,k,1)=tactmp(k)-2000.
#else								#else
            pt(i,j,k,1)=tactmp(K)				            pt(i,j,k,1)=tactmp(K)
#endif								#endif
          ENDDO							          ENDDO
        ENDDO							        ENDDO
      ENDDO							      ENDDO
#ifdef carbonBio						#ifdef carbonBio
!     initial PO4 data         					!     initial PO4 data         
      OPEN(81,file="po4initial.dat")				      OPEN(81,file="po4initial.dat")
      DO k=1,km							      DO k=1,km
        DO j=1,jmt						        DO j=1,jmt
          READ(81,*) (pt(i,j,k,2),i=1,imt)			          READ(81,*) (pt(i,j,k,2),i=1,imt)
        ENDDO							        ENDDO
      ENDDO							      ENDDO
!     initial TA data         					!     initial TA data         
      CLOSE(81)							      CLOSE(81)
      OPEN(81,FILE="tainital.dat")				      OPEN(81,FILE="tainital.dat")
      DO k=1,km							      DO k=1,km
        READ(81,*) ddd,tactmp(k)				        READ(81,*) ddd,tactmp(k)
      ENDDO							      ENDDO
      CLOSE(81)							      CLOSE(81)
      DO k=1,km							      DO k=1,km
        DO j=1,jmt						        DO j=1,jmt
          DO i=1,imt 						          DO i=1,imt 
            pt(i,j,k,4)=tactmp(k)				            pt(i,j,k,4)=tactmp(k)
          ENDDO							          ENDDO
        ENDDO							        ENDDO
      ENDDO							      ENDDO
!     initial LDOC data         				!     initial LDOC data         
      DO k=1,km							      DO k=1,km
        DO j=1,jmt						        DO j=1,jmt
          DO i=1,imt 						          DO i=1,imt 
            pt(i,j,k,3)=4.2					            pt(i,j,k,3)=4.2
          ENDDO							          ENDDO
        ENDDO							        ENDDO
      ENDDO							      ENDDO
!     initial o2 data						!     initial o2 data
        DO k=1,km						        DO k=1,km
          DO j=1,jmt						          DO j=1,jmt
            DO i=1,imt 						            DO i=1,imt 
              pt(i,j,k,5)=170.					              pt(i,j,k,5)=170.
            ENDDO						            ENDDO
          ENDDO							          ENDDO
        ENDDO							        ENDDO
#endif								#endif
#endif								#endif
!--------------------------------				!--------------------------------
      DO m=1,nptra						      DO m=1,nptra
!$OMP PARALLEL DO PRIVATE (k,j,i)				!$OMP PARALLEL DO PRIVATE (k,j,i)
        DO k=1,km						        DO k=1,km
          DO j=1,jmt						          DO j=1,jmt
            DO i=1,imt 						            DO i=1,imt 
             pt(i,j,k,m)=pt(i,j,k,m)*vit(i,j,k)			             pt(i,j,k,m)=pt(i,j,k,m)*vit(i,j,k)
#ifdef Felimit							#ifdef Felimit
             if(pt(i,j,k,6)>1.0E+2) then			             if(pt(i,j,k,6)>1.0E+2) then
             print *,'Initial of fe is error',i_global(i),j_g	             print *,'Initial of fe is error',i_global(i),j_g
             endif						             endif
#endif								#endif
            ENDDO						            ENDDO
          ENDDO							          ENDDO
        ENDDO							        ENDDO
      ENDDO							      ENDDO
#endif								#endif
! -------------------------------   				! -------------------------------   
      DO m=1,nptra						      DO m=1,nptra
!$OMP PARALLEL DO PRIVATE (k,j,i) 				!$OMP PARALLEL DO PRIVATE (k,j,i) 
        DO k=1,km						        DO k=1,km
          DO j=1,jmt						          DO j=1,jmt
            DO i=1,imt						            DO i=1,imt
#if (defined carbonC)|| (defined cfc)            		#if (defined carbonC)|| (defined cfc)            
              pt(i,j,k,m)=0.0					              pt(i,j,k,m)=0.0
#endif              						#endif              
              ptb(i,j,k,m)=pt(i,j,k,m)				              ptb(i,j,k,m)=pt(i,j,k,m)
            ENDDO						            ENDDO
          ENDDO							          ENDDO
        ENDDO							        ENDDO
!      								!      
!$OMP PARALLEL DO PRIVATE (j,i)					!$OMP PARALLEL DO PRIVATE (j,i)
        DO j=1,jmt						        DO j=1,jmt
          DO i=1,imt						          DO i=1,imt
            ptb(i,j,0,m) = 0.0					            ptb(i,j,0,m) = 0.0
          ENDDO							          ENDDO
        ENDDO							        ENDDO

      ENDDO							      ENDDO
      !								      !
#if (defined carbonC) || (defined carbonBio) || (defined carb	#if (defined carbonC) || (defined carbonBio) || (defined carb
!$OMP PARALLEL DO PRIVATE (j,i)					!$OMP PARALLEL DO PRIVATE (j,i)
      DO j=1,jmt						      DO j=1,jmt
        DO i=1,imt						        DO i=1,imt
          totup(i,j)=0.0					          totup(i,j)=0.0
          tpco2o(i,j)=0.0					          tpco2o(i,j)=0.0
          tdpco2o(i,j)=0.0					          tdpco2o(i,j)=0.0
        ENDDO							        ENDDO
      ENDDO							      ENDDO
#endif								#endif
!								!
#ifdef carbonBio						#ifdef carbonBio
! initial variables used in biological model			! initial variables used in biological model
#endif								#endif
!----------------------------------------			!----------------------------------------
      ELSE							      ELSE
!     --------------------------------------------		!     --------------------------------------------
!     READ INTERMEDIATE RESULTS (fort.32/fort.31)		!     READ INTERMEDIATE RESULTS (fort.32/fort.31)
!     ---------------------------------------------		!     ---------------------------------------------
#ifdef SPMD							#ifdef SPMD
      IF(mytid==0) THEN						      IF(mytid==0) THEN
        OPEN(32,FILE='fort.32',FORM='unformatted')		        OPEN(32,FILE='fort.32',FORM='unformatted')
        REWIND(32)						        REWIND(32)
#ifdef carbonC14      						#ifdef carbonC14      
        READ(32) pt_io,monthR					        READ(32) pt_io,monthR
#endif      							#endif      
!								!
#if(defined carbonC) || (defined carbonAbio) 			#if(defined carbonC) || (defined carbonAbio) 
        READ(32) pt_io,totup_io,tpco2o_io,tdpco2o_io,monthR	        READ(32) pt_io,totup_io,tpco2o_io,tdpco2o_io,monthR
#endif  							#endif  
!xu for testing-------------------------------------------   	!xu for testing-------------------------------------------   
          DO j=1,jmt_global					          DO j=1,jmt_global
            DO i=1,imt_global 					            DO i=1,imt_global 
              totup_io(i,j)=0.0					              totup_io(i,j)=0.0
          ENDDO							          ENDDO
        ENDDO							        ENDDO
!-----------------------------------------------		!-----------------------------------------------
!-----------------------------------------------		!-----------------------------------------------
#ifdef carbonBio 						#ifdef carbonBio 
! read restart data from file 32 for continuous calculation	! read restart data from file 32 for continuous calculation
        READ(32) pt_io,totup_io,tpco2o_io,tdpco2o_io,tocaco3_	        READ(32) pt_io,totup_io,tpco2o_io,tdpco2o_io,tocaco3_
!         print*,"pt_io",pt_io(100,50,10,4)			!         print*,"pt_io",pt_io(100,50,10,4)
!lyc 2014.06.08 just for one time				!lyc 2014.06.08 just for one time
#endif      							#endif      
        CLOSE(32)						        CLOSE(32)
      ENDIF							      ENDIF

      call mpi_barrier(mpi_comm_ocn,ierr)			      call mpi_barrier(mpi_comm_ocn,ierr)
      call mpi_bcast(monthR,1,mpi_integer,0,mpi_comm_ocn,ierr	      call mpi_bcast(monthR,1,mpi_integer,0,mpi_comm_ocn,ierr
!lyc 2014.06    						!lyc 2014.06    
      do np=1,nptra						      do np=1,nptra
      do k=1,km							      do k=1,km
      call global_distribute(pt_io(:,:,k,np),pt(:,:,k,np))	      call global_distribute(pt_io(:,:,k,np),pt(:,:,k,np))
      enddo							      enddo
      enddo							      enddo
!								!
#if(defined carbonC) || (defined carbonAbio)			#if(defined carbonC) || (defined carbonAbio)
      call global_distribute(totup_io,totup)			      call global_distribute(totup_io,totup)
      call global_distribute(tpco2o_io,tpco2o)			      call global_distribute(tpco2o_io,tpco2o)
      call global_distribute(tdpco2o_io,tdpco2o)		      call global_distribute(tdpco2o_io,tdpco2o)
#endif      							#endif      
!								!
#ifdef carbonBio						#ifdef carbonBio
! special restart data of biological model			! special restart data of biological model
      call global_distribute(totup_io,totup)			      call global_distribute(totup_io,totup)
      call global_distribute(tpco2o_io,tpco2o)			      call global_distribute(tpco2o_io,tpco2o)
      call global_distribute(tdpco2o_io,tdpco2o)		      call global_distribute(tdpco2o_io,tdpco2o)
      do k=1,km							      do k=1,km
      call global_distribute(tocaco3_io(1,1,k),tocaco3(1,1,k)	      call global_distribute(tocaco3_io(1,1,k),tocaco3(1,1,k)
      call global_distribute(toa0_io(1,1,k),toa0(1,1,k))	      call global_distribute(toa0_io(1,1,k),toa0(1,1,k))
      enddo							      enddo
#endif      							#endif      
#else								#else
      OPEN(32,FILE='fort.32',FORM='unformatted')		      OPEN(32,FILE='fort.32',FORM='unformatted')
      REWIND(32)						      REWIND(32)
#ifdef carbonC14      						#ifdef carbonC14      
      READ(32) pt,monthR					      READ(32) pt,monthR
#endif      							#endif      
!								!
#if (defined carbonC) || (defined carbonAbio) 			#if (defined carbonC) || (defined carbonAbio) 
      READ(32) pt,totup,tpco2o,tdpco2o,monthR			      READ(32) pt,totup,tpco2o,tdpco2o,monthR
#endif      							#endif      
!								!
#ifdef carbonBio      						#ifdef carbonBio      
      READ(32) pt,totup,tpco2o,tdpco2o,tocaco3,t,toa0,omonthR	      READ(32) pt,totup,tpco2o,tdpco2o,tocaco3,t,toa0,omonthR
#endif      							#endif      
      CLOSE(32)							      CLOSE(32)
#endif      							#endif      
!--------------------------------------				!--------------------------------------
      DO m=1,nptra						      DO m=1,nptra
!$OMP PARALLEL DO PRIVATE (k,j,i) 				!$OMP PARALLEL DO PRIVATE (k,j,i) 
        DO k=1,km						        DO k=1,km
          DO j=1,jmt						          DO j=1,jmt
            DO i=1,imt						            DO i=1,imt
              ptb(i,j,k,m)=pt(i,j,k,m)				              ptb(i,j,k,m)=pt(i,j,k,m)
            ENDDO						            ENDDO
          ENDDO							          ENDDO
        ENDDO							        ENDDO
!      								!      
!$OMP PARALLEL DO PRIVATE (j,i)					!$OMP PARALLEL DO PRIVATE (j,i)
        DO j=1,jmt						        DO j=1,jmt
          DO i=1,imt						          DO i=1,imt
            ptb(i,j,0,m) = 0.0					            ptb(i,j,0,m) = 0.0
          ENDDO							          ENDDO
        ENDDO							        ENDDO
      ENDDO							      ENDDO
!      								!      
      ENDIF							      ENDIF
!								!
#ifdef SPMD							#ifdef SPMD
      IF(mytid==0) THEN						      IF(mytid==0) THEN
#endif      							#endif      
      WRITE(6,*) 'END-----------INIRUN_PT'			      WRITE(6,*) 'END-----------INIRUN_PT'
#ifdef SPMD							#ifdef SPMD
      ENDIF							      ENDIF
#endif								#endif
!lyc20121010      deallocate(pt_r4,totup_r4,tpco2o_r4,tdpco2o	!lyc20121010      deallocate(pt_r4,totup_r4,tpco2o_r4,tdpco2o
!------------------------------------------------------------	!------------------------------------------------------------
      END SUBROUTINE INIRUN_PT					      END SUBROUTINE INIRUN_PT

! CVS: $Id: cforce.F90,v 2.2 2004/06/13 12:14:56 cvsroot Exp 	! CVS: $Id: cforce.F90,v 2.2 2004/06/13 12:14:56 cvsroot Exp 
  SUBROUTINE CFORCE						  SUBROUTINE CFORCE
!========================					!========================
! CFORCE							! CFORCE
!------------------------------------------------------------	!------------------------------------------------------------
!								!
! purpose: set forcing data used in CARBON cycle		! purpose: set forcing data used in CARBON cycle
!								!
! author: Zhao Liang@lapc 2004/03/01				! author: Zhao Liang@lapc 2004/03/01
!								!
!------------------------------------------------------------	!------------------------------------------------------------
#include <def-undef.h>       					#include <def-undef.h>       
!								!
      USE param_mod						      USE param_mod
      USE carbon_mod						      USE carbon_mod
      USE pconst_mod,ONLY:vit,vit_global			      USE pconst_mod,ONLY:vit,vit_global
      USE cforce_mod						      USE cforce_mod
#ifdef SPMD      						#ifdef SPMD      
      USE msg_mod,only:mpi_comm_ocn				      USE msg_mod,only:mpi_comm_ocn
#endif      							#endif      
!								!
!------------------------------------------------------------	!------------------------------------------------------------
      IMPLICIT NONE						      IMPLICIT NONE
#include <netcdf.inc>      					#include <netcdf.inc>      
!#ifdef SPMD      						!#ifdef SPMD      
!#include <mpif.h>						!#include <mpif.h>
!#endif      							!#endif      
!      								!      
      REAL::tmp1						      REAL::tmp1
      integer,dimension(4)::start4,count4			      integer,dimension(4)::start4,count4
      integer::iret,ncid,t					      integer::iret,ncid,t
      real*4,dimension(:,:,:,:),allocatable:: po4_r4		      real*4,dimension(:,:,:,:),allocatable:: po4_r4
!wk add r8=============     					!wk add r8=============     
 real*4,allocatable,dimension(:)::csgn_r4,csg_r4,csgx_r4	 real*4,allocatable,dimension(:)::csgn_r4,csg_r4,csgx_r4
 real*4,dimension(km,12)::taobs_r4				 real*4,dimension(km,12)::taobs_r4
 real*4,dimension(imt_global,jmt_global,12)::winds_global_r4	 real*4,dimension(imt_global,jmt_global,12)::winds_global_r4
 real*4,dimension(imt_global,jmt_global,12)::pressure_r4,fe_f	 real*4,dimension(imt_global,jmt_global,12)::pressure_r4,fe_f
 real,dimension(imt_global,jmt_global,12)::fe_flux_io,dust_fl	 real,dimension(imt_global,jmt_global,12)::fe_flux_io,dust_fl

!wk add r8=============  					!wk add r8=============  
      allocate(po4_r4(imt_global,jmt_global,km,12))		      allocate(po4_r4(imt_global,jmt_global,km,12))
!lyc								!lyc
#ifdef cfc							#ifdef cfc
       real,dimension(ny):: cfcyear,vnerror,vserror		       real,dimension(ny):: cfcyear,vnerror,vserror
#endif								#endif

#ifdef SPMD							#ifdef SPMD
      IF(mytid==0) THEN						      IF(mytid==0) THEN
#endif      							#endif      
      WRITE(6,*) 'Begining------CFORCE'				      WRITE(6,*) 'Begining------CFORCE'
#ifdef SPMD							#ifdef SPMD
      ENDIF							      ENDIF
#endif								#endif
      								      
!cm080427--------						!cm080427--------
!#ifdef carbonC14						!#ifdef carbonC14
#if (defined carbonC14) && (!defined preindustrial)		#if (defined carbonC14) && (!defined preindustrial)
!cm080427--------						!cm080427--------
#ifdef SPMD							#ifdef SPMD
      IF(mytid==0) THEN						      IF(mytid==0) THEN
#endif								#endif
      OPEN(11,FILE='bom14.fmt',FORM='formatted')		      OPEN(11,FILE='bom14.fmt',FORM='formatted')
      READ(11,*) ny						      READ(11,*) ny
#ifdef SPMD							#ifdef SPMD
      ENDIF							      ENDIF
      CALL mpi_barrier(mpi_comm_ocn,ierr)			      CALL mpi_barrier(mpi_comm_ocn,ierr)
      CALL mpi_bcast(ny,1,mpi_integer,0,mpi_comm_ocn,ierr)	      CALL mpi_bcast(ny,1,mpi_integer,0,mpi_comm_ocn,ierr)
#endif								#endif
      ALLOCATE(kyear(ny),boml(ny),bomm(ny),bomh(ny))		      ALLOCATE(kyear(ny),boml(ny),bomm(ny),bomh(ny))
      								      
#ifdef SPMD							#ifdef SPMD
      IF(mytid==0) THEN						      IF(mytid==0) THEN
#endif								#endif
      DO i=1,ny							      DO i=1,ny
        READ(11,*) kyear(i),boml(i),bomm(i),bomh(i)		        READ(11,*) kyear(i),boml(i),bomm(i),bomh(i)
      ENDDO							      ENDDO
      CLOSE(11)							      CLOSE(11)
#ifdef SPMD							#ifdef SPMD
      ENDIF							      ENDIF
      CALL mpi_barrier(mpi_comm_ocn,ierr)			      CALL mpi_barrier(mpi_comm_ocn,ierr)
      CALL mpi_bcast(kyear,ny,mpi_integer,0,mpi_comm_ocn,ierr	      CALL mpi_bcast(kyear,ny,mpi_integer,0,mpi_comm_ocn,ierr
      CALL mpi_bcast(boml,ny,mpi_real8,0,mpi_comm_ocn,ierr)	      CALL mpi_bcast(boml,ny,mpi_real8,0,mpi_comm_ocn,ierr)
      CALL mpi_bcast(bomm,ny,mpi_real8,0,mpi_comm_ocn,ierr)	      CALL mpi_bcast(bomm,ny,mpi_real8,0,mpi_comm_ocn,ierr)
      CALL mpi_bcast(bomh,ny,mpi_real8,0,mpi_comm_ocn,ierr)	      CALL mpi_bcast(bomh,ny,mpi_real8,0,mpi_comm_ocn,ierr)
#endif								#endif
#endif								#endif
      								      
!#if (defined carbonC) ||(defined carbonAbio) || (defined car	!#if (defined carbonC) ||(defined carbonAbio) || (defined car
!!-----------------------------------------------------------	!!-----------------------------------------------------------
!!Read wind speed						!!Read wind speed
!! A.nnual mean wind spead for the calulation of exchange coe	!! A.nnual mean wind spead for the calulation of exchange coe
!! m is month number(1-12)					!! m is month number(1-12)
!!-----------------------------------------------------------	!!-----------------------------------------------------------
#if (defined FRC_CORE)||(defined COUP)				#if (defined FRC_CORE)||(defined COUP)
       continue							       continue
#else								#else
#ifdef SPMD							#ifdef SPMD
      IF(mytid==0) THEN						      IF(mytid==0) THEN
!!wk===================================================		!!wk===================================================
       winds_global(:,:,1:12)=10.0				       winds_global(:,:,1:12)=10.0
       open(88,file='winds.dat',form='unformatted',convert='b	       open(88,file='winds.dat',form='unformatted',convert='b
       do m=1,12						       do m=1,12
       read(88) winds_global_r4(:,:,m)				       read(88) winds_global_r4(:,:,m)
       enddo							       enddo
       do m=1,12						       do m=1,12
         do j=1,jmt_global					         do j=1,jmt_global
           do i=1,imt_global					           do i=1,imt_global
            winds_global(i,j,m)=dble(winds_global_r4(i,j,m))	            winds_global(i,j,m)=dble(winds_global_r4(i,j,m))
           enddo						           enddo
         enddo							         enddo
       enddo							       enddo
!!wk===================================================		!!wk===================================================
!      !print*,"winds=",winds_global				!      !print*,"winds=",winds_global
      ENDIF							      ENDIF
     do m=1,12							     do m=1,12
      call global_distribute(winds_global(:,:,m),winds(:,:,m)	      call global_distribute(winds_global(:,:,m),winds(:,:,m)
     enddo							     enddo
#else								#else
      winds(:,:,1:12)=10.0					      winds(:,:,1:12)=10.0
      open(88,file='winds.dat',form='unformatted',convert='bi	      open(88,file='winds.dat',form='unformatted',convert='bi
      do m=1,12							      do m=1,12
      read(88) winds(:,:,m)					      read(88) winds(:,:,m)
      enddo							      enddo
      close(88)							      close(88)
#endif      							#endif      
!$OMP PARALLEL DO PRIVATE (j,i,m)        			!$OMP PARALLEL DO PRIVATE (j,i,m)        
        DO j=1,jmt						        DO j=1,jmt
          DO i=1,imt						          DO i=1,imt
            DO m=1,12						            DO m=1,12
              winds(i,j,m)=winds(i,j,m)*vit(i,j,1)		              winds(i,j,m)=winds(i,j,m)*vit(i,j,1)
            ENDDO						            ENDDO
          ENDDO							          ENDDO
        ENDDO							        ENDDO
#endif								#endif
!cm090330----------------------------------------------------	!cm090330----------------------------------------------------
!read pressure							!read pressure
!								!
#if (defined FRC_CORE)||(defined COUP)				#if (defined FRC_CORE)||(defined COUP)
       continue							       continue
#else								#else
#ifdef SPMD							#ifdef SPMD
      IF(mytid==0) THEN						      IF(mytid==0) THEN
!!wk====================================================	!!wk====================================================
        open(88,file='pressure.dat',form='unformatted',conver	        open(88,file='pressure.dat',form='unformatted',conver
        do m=1,12						        do m=1,12
        read(88) pressure_r4(:,:,m)				        read(88) pressure_r4(:,:,m)
        enddo							        enddo
        do m=1,12						        do m=1,12
          do j=1,jmt_global					          do j=1,jmt_global
           do i=1,imt_global					           do i=1,imt_global
             pressure_global(i,j,m)=dble(pressure_r4(i,j,m))	             pressure_global(i,j,m)=dble(pressure_r4(i,j,m))
            enddo						            enddo
          enddo							          enddo
        enddo							        enddo

!!wk====================================================	!!wk====================================================
      ENDIF							      ENDIF
      do m=1,12							      do m=1,12
      call global_distribute(pressure_global(1,1,m),pressure(	      call global_distribute(pressure_global(1,1,m),pressure(
      enddo							      enddo
#else								#else
      open(88,file='pressure.dat',form='unformatted',convert=	      open(88,file='pressure.dat',form='unformatted',convert=
      do m=1,12							      do m=1,12
      read(88) pressure(:,:,m)					      read(88) pressure(:,:,m)
      enddo							      enddo
      close(88)							      close(88)
#endif      							#endif      
!$OMP PARALLEL DO PRIVATE (j,i,m)        			!$OMP PARALLEL DO PRIVATE (j,i,m)        
        DO j=1,jmt						        DO j=1,jmt
          DO i=1,imt						          DO i=1,imt
            DO m=1,12						            DO m=1,12
              pressure(i,j,m)=pressure(i,j,m)*vit(i,j,1)	              pressure(i,j,m)=pressure(i,j,m)*vit(i,j,1)
            ENDDO						            ENDDO
          ENDDO							          ENDDO
        ENDDO							        ENDDO
#endif								#endif
!cm090330----------------------------------------------------	!cm090330----------------------------------------------------
#if (defined carbonC) || (defined carbonBio)|| (defined carbo	#if (defined carbonC) || (defined carbonBio)|| (defined carbo
!------------------------------------------------------------	!------------------------------------------------------------
!    reading atmospheric CO2					!    reading atmospheric CO2
!------------------------------------------------------------	!------------------------------------------------------------
#ifdef preindustrial						#ifdef preindustrial
!        OPEN(11,FILE='prepco2atm.fmt',FORM='formatted')	!        OPEN(11,FILE='prepco2atm.fmt',FORM='formatted')
#else								#else
#ifdef SPMD      						#ifdef SPMD      
        IF(mytid==0) THEN					        IF(mytid==0) THEN
#endif        							#endif        
        OPEN(11,FILE='pco2atm.fmt',FORM='formatted')		        OPEN(11,FILE='pco2atm.fmt',FORM='formatted')
        READ(11,*) nsg1						        READ(11,*) nsg1
#ifdef SPMD							#ifdef SPMD
        ENDIF							        ENDIF
        call mpi_barrier(mpi_comm_ocn,ierr)			        call mpi_barrier(mpi_comm_ocn,ierr)
        call mpi_bcast(nsg1,1,mpi_integer,0,mpi_comm_ocn,ierr	        call mpi_bcast(nsg1,1,mpi_integer,0,mpi_comm_ocn,ierr
#endif								#endif
        allocate(csgn(nsg1),csg(nsg1),csgx(nsg1))		        allocate(csgn(nsg1),csg(nsg1),csgx(nsg1))
        allocate(csgn_r4(nsg1),csg_r4(nsg1),csgx_r4(nsg1))	        allocate(csgn_r4(nsg1),csg_r4(nsg1),csgx_r4(nsg1))
#ifdef SPMD							#ifdef SPMD
        IF(mytid==0) THEN					        IF(mytid==0) THEN
#endif								#endif
        DO j=1,nsg1						        DO j=1,nsg1
!wk add ============						!wk add ============
         ! READ(11,*) csgn(j),csg(j),csgx(nsg1)			         ! READ(11,*) csgn(j),csg(j),csgx(nsg1)
          READ(11,*) csgn_r4(j),csg_r4(j),csgx_r4(nsg1)		          READ(11,*) csgn_r4(j),csg_r4(j),csgx_r4(nsg1)
           csgn(j)=csgn_r4(j)					           csgn(j)=csgn_r4(j)
           csg(j) =csg_r4(j)					           csg(j) =csg_r4(j)
           csgx(j)=csgx_r4(nsg1)				           csgx(j)=csgx_r4(nsg1)
!wk add ============						!wk add ============
    								    
        ENDDO							        ENDDO
        CLOSE(11)						        CLOSE(11)
        deallocate(csgn_r4,csg_r4,csgx_r4)			        deallocate(csgn_r4,csg_r4,csgx_r4)

#ifdef SPMD        						#ifdef SPMD        
        ENDIF							        ENDIF
        call mpi_barrier(mpi_comm_ocn,ierr)			        call mpi_barrier(mpi_comm_ocn,ierr)
        call mpi_bcast(csgn,nsg1,mpi_real8,0,mpi_comm_ocn,ier	        call mpi_bcast(csgn,nsg1,mpi_real8,0,mpi_comm_ocn,ier
        call mpi_bcast(csg,nsg1,mpi_real8,0,mpi_comm_ocn,ierr	        call mpi_bcast(csg,nsg1,mpi_real8,0,mpi_comm_ocn,ierr
        call mpi_bcast(csgx,nsg1,mpi_real8,0,mpi_comm_ocn,ier	        call mpi_bcast(csgx,nsg1,mpi_real8,0,mpi_comm_ocn,ier
#endif        							#endif        
#endif        							#endif        
!for 746							!for 746
#endif								#endif
       if(mytid==0) print *, 'atm co2 is ok'			       if(mytid==0) print *, 'atm co2 is ok'


#ifdef carbonBio						#ifdef carbonBio
#ifdef SPMD							#ifdef SPMD
#ifdef murnane1999						#ifdef murnane1999
      IF(mytid==0) THEN						      IF(mytid==0) THEN
!----------------------------------------------------		!----------------------------------------------------
      iret=nf_open('po4.dat',nf_nowrite,ncid)			      iret=nf_open('po4.dat',nf_nowrite,ncid)
      call check_err (iret)					      call check_err (iret)
!----------------------------------------------------		!----------------------------------------------------
!   Retrieve data						!   Retrieve data
!----------------------------------------------------		!----------------------------------------------------
      start4(1)=1 ; count4(1)=imt_global			      start4(1)=1 ; count4(1)=imt_global
      start4(2)=1 ; count4(2)=jmt_global			      start4(2)=1 ; count4(2)=jmt_global
      start4(3)=1 ; count4(3)=km				      start4(3)=1 ; count4(3)=km
      start4(4)=1 ; count4(4)=12				      start4(4)=1 ; count4(4)=12
      iret=nf_get_vara_real(ncid,   5,start4,count4,po4_r4)	      iret=nf_get_vara_real(ncid,   5,start4,count4,po4_r4)
      call check_err (iret)					      call check_err (iret)
!								!
	    do m=1,12							    do m=1,12
	      do k=1,kmmix						      do k=1,kmmix
		do j=1,jmt_global						do j=1,jmt_global
		  do i=1,imt_global						  do i=1,imt_global
		      po4obs_global(i,j,k,m)=dble(po4_r4(i,j,			      po4obs_global(i,j,k,m)=dble(po4_r4(i,j,
!		      if(vit_global(i,j,k)>0.5.and.po4obs_glo	!		      if(vit_global(i,j,k)>0.5.and.po4obs_glo
		  enddo								  enddo
	        enddo							        enddo
	      enddo							      enddo
	    enddo							    enddo
      ENDIF							      ENDIF
      do m=1,12							      do m=1,12
       do k=1,kmmix						       do k=1,kmmix
      call global_distribute(po4obs_global(:,:,k,m),po4obs(:,	      call global_distribute(po4obs_global(:,:,k,m),po4obs(:,
       enddo							       enddo
      enddo							      enddo
!lyc								!lyc
#endif								#endif
#ifdef progca							#ifdef progca
! read forcing data of TA from GEOSEC       			! read forcing data of TA from GEOSEC       
      IF(mytid==0) THEN						      IF(mytid==0) THEN
!-------cm080814------------------------------			!-------cm080814------------------------------
!        OPEN(11,FILE='ta-geosec.dat',FORM='formatted')		!        OPEN(11,FILE='ta-geosec.dat',FORM='formatted')
        OPEN(11,FILE='ta-profile.dat',FORM='formatted')		        OPEN(11,FILE='ta-profile.dat',FORM='formatted')
!        DO m=1,12						!        DO m=1,12
!          READ(11,*)						!          READ(11,*)
          DO k=1,km						          DO k=1,km
!wk=======================================			!wk=======================================
            READ(11,*) tmp1,taobs_r4(k,1)			            READ(11,*) tmp1,taobs_r4(k,1)
            taobs(k,1:12)=dble(taobs_r4(k,1))			            taobs(k,1:12)=dble(taobs_r4(k,1))
          ENDDO							          ENDDO
!wk=======================================			!wk=======================================
!        ENDDO							!        ENDDO
        CLOSE(11)						        CLOSE(11)
      ENDIF							      ENDIF
      call mpi_bcast(taobs,km*12,mpi_real8,0,mpi_comm_ocn,ier	      call mpi_bcast(taobs,km*12,mpi_real8,0,mpi_comm_ocn,ier
#endif								#endif
!     if(mytid==0) print *,'before dust reading'		!     if(mytid==0) print *,'before dust reading'
!lyc 2013,07							!lyc 2013,07
!-----read the iron flux-------------------------		!-----read the iron flux-------------------------
      IF(mytid==0) THEN						      IF(mytid==0) THEN
      IF(Fe_FLUX_DATA) THEN					      IF(Fe_FLUX_DATA) THEN
      iret=nf_open('Fe_flux.nc',nf_nowrite,ncid)		      iret=nf_open('Fe_flux.nc',nf_nowrite,ncid)
      call check_err (iret)					      call check_err (iret)
      								      
      iret=nf_get_vara_real(ncid, 4,(/1,1,1/),(/imt_global,jm	      iret=nf_get_vara_real(ncid, 4,(/1,1,1/),(/imt_global,jm
      call check_err (iret)					      call check_err (iret)
      print *,'reading dust flux is ok,ncid',ncid		      print *,'reading dust flux is ok,ncid',ncid
! fe_force umol/cm2/s						! fe_force umol/cm2/s
      do t=1,12							      do t=1,12
       do j=1,jmt_global					       do j=1,jmt_global
         do i=1,imt_global      				         do i=1,imt_global      
!      fe_flux_io(i,j,t)=fe_bioava*fe_force(i,j,t)*10.0/1.025	!      fe_flux_io(i,j,t)=fe_bioava*fe_force(i,j,t)*10.0/1.025
!for csm1_bgc iron flux 					!for csm1_bgc iron flux 
      print *,'i=',i,'j=',j,'t=',t			      <
      print *,'imt_global=',imt_global,'jmt_global=',jmt_glob <
      print *,'fe_force(1,1,1)=',fe_force(i,j,t)	      <
      print *,'vit_global(1,1,1)=',vit_global(i,j,1)	      <
     fe_flux_io(i,j,t)=dble(fe_force(i,j,t))*10.0/1.025*vit_g	     fe_flux_io(i,j,t)=dble(fe_force(i,j,t))*10.0/1.025*vit_g
      print *,'i=',i,'j=',j,'t=',t			      <
      dust_flux_io(i,j,t)=(1-fe_bioava)*fe_force(i,j,t)*10.0/	      dust_flux_io(i,j,t)=(1-fe_bioava)*fe_force(i,j,t)*10.0/
         if(fe_flux_io(i,j,t)>1.0D+2) fe_flux_io(i,j,t)=0.0!p	         if(fe_flux_io(i,j,t)>1.0D+2) fe_flux_io(i,j,t)=0.0!p
         if(dust_flux_io(i,j,t)>1.0D+2) dust_flux_io(i,j,t)=0	         if(dust_flux_io(i,j,t)>1.0D+2) dust_flux_io(i,j,t)=0
         enddo							         enddo
       enddo							       enddo
       enddo							       enddo
      iret=nf_close(ncid)					      iret=nf_close(ncid)
      ENDIF							      ENDIF

      IF(DUST_DATA) THEN					      IF(DUST_DATA) THEN
      iret=nf_open('Dust_flux.nc',nf_nowrite,ncid)		      iret=nf_open('Dust_flux.nc',nf_nowrite,ncid)
      call check_err (iret)					      call check_err (iret)
      								      
      iret=nf_get_vara_real(ncid, 4,(/1,1,1/),(/imt_global,jm	      iret=nf_get_vara_real(ncid, 4,(/1,1,1/),(/imt_global,jm
      call check_err (iret)					      call check_err (iret)
!for dust flux (fe_force) units ug/cm2/s			!for dust flux (fe_force) units ug/cm2/s
!fe_flux_io umol/kg*m/s						!fe_flux_io umol/kg*m/s
!dust_flux_io ug/kg*m/s						!dust_flux_io ug/kg*m/s
      do t=1,12							      do t=1,12
       do j=1,jmt_global					       do j=1,jmt_global
         do i=1,imt_global      				         do i=1,imt_global      
      fe_flux_io(i,j,t)=0.035/55.847*fe_bioava*fe_force(i,j,t	      fe_flux_io(i,j,t)=0.035/55.847*fe_bioava*fe_force(i,j,t
      dust_flux_io(i,j,t)=(1-fe_bioava)*fe_force(i,j,t)*10.0/	      dust_flux_io(i,j,t)=(1-fe_bioava)*fe_force(i,j,t)*10.0/
         enddo							         enddo
       enddo							       enddo
       enddo							       enddo
     								     
      iret=nf_close(ncid)					      iret=nf_close(ncid)
      ENDIF							      ENDIF
!----------------------------------------------------		!----------------------------------------------------
      ENDIF							      ENDIF
      call mpi_barrier(mpi_comm_ocn,ierr)			      call mpi_barrier(mpi_comm_ocn,ierr)
      do t=1,12							      do t=1,12
      call global_distribute(fe_flux_io(:,:,t),fe_flux(:,:,t)	      call global_distribute(fe_flux_io(:,:,t),fe_flux(:,:,t)
      call global_distribute(dust_flux_io(:,:,t),dust_flux(:,	      call global_distribute(dust_flux_io(:,:,t),dust_flux(:,
      enddo 							      enddo 
       if(mytid==2) print *,'dust flux in mytid==2',fe_flux(:	       if(mytid==2) print *,'dust flux in mytid==2',fe_flux(:
      								      
#else								#else
#ifdef murnane1999						#ifdef murnane1999
!----------------------------------------------------		!----------------------------------------------------
      iret=nf_open('po4.dat',nf_nowrite,ncid)			      iret=nf_open('po4.dat',nf_nowrite,ncid)
      call check_err (iret)					      call check_err (iret)
!----------------------------------------------------		!----------------------------------------------------
!   Retrieve data						!   Retrieve data
!----------------------------------------------------		!----------------------------------------------------
      start4(1)=1 ; count4(1)=imt				      start4(1)=1 ; count4(1)=imt
      start4(2)=1 ; count4(2)=jmt_global			      start4(2)=1 ; count4(2)=jmt_global
      start4(3)=1 ; count4(3)=kmmix				      start4(3)=1 ; count4(3)=kmmix
      start4(4)=1 ; count4(4)=1					      start4(4)=1 ; count4(4)=1
      iret=nf_get_vara_real(ncid,   5,start4,count4,po4_r4)	      iret=nf_get_vara_real(ncid,   5,start4,count4,po4_r4)
      call check_err (iret)					      call check_err (iret)
!								!
	    do m=1,12							    do m=1,12
	      do k=1,kmmix						      do k=1,kmmix
		do j=1,jmt_global						do j=1,jmt_global
		  do i=1,imt							  do i=1,imt
		      po4obs(i,j,k,m)=po4_r4(i,j,k,1)				      po4obs(i,j,k,m)=po4_r4(i,j,k,1)
		  enddo								  enddo
	        enddo							        enddo
	      enddo							      enddo
	    enddo							    enddo
#endif								#endif
#ifdef progca							#ifdef progca
! read forcing data of TA from GEOSEC       			! read forcing data of TA from GEOSEC       
!        OPEN(11,FILE='ta-geosec.dat',FORM='formatted')		!        OPEN(11,FILE='ta-geosec.dat',FORM='formatted')
        OPEN(11,FILE='ta-profile.dat',FORM='formatted')		        OPEN(11,FILE='ta-profile.dat',FORM='formatted')
!        READ(11,*)						!        READ(11,*)
        DO m=1,12						        DO m=1,12
!          READ(11,*)						!          READ(11,*)
          DO k=1,km						          DO k=1,km
           ! READ(11,*) tmp1,taobs(k,m)				           ! READ(11,*) tmp1,taobs(k,m)
!wk========================================================	!wk========================================================
            READ(11,*) tmp1,taobs_r4(k,m)			            READ(11,*) tmp1,taobs_r4(k,m)
            taobs(k,m)=dble(taobs(k,m))				            taobs(k,m)=dble(taobs(k,m))
          ENDDO							          ENDDO
        ENDDO							        ENDDO
           print*,"taobs=",taobs				           print*,"taobs=",taobs
!wk========================================================	!wk========================================================
        CLOSE(11)						        CLOSE(11)
!-------cm080814------------------------------			!-------cm080814------------------------------
#endif								#endif
#ifdef murnane1999						#ifdef murnane1999
        DO m=1,12						        DO m=1,12
          DO k=1,kmmix  					          DO k=1,kmmix  
            DO j=1,jmt						            DO j=1,jmt
              DO i=1,imt					              DO i=1,imt
                po4obs(i,j,k,m)=po4obs(i,j,k,m)*vit(i,j,k)	                po4obs(i,j,k,m)=po4obs(i,j,k,m)*vit(i,j,k)
              ENDDO						              ENDDO
            ENDDO						            ENDDO
          ENDDO							          ENDDO
        ENDDO							        ENDDO
              							              
#endif								#endif
#endif								#endif
!for SPMD							!for SPMD
#endif								#endif
!for carbonBio							!for carbonBio
!lyc								!lyc
#ifdef cfc							#ifdef cfc
#ifdef SPMD							#ifdef SPMD
       if(mytid==0) then					       if(mytid==0) then
        OPEN(1,FILE='cfc-11.txt')				        OPEN(1,FILE='cfc-11.txt')
         DO I=1,ny						         DO I=1,ny
           READ(1,*) cfcyear(i),bomn(i),vnerror(i),boms(i),vs	           READ(1,*) cfcyear(i),bomn(i),vnerror(i),boms(i),vs
         ENDDO							         ENDDO
        CLOSE(1) 						        CLOSE(1) 
	endif								endif
      CALL mpi_barrier(mpi_comm_ocn,ierr)			      CALL mpi_barrier(mpi_comm_ocn,ierr)
      CALL mpi_bcast(bomn,ny,mpi_real8,0,mpi_comm_ocn,ierr)	      CALL mpi_bcast(bomn,ny,mpi_real8,0,mpi_comm_ocn,ierr)
      CALL mpi_bcast(boms,ny,mpi_real8,0,mpi_comm_ocn,ierr)	      CALL mpi_bcast(boms,ny,mpi_real8,0,mpi_comm_ocn,ierr)
#endif								#endif
#endif								#endif
 !lyc								 !lyc
#ifdef SPMD							#ifdef SPMD
      IF(mytid==0) THEN						      IF(mytid==0) THEN
#endif      							#endif      
      WRITE(6,*) 'END-----------CFORCE'				      WRITE(6,*) 'END-----------CFORCE'
#ifdef SPMD							#ifdef SPMD
      ENDIF							      ENDIF
#endif								#endif
      								      
  END SUBROUTINE CFORCE						  END SUBROUTINE CFORCE

! CVS: $Id: ptracer.F90,v 2.1 2004/06/10 07:45:17 cvsroot Exp	! CVS: $Id: ptracer.F90,v 2.1 2004/06/10 07:45:17 cvsroot Exp
!------------------------------------------------------------	!------------------------------------------------------------
      SUBROUTINE PTRACER					      SUBROUTINE PTRACER
!========================					!========================
!Xu 20121012							!Xu 20121012
! purpose: prediction of the passive tracers of biogeochemsit	! purpose: prediction of the passive tracers of biogeochemsit
!								!
! author: Zhao Liang@lapc 2004/03/03				! author: Zhao Liang@lapc 2004/03/03
!								!
!------------------------------------------------------------	!------------------------------------------------------------
#include <def-undef.h>       					#include <def-undef.h>       
!								!
      USE param_mod						      USE param_mod
      USE pconst_mod						      USE pconst_mod
      USE tracer_mod						      USE tracer_mod
      USE dyn_mod						      USE dyn_mod
      USE isopyc_mod						      USE isopyc_mod
      USE pmix_mod						      USE pmix_mod
      USE work_mod						      USE work_mod
      USE carbon_mod						      USE carbon_mod
      USE cforce_mod						      USE cforce_mod
      USE forc_mod						      USE forc_mod

#ifdef SPMD      						#ifdef SPMD      
      USE msg_mod,only:mpi_comm_ocn				      USE msg_mod,only:mpi_comm_ocn
#endif      							#endif      
!								!
!------------------------------------				!------------------------------------
      IMPLICIT NONE						      IMPLICIT NONE
!------------------------------------------------------------	!------------------------------------------------------------
      REAL    :: AIDIF,C2DTTS,AA,FAW,FIW,ALF,RNCC,ABC		      REAL    :: AIDIF,C2DTTS,AA,FAW,FIW,ALF,RNCC,ABC
      REAL    :: wt1,wt2,adv_y,adv_x,adv_z,adv_x1,adv_x2,upsh	      REAL    :: wt1,wt2,adv_y,adv_x,adv_z,adv_x1,adv_x2,upsh
      real*8    :: ldoctmp,ldocsum,deltata,deltapo4,deltatc	      real*8    :: ldoctmp,ldocsum,deltata,deltapo4,deltatc
      real*8    :: tatmp,tasum,tcsum,tctmp,po4sum,po4tmp,tcsu	      real*8    :: tatmp,tasum,tcsum,tctmp,po4sum,po4tmp,tcsu
      REAL,ALLOCATABLE,DIMENSION(:,:)  ::stf1			      REAL,ALLOCATABLE,DIMENSION(:,:)  ::stf1
      REAL,ALLOCATABLE,DIMENSION(:,:,:)::wkb1,wkc1,wkd1,tf1,u	      REAL,ALLOCATABLE,DIMENSION(:,:,:)::wkb1,wkc1,wkd1,tf1,u
      REAL,ALLOCATABLE,DIMENSION(:,:)  ::h0f1			      REAL,ALLOCATABLE,DIMENSION(:,:)  ::h0f1
      REAL,ALLOCATABLE,DIMENSION(:,:,:)::utf1,vtf1,utl1,vtl1,	      REAL,ALLOCATABLE,DIMENSION(:,:,:)::utf1,vtf1,utl1,vtl1,
      REAL,DIMENSION(IMT,JMT,KM)::TEST				      REAL,DIMENSION(IMT,JMT,KM)::TEST
!lyc 2014.09.18							!lyc 2014.09.18
      REAL,PARAMETER::fil_latp=66.0				      REAL,PARAMETER::fil_latp=66.0
!------------------------------------------			!------------------------------------------
#if (defined carbonC)||(defined carbonC14)			#if (defined carbonC)||(defined carbonC14)
      real*8::vseac,vseap					      real*8::vseac,vseap
#endif								#endif
!lyc201209							!lyc201209
     integer::np						     integer::np
!------------------------------------------------------------	!------------------------------------------------------------
!     SET LOCAL CONSTANT					!     SET LOCAL CONSTANT
!----------------------------------------------------------	!----------------------------------------------------------
 								 
      allocate(stf1(imt,jmt),tf1(imt,jmt,km))			      allocate(stf1(imt,jmt),tf1(imt,jmt,km))
      allocate(wkb1(imt,jmt,km),wkc1(imt,jmt,km),wkd1(imt,jmt	      allocate(wkb1(imt,jmt,km),wkc1(imt,jmt,km),wkd1(imt,jmt
      allocate(h0f1(imt,jmt))					      allocate(h0f1(imt,jmt))
      allocate(utf1(imt,jmt,km),vtf1(imt,jmt,km),utl1(imt,jmt	      allocate(utf1(imt,jmt,km),vtf1(imt,jmt,km),utl1(imt,jmt
      allocate(uwk1(imt,jmt,km),wst(imt,jmt,kmp1)) ! for upwe	      allocate(uwk1(imt,jmt,km),wst(imt,jmt,kmp1)) ! for upwe

#if (defined ISO)						#if (defined ISO)
      AIDIF = 1.0 						      AIDIF = 1.0 
#else								#else
      AIDIF = 0.0						      AIDIF = 0.0
#endif								#endif
 								 
      RNCC = 1.0/ FLOAT (NCC)					      RNCC = 1.0/ FLOAT (NCC)
!----------------------------					!----------------------------
!cm090302----							!cm090302----
!      IF (ISP >= 1)THEN					!      IF (ISP >= 1)THEN
      IF (mod(ISP,15)/=0) THEN					      IF (mod(ISP,15)/=0) THEN
!cm090302----							!cm090302----
         C2DTTS = DTS *2.0					         C2DTTS = DTS *2.0
         AA = 0.5						         AA = 0.5
      ELSE							      ELSE
         C2DTTS = DTS						         C2DTTS = DTS
         AA = 0.0						         AA = 0.0
      END IF							      END IF

     VTL1=0.0							     VTL1=0.0
     TF1=0.0							     TF1=0.0
 								 
!------------------------------------------------------------	!------------------------------------------------------------
!     PREPARATION FOR VERTICAL ADVECTIVE TERM			!     PREPARATION FOR VERTICAL ADVECTIVE TERM
!------------------------------------------------------------	!------------------------------------------------------------
 								 
!$OMP PARALLEL DO PRIVATE (J,I)					!$OMP PARALLEL DO PRIVATE (J,I)
      DO J = JST,JET						      DO J = JST,JET
         DO I = 1,IMT						         DO I = 1,IMT
            H0F1 (I,J)= H0F (I,J)* ONBC				            H0F1 (I,J)= H0F (I,J)* ONBC
         END DO							         END DO
      END DO							      END DO
 								 
!$OMP PARALLEL DO PRIVATE (J,I)					!$OMP PARALLEL DO PRIVATE (J,I)
      DO J = JST,JET						      DO J = JST,JET
         DO I = 1,IMT						         DO I = 1,IMT
            STF1 (I,J)= AA * H0F1 (I,J) + (1.0- AA)* H0L (I,J	            STF1 (I,J)= AA * H0F1 (I,J) + (1.0- AA)* H0L (I,J
        END DO							        END DO
      END DO							      END DO

    								    
 								 
!$OMP PARALLEL DO PRIVATE (K,J,I)				!$OMP PARALLEL DO PRIVATE (K,J,I)
      DO K = 1,KM						      DO K = 1,KM
         DO J = JST,JET						         DO J = JST,JET
            DO I = 1,IMT					            DO I = 1,IMT
               UTF1 (I,J,K)= UTF (I,J,K)* ONCC			               UTF1 (I,J,K)= UTF (I,J,K)* ONCC
               VTF1 (I,J,K)= VTF (I,J,K)* ONCC			               VTF1 (I,J,K)= VTF (I,J,K)* ONCC
            END DO						            END DO
         END DO							         END DO
      END DO							      END DO
 								 
!$OMP PARALLEL DO PRIVATE (K,J,I)				!$OMP PARALLEL DO PRIVATE (K,J,I)
      DO K = 1,KM						      DO K = 1,KM
         DO J = JST,JET						         DO J = JST,JET
            DO I = 1,IMT					            DO I = 1,IMT
               WKD1 (I,J,K)= AA * UTF1 (I,J,K) + (1.0- AA)* U	               WKD1 (I,J,K)= AA * UTF1 (I,J,K) + (1.0- AA)* U
               uwk1 (i,j,k)= wkd1(i,j,k) !for upwell_pt 	               uwk1 (i,j,k)= wkd1(i,j,k) !for upwell_pt 
               WKC1 (I,J,K)= AA * VTF1 (I,J,K) + (1.0- AA)* V	               WKC1 (I,J,K)= AA * VTF1 (I,J,K) + (1.0- AA)* V
               if(isnan(wkc1(i,j,k)))then			               if(isnan(wkc1(i,j,k)))then
               print *,'wkc1(v) is error,i,j,k,vtf1,vtl,aa,r2	               print *,'wkc1(v) is error,i,j,k,vtf1,vtl,aa,r2
               stop						               stop
	       endif							       endif
#if ( defined SMAG)						#if ( defined SMAG)
               UTL1 (I,J,K)= AA * UTF1 (I,J,K) + (1.0- AA)* U	               UTL1 (I,J,K)= AA * UTF1 (I,J,K) + (1.0- AA)* U
               VTL1 (I,J,K)= AA * VTF1 (I,J,K) + (1.0- AA)* V	               VTL1 (I,J,K)= AA * VTF1 (I,J,K) + (1.0- AA)* V
#endif								#endif
            END DO						            END DO
         END DO							         END DO
      END DO							      END DO

!      CALL UPWELL (WKD1,WKC1,STF1)				!      CALL UPWELL (WKD1,WKC1,STF1)
!      wst=ws							!      wst=ws
!------------------------------------------------------------	!------------------------------------------------------------
!     PREPARATION FOR HORIZONAL ADVECTIVE TERM 			!     PREPARATION FOR HORIZONAL ADVECTIVE TERM 
!------------------------------------------------------------	!------------------------------------------------------------
 								 
!$OMP PARALLEL DO PRIVATE (K,J,I)				!$OMP PARALLEL DO PRIVATE (K,J,I)
      DO K = 1,KM						      DO K = 1,KM
         DO J = JSM,JEM						         DO J = JSM,JEM
            DO I = 1,IMT					            DO I = 1,IMT
               UTL1 (I,J,K)= 0.25* OTX (J)* (WKD1 (I,J,K) + W	               UTL1 (I,J,K)= 0.25* OTX (J)* (WKD1 (I,J,K) + W
            END DO						            END DO
         END DO							         END DO
      END DO							      END DO
 								 
 								 
!$OMP PARALLEL DO PRIVATE (K,J,I)				!$OMP PARALLEL DO PRIVATE (K,J,I)
      DO K = 1,KM						      DO K = 1,KM
         DO J = JSM,JEM						         DO J = JSM,JEM
            DO I = 2,IMM					            DO I = 2,IMM
               WKD1 (I,J,K)= R2A (J)* (WKC1 (I,J,K) + WKC1 (I	               WKD1 (I,J,K)= R2A (J)* (WKC1 (I,J,K) + WKC1 (I
               WKB1 (I,J,K)= R2B (J)* (WKC1 (I,J -1,K) + WKC1	               WKB1 (I,J,K)= R2B (J)* (WKC1 (I,J -1,K) + WKC1
            END DO						            END DO
         END DO							         END DO
      END DO							      END DO
!lyc test						      <
							      <
!       do k=1,km					      <
!         do j=1,jmt					      <
!           do i=1,imt					      <
!             if(vit(i,j,k)<0.5) cycle			      <
!              if(isnan(pt(i,j,k,1)).or.isnan(pt(i,j,k,4))) t <
!              print *, 'i,j,k,pt',i,j_global(j),k,pt(i,j,k,1 <
!              endif					      <
!            enddo					      <
!           enddo					      <
!         enddo						      <
!       if(mytid==3) then				      <
!        print*,'i,j,k,vit(i,j,1),pt(i,j,k,:)',101,j_global(5 <
!       endif						      <
!-------------------------------------------			!-------------------------------------------
!lyc for upwell_pt						!lyc for upwell_pt
!   if(mytid==0) print *,'call upwell_pt'			!   if(mytid==0) print *,'call upwell_pt'
!---------------------------------------------------		!---------------------------------------------------
        CALL UPWELL_PT(uwk1,wkc1,utl1,wkd1,wkb1,wst)		        CALL UPWELL_PT(uwk1,wkc1,utl1,wkd1,wkb1,wst)
!--------------------------------------------------		!--------------------------------------------------
!   if(mytid==0) print *,'endcall upwell_pt'			!   if(mytid==0) print *,'endcall upwell_pt'
 								 
!------------------------------------------------------------	!------------------------------------------------------------
!     PREPARATION FOR ISOPYCNAL DIFFUSION & ADVECTION		!     PREPARATION FOR ISOPYCNAL DIFFUSION & ADVECTION
!------------------------------------------------------------	!------------------------------------------------------------
#if (defined ISO)						#if (defined ISO)
!     Calculate K1,K2 and K3					!     Calculate K1,K2 and K3
!------------------------------					!------------------------------
            CALL ISOPYC						            CALL ISOPYC
!------------------------------					!------------------------------
#endif								#endif
!--------------------------------------------			!--------------------------------------------
!     COMPUTING DIFFUSION COEFFICIENT				!     COMPUTING DIFFUSION COEFFICIENT
 								 
!$OMP PARALLEL DO PRIVATE (K,J,I)				!$OMP PARALLEL DO PRIVATE (K,J,I)
      DO K = 1,KM						      DO K = 1,KM
         DO J = JST,JET						         DO J = JST,JET
            DO I = 1,IMT					            DO I = 1,IMT
#if (defined ISO)						#if (defined ISO)

               WKC1 (I,J,K) = AHV + AHISOP * K3 (I,K,J,3)	               WKC1 (I,J,K) = AHV + AHISOP * K3 (I,K,J,3)
               if(k>3.and.vit(i,j,k)>0.5) then			               if(k>3.and.vit(i,j,k)>0.5) then
               if(pt(i,j,k,1)>2800.0.or.pt(i,j,k,1)<1500.0) t	               if(pt(i,j,k,1)>2800.0.or.pt(i,j,k,1)<1500.0) t
               WKC1(i,j,k-1)=2*AHV+AHISOP*K3(I,K,J,3)		               WKC1(i,j,k-1)=2*AHV+AHISOP*K3(I,K,J,3)
               WKC1(i,j,k)=2*AHV+AHISOP*K3(I,K,J,3)		               WKC1(i,j,k)=2*AHV+AHISOP*K3(I,K,J,3)
              endif						              endif
              endif						              endif
!#ifdef CANUTO							!#ifdef CANUTO
!               WKC1(I,J,K)  = AKT(I,J,K,2)+AHISOP*K3(I,K,J,3	!               WKC1(I,J,K)  = AKT(I,J,K,2)+AHISOP*K3(I,K,J,3
!#endif								!#endif
!               WKC1 (I,J,K) = AHV(i,j,k) + AHISOP * K3 (I,K,	!               WKC1 (I,J,K) = AHV(i,j,k) + AHISOP * K3 (I,K,
#else								#else
               WKC1 (I,J,K) = AHV				               WKC1 (I,J,K) = AHV
!               WKC1 (I,J,K) = AHV(i,j,k)			!               WKC1 (I,J,K) = AHV(i,j,k)
#endif								#endif
            END DO						            END DO
         END DO							         END DO
      END DO							      END DO
 								 
 								 
!     AT LOW LATITUDE, DIFFUSION DEPENDs ON RICHARDSON NUMBER	!     AT LOW LATITUDE, DIFFUSION DEPENDs ON RICHARDSON NUMBER
 								 
!$OMP PARALLEL DO PRIVATE (K,J,I,ABC,ALF)			!$OMP PARALLEL DO PRIVATE (K,J,I,ABC,ALF)
      DO K = 1,KMM1						      DO K = 1,KMM1
      do j=  jsm,jem						      do j=  jsm,jem
#ifdef SPMD							#ifdef SPMD
         if (j_global(j)>=rtst.and.j_global(j)<=rtend) then	         if (j_global(j)>=rtst.and.j_global(j)<=rtend) then
#else								#else
         if (j>=rtst.and.j<=rtend) then				         if (j>=rtst.and.j<=rtend) then
#endif								#endif
            DO I = 1,IMT					            DO I = 1,IMT
               IF (rit (i,j,k) < 0.0) THEN			               IF (rit (i,j,k) < 0.0) THEN
                  ABC = diff_cbt_limit				                  ABC = diff_cbt_limit
               ELSE						               ELSE
                  ALF = 1.0/ (1.0+5.0* rit (i,j,k)* RNCC)	                  ALF = 1.0/ (1.0+5.0* rit (i,j,k)* RNCC)
                  ABC = fricmx * ALF **3+ diff_cbt_back		                  ABC = fricmx * ALF **3+ diff_cbt_back
               END IF						               END IF
               IF (k == 1.AND.ABC < wndmix) ABC = wndmix	               IF (k == 1.AND.ABC < wndmix) ABC = wndmix
#if (defined ISO)						#if (defined ISO)
               WKC1 (I,J,K) = ABC + AHISOP * K3 (I,K,J,3)	               WKC1 (I,J,K) = ABC + AHISOP * K3 (I,K,J,3)
#else								#else
               WKC1 (I,J,K) = ABC				               WKC1 (I,J,K) = ABC
#endif								#endif
            END DO						            END DO
         end if							         end if
      end do							      end do
      end do							      end do
!test								!test
!       wkc1(:,:,:)=0.0						!       wkc1(:,:,:)=0.0
!-----------------------------------------------------------	!-----------------------------------------------------------
!     prepration of the calculation of biosource		!     prepration of the calculation of biosource
!     calculate A0_b, A1_b, A2_b, B0_b, B1_b, B2_b and C_b	!     calculate A0_b, A1_b, A2_b, B0_b, B1_b, B2_b and C_b
!     and delta_a(km), kappa_a(km)				!     and delta_a(km), kappa_a(km)
!------------------------------------------------------------	!------------------------------------------------------------
#ifdef carbonBio						#ifdef carbonBio
#ifdef printcall						#ifdef printcall
#ifdef SPMD							#ifdef SPMD
            print*,"call readybio in ptracer, mytid=",mytid	            print*,"call readybio in ptracer, mytid=",mytid
#else								#else
            print*,"call readybio in ptracer"			            print*,"call readybio in ptracer"
#endif								#endif
#endif								#endif
!----------------------------------           			!----------------------------------           
            CALL READYBIO(C2DTTS)				            CALL READYBIO(C2DTTS)
!----------------------------------				!----------------------------------
#endif								#endif

!------------------------------------------------------------	!------------------------------------------------------------
!     SOLVE FOR ONE PASSIVE TRACER AT A TIME			!     SOLVE FOR ONE PASSIVE TRACER AT A TIME
!------------------------------------------------------------	!------------------------------------------------------------
!     NPTRA = 1 => carbon or C14, 2 => PO4, 3 => LDOC, 4 => T	!     NPTRA = 1 => carbon or C14, 2 => PO4, 3 => LDOC, 4 => T
 								 
      DO NP = 1,NPTRA						      DO NP = 1,NPTRA
!								!
!lyc 2011.02.15							!lyc 2011.02.15
!to deal with the DIC and TA before the calculation of the ad	!to deal with the DIC and TA before the calculation of the ad
!------------------------------------------------------------	!------------------------------------------------------------
!     COMPUTE THE ADVECTIVE TERM : ZONAL COMPONENT AND MERIDI	!     COMPUTE THE ADVECTIVE TERM : ZONAL COMPONENT AND MERIDI
!11111111111111----------------------------------------------	!11111111111111----------------------------------------------
#if (defined mom_xu_pt)						#if (defined mom_xu_pt)
!-----------------------------------				!-----------------------------------
                 upsh=0.8					                 upsh=0.8
!------------------------------------------------------------	!------------------------------------------------------------
!$OMP PARALLEL DO PRIVATE (K,J,I,adv_x,adv_x1,adv_x2,adv_y,ad	!$OMP PARALLEL DO PRIVATE (K,J,I,adv_x,adv_x1,adv_x2,adv_y,ad
         DO K = 2,km-1						         DO K = 2,km-1
            DO J = JSM,JEM					            DO J = JSM,JEM
               DO I = 2,IMM					               DO I = 2,IMM
                  adv_x1=utl1(i,j,k)*(PT (I  ,J,K,NP) + PT (I	                  adv_x1=utl1(i,j,k)*(PT (I  ,J,K,NP) + PT (I
                       +upsh*abs(utl1(i,j,k))*(PT(I-1,J,K,NP)	                       +upsh*abs(utl1(i,j,k))*(PT(I-1,J,K,NP)
                  adv_x2=utl1(i+1,j,k)*(PT (I+1,J,K,NP) + PT 	                  adv_x2=utl1(i+1,j,k)*(PT (I+1,J,K,NP) + PT 
                       +upsh*abs(utl1(i+1,j,k))*(PT(I,J,K,NP)	                       +upsh*abs(utl1(i+1,j,k))*(PT(I,J,K,NP)
                  adv_x = - (adv_x2-adv_x1)			                  adv_x = - (adv_x2-adv_x1)
                  adv_y=-(WKD1(I,J,K)*(PT(I,J+1,K,NP)+PT(I,J,	                  adv_y=-(WKD1(I,J,K)*(PT(I,J+1,K,NP)+PT(I,J,
                      +upsh*abs(wkd1(i,j,k))*(PT(I,J,K,NP)-PT	                      +upsh*abs(wkd1(i,j,k))*(PT(I,J,K,NP)-PT
                      -WKB1(I,J,K)*(PT(I,J,K,NP)+PT(I,J-1,K,N	                      -WKB1(I,J,K)*(PT(I,J,K,NP)+PT(I,J-1,K,N
                      -upsh*abs(wkb1(i,j,k))*(PT(I,J-1,K,NP)-	                      -upsh*abs(wkb1(i,j,k))*(PT(I,J-1,K,NP)-
                  wt1= WST(I,J,K)*(PT(I,J,K-1,NP)+PT(I,J,K,NP	                  wt1= WST(I,J,K)*(PT(I,J,K-1,NP)+PT(I,J,K,NP
                      +upsh*abs(wst(i,j,k))*(PT(I,J,K,NP)-PT(	                      +upsh*abs(wst(i,j,k))*(PT(I,J,K,NP)-PT(
                  wt2= WST(I,J,K+1)*(PT(I,J,K,NP)+PT(I,J,K+1,	                  wt2= WST(I,J,K+1)*(PT(I,J,K,NP)+PT(I,J,K+1,
                     +upsh*abs(wst(i,j,k+1))*(PT(I,J,K+1,NP)-	                     +upsh*abs(wst(i,j,k+1))*(PT(I,J,K+1,NP)-
                  adv_z=-0.5*(wt1-wt2)*ODZP(K)			                  adv_z=-0.5*(wt1-wt2)*ODZP(K)
                  TF1(I,J,K)= adv_x+adv_y+adv_z			                  TF1(I,J,K)= adv_x+adv_y+adv_z
                 if(isnan(tf1(i,j,k))) print *,'tf1 is error:	                 if(isnan(tf1(i,j,k))) print *,'tf1 is error:
               END DO						               END DO
            END DO						            END DO
         END DO							         END DO
!--------------------------------surface level--------------	!--------------------------------surface level--------------
!$OMP PARALLEL DO PRIVATE (J,I,adv_x,adv_x1,adv_x2,adv_y,adv_	!$OMP PARALLEL DO PRIVATE (J,I,adv_x,adv_x1,adv_x2,adv_y,adv_
        DO J=JSM,JEM						        DO J=JSM,JEM
           DO I = 2,IMM						           DO I = 2,IMM
              adv_x1=(PT (I,J,1,NP) + PT (I-1,J,1,NP))* UTL1 	              adv_x1=(PT (I,J,1,NP) + PT (I-1,J,1,NP))* UTL1 
                   +upsh*abs(utl1(i,j,1))*(PT(I-1,J,1,NP)-PT(	                   +upsh*abs(utl1(i,j,1))*(PT(I-1,J,1,NP)-PT(
              adv_x2=(PT (I+1,J,1,NP) + PT (I,J,1,NP))* UTL1 	              adv_x2=(PT (I+1,J,1,NP) + PT (I,J,1,NP))* UTL1 
                   +upsh*abs(utl1(i+1,j,1))*(PT(I,J,1,NP)-PT(	                   +upsh*abs(utl1(i+1,j,1))*(PT(I,J,1,NP)-PT(
              adv_x = - (adv_x2-adv_x1)				              adv_x = - (adv_x2-adv_x1)
              adv_y=-(WKD1(I,J,1)*(PT(I,J+1,1,NP)+PT(I,J,1,NP	              adv_y=-(WKD1(I,J,1)*(PT(I,J+1,1,NP)+PT(I,J,1,NP
                    +upsh*abs(wkd1(i,j,1))*(PT(I,J,1,NP)-PT(I	                    +upsh*abs(wkd1(i,j,1))*(PT(I,J,1,NP)-PT(I
                   -WKB1(I,J,1)*(PT(I,J,1,NP)+PT(I,J-1,1,NP))	                   -WKB1(I,J,1)*(PT(I,J,1,NP)+PT(I,J-1,1,NP))
                   -upsh*abs(wkb1(i,j,1))*(PT(I,J-1,1,NP)-PT(	                   -upsh*abs(wkb1(i,j,1))*(PT(I,J-1,1,NP)-PT(
              adv_z= 0.5*WST(I,J,2)*(PT(I,J,1,NP)+PT(I,J,2,NP	              adv_z= 0.5*WST(I,J,2)*(PT(I,J,1,NP)+PT(I,J,2,NP
                   +0.5*upsh*abs(wst(i,j,2))*(PT(I,J,2,NP)-PT	                   +0.5*upsh*abs(wst(i,j,2))*(PT(I,J,2,NP)-PT
             TF1 (I,J,1)= adv_x+adv_y+adv_z			             TF1 (I,J,1)= adv_x+adv_y+adv_z
                 if(isnan(tf1(i,j,1))) print *,'tf1at k=1 is 	                 if(isnan(tf1(i,j,1))) print *,'tf1at k=1 is 
           END DO						           END DO
        END DO							        END DO
!------------- --------bottom level---------			!------------- --------bottom level---------
!$OMP PARALLEL DO PRIVATE (J,I,adv_x,adv_x1,adv_x2,adv_y,adv_	!$OMP PARALLEL DO PRIVATE (J,I,adv_x,adv_x1,adv_x2,adv_y,adv_
        DO J=JSM,JEM						        DO J=JSM,JEM
           DO I = 2,IMM						           DO I = 2,IMM
              adv_x1=(PT (I  ,J,KM,NP) + PT (I-1,J,KM,NP))* U	              adv_x1=(PT (I  ,J,KM,NP) + PT (I-1,J,KM,NP))* U
                   +upsh*abs(utl1(i,j,km))*(PT(I-1,J,KM,NP)-P	                   +upsh*abs(utl1(i,j,km))*(PT(I-1,J,KM,NP)-P
              adv_x2=(PT (I+1,J,km,NP) + PT (I,J,km,NP))* UTL	              adv_x2=(PT (I+1,J,km,NP) + PT (I,J,km,NP))* UTL
                  +upsh*abs(utl1(i+1,j,km))*(PT(i,j,KM,NP)-PT	                  +upsh*abs(utl1(i+1,j,km))*(PT(i,j,KM,NP)-PT
              adv_x = - (adv_x2-adv_x1)				              adv_x = - (adv_x2-adv_x1)
              adv_y=-(WKD1(I,J,km)*(PT(I,J+1,KM,NP)+PT(I,J,KM	              adv_y=-(WKD1(I,J,km)*(PT(I,J+1,KM,NP)+PT(I,J,KM
                     +upsh*abs(wkd1(i,j,km))*(PT(I,J,KM,NP)-P	                     +upsh*abs(wkd1(i,j,km))*(PT(I,J,KM,NP)-P
                    -WKB1(I,J,km)*(PT(I,J,KM,NP)+PT(I,J-1,KM,	                    -WKB1(I,J,km)*(PT(I,J,KM,NP)+PT(I,J-1,KM,
                 -upsh*abs(wkb1(i,j,km))*(PT(I,J-1,KM,NP)-PT(	                 -upsh*abs(wkb1(i,j,km))*(PT(I,J-1,KM,NP)-PT(
              adv_z= -0.5*WST(I,J,km)*(PT(I,J,KM-1,NP)+PT(I,J	              adv_z= -0.5*WST(I,J,km)*(PT(I,J,KM-1,NP)+PT(I,J
                   -0.5*upsh*abs(wst(i,j,km))*(PT(I,J,KM,NP)-	                   -0.5*upsh*abs(wst(i,j,km))*(PT(I,J,KM,NP)-
              TF1 (I,J,km)= adv_x+adv_y+adv_z			              TF1 (I,J,km)= adv_x+adv_y+adv_z
           END DO						           END DO
        END DO							        END DO
!1111111111111111--------------------------------------------	!1111111111111111--------------------------------------------
! original calculation method					! original calculation method
!								!
#else								#else
!$OMP PARALLEL DO PRIVATE (K,J,I,adv_x,adv_x1,adv_x2,adv_y,ad	!$OMP PARALLEL DO PRIVATE (K,J,I,adv_x,adv_x1,adv_x2,adv_y,ad
         DO K = 2,KM-1						         DO K = 2,KM-1
            DO J = JSM,JEM					            DO J = JSM,JEM
               DO I = 2,IMM					               DO I = 2,IMM
!lyc           							!lyc           
                  adv_x1=(PT (I  ,J,K,NP) - PT (I-1,J,K,NP))*	                  adv_x1=(PT (I  ,J,K,NP) - PT (I-1,J,K,NP))*
                  adv_x2=(PT (I+1,J,K,NP) - PT (I,J,K,NP))* U	                  adv_x2=(PT (I+1,J,K,NP) - PT (I,J,K,NP))* U
                  adv_x = - (adv_x2+adv_x1)			                  adv_x = - (adv_x2+adv_x1)
                  adv_y=-(WKD1(I,J,K)*(PT(I,J+1,K,NP)-PT(I,J,	                  adv_y=-(WKD1(I,J,K)*(PT(I,J+1,K,NP)-PT(I,J,
                  wt1= WST(I,J,K)*(PT(I,J,K-1,NP)-PT(I,J,K,NP	                  wt1= WST(I,J,K)*(PT(I,J,K-1,NP)-PT(I,J,K,NP
                  wt2= WST(I,J,K+1)*(PT(I,J,K,NP)-PT(I,J,K+1,	                  wt2= WST(I,J,K+1)*(PT(I,J,K,NP)-PT(I,J,K+1,
                  adv_z=-0.5*(wt1+wt2)*ODZP(K)			                  adv_z=-0.5*(wt1+wt2)*ODZP(K)
                  TF1 (I,J,K)= adv_x+adv_y+adv_z		                  TF1 (I,J,K)= adv_x+adv_y+adv_z
               END DO						               END DO
            END DO						            END DO
         END DO							         END DO
!$OMP PARALLEL DO PRIVATE (J,I,adv_x,adv_x1,adv_x2,adv_y,adv_	!$OMP PARALLEL DO PRIVATE (J,I,adv_x,adv_x1,adv_x2,adv_y,adv_
        DO J=JSM,JEM						        DO J=JSM,JEM
           DO I = 2,IMM						           DO I = 2,IMM
!lyc								!lyc
              adv_x1=(PT (I,J,1,NP) - PT (I-1,J,1,NP))* UTL1 	              adv_x1=(PT (I,J,1,NP) - PT (I-1,J,1,NP))* UTL1 
              adv_x2=(PT (I+1,J,1,NP) - PT (I,J,1,NP))* UTL1 	              adv_x2=(PT (I+1,J,1,NP) - PT (I,J,1,NP))* UTL1 
              adv_x = - (adv_x2+adv_x1)				              adv_x = - (adv_x2+adv_x1)
              adv_y=-(WKD1(I,J,1)*(PT(I,J+1,1,NP)-PT(I,J,1,NP	              adv_y=-(WKD1(I,J,1)*(PT(I,J+1,1,NP)-PT(I,J,1,NP
              adv_z= -0.5*WST(I,J,2)*(PT(I,J,1,NP)-PT(I,J,2,N	              adv_z= -0.5*WST(I,J,2)*(PT(I,J,1,NP)-PT(I,J,2,N
              TF1 (I,J,1)= adv_x+adv_y+adv_z			              TF1 (I,J,1)= adv_x+adv_y+adv_z
                 if(isnan(tf1(i,j,1))) then			                 if(isnan(tf1(i,j,1))) then
                 print *,'tf1 before isoflux is error:i,j,k,n	                 print *,'tf1 before isoflux is error:i,j,k,n
                 stop						                 stop
                 endif						                 endif
           END DO						           END DO
        END DO							        END DO
!$OMP PARALLEL DO PRIVATE (J,I,adv_x,adv_x1,adv_x2,adv_y,adv_	!$OMP PARALLEL DO PRIVATE (J,I,adv_x,adv_x1,adv_x2,adv_y,adv_
        DO J=JSM,JEM						        DO J=JSM,JEM
           DO I = 2,IMM						           DO I = 2,IMM
!lyc	      							!lyc	      
              adv_x1=(PT (I  ,J,km,NP) - PT (I-1,J,km,NP))* U	              adv_x1=(PT (I  ,J,km,NP) - PT (I-1,J,km,NP))* U
              adv_x2=(PT (I+1,J,km,NP) - PT (I,J,km,NP))* UTL	              adv_x2=(PT (I+1,J,km,NP) - PT (I,J,km,NP))* UTL
              adv_x = - (adv_x2+adv_x1)				              adv_x = - (adv_x2+adv_x1)
              adv_y=-(WKD1(I,J,km)*(PT(I,J+1,km,NP)-PT(I,J,km	              adv_y=-(WKD1(I,J,km)*(PT(I,J+1,km,NP)-PT(I,J,km
              adv_z= -0.5*WST(I,J,km)*(PT(I,J,km-1,NP)-PT(I,J	              adv_z= -0.5*WST(I,J,km)*(PT(I,J,km-1,NP)-PT(I,J
              TF1 (I,J,km)= adv_x+adv_y+adv_z			              TF1 (I,J,km)= adv_x+adv_y+adv_z
           END DO						           END DO
        END DO							        END DO
!1111111111-----------------------------------			!1111111111-----------------------------------
#endif								#endif
!-----------------						!-----------------
!lyc 2011.02.15							!lyc 2011.02.15
!								!
!------------------------------------------------------------	!------------------------------------------------------------
!     COMPUTE THE ISOPYCNAL/DIPYCNAL MIXING			!     COMPUTE THE ISOPYCNAL/DIPYCNAL MIXING
!------------------------------------------------------------	!------------------------------------------------------------
!     XZ AND YZ ISOPYCNAL DIFFUSIVE FLUX ARE SOLVED EXPLICITL	!     XZ AND YZ ISOPYCNAL DIFFUSIVE FLUX ARE SOLVED EXPLICITL
!     WHILE ZZ COMPONENT WILL BE SOLVED IMPLICITLY.		!     WHILE ZZ COMPONENT WILL BE SOLVED IMPLICITLY.
 								 
!iso2222---------------------------------------- 		!iso2222---------------------------------------- 
!								!
#if (defined ISO)						#if (defined ISO)
!     Calculate XZ and YZ					!     Calculate XZ and YZ
                   test=0.0					                   test=0.0
!---------------------------------------------------		!---------------------------------------------------
                  CALL ISOFLUX_PT (TEST,NP)			                  CALL ISOFLUX_PT (TEST,NP)
!------------------------------------------------------------	!------------------------------------------------------------
!  if(mytid==0.and.n==2) print *, 'po4 isoflux term',tf1(40,3	!  if(mytid==0.and.n==2) print *, 'po4 isoflux term',tf1(40,3
!  if(mytid==0.and.n==3) print *, 'ldoc isoflux term',tf1(40,	!  if(mytid==0.and.n==3) print *, 'ldoc isoflux term',tf1(40,
!   do k=1,km							!   do k=1,km
!       do j=jsm,jem						!       do j=jsm,jem
!        do i=2,imm						!        do i=2,imm
!	    if(mytid==0.and.n==3)deltapo4(i,j,k)=tf1(i,j,k)-t	!	    if(mytid==0.and.n==3)deltapo4(i,j,k)=tf1(i,j,k)-t
!  if(mytid==0.and.n==3.and.deltapo4(i,j,k)<-0.0001.and.vit(i	!  if(mytid==0.and.n==3.and.deltapo4(i,j,k)<-0.0001.and.vit(i
!      'ldoc error in mixing term,delta',i,j,k,deltapo4(i,j,k	!      'ldoc error in mixing term,delta',i,j,k,deltapo4(i,j,k
!        enddo							!        enddo
!       enddo							!       enddo
!   enddo							!   enddo
!iso2222-------------------					!iso2222-------------------
               do k=1,km					               do k=1,km
                  do j=2,jem					                  do j=2,jem
                   do i=2,imm					                   do i=2,imm
                 if(isnan(tf1(i,j,k))) print *,'tf1 before is	                 if(isnan(tf1(i,j,k))) print *,'tf1 before is
                 if(isnan(test(i,j,k))) print *,'tf1 after is	                 if(isnan(test(i,j,k))) print *,'tf1 after is
                  enddo						                  enddo
                 enddo						                 enddo
                enddo						                enddo
!								!
              tf1=tf1+test					              tf1=tf1+test
#else								#else
 								 
#if ( defined SMAG)						#if ( defined SMAG)
!     Calculate AH3 						!     Calculate AH3 
!-------------------------------------				!-------------------------------------
              CALL SMAG3					              CALL SMAG3
!------------------------------------- 				!------------------------------------- 
!$OMP PARALLEL DO PRIVATE (K,J,WKI)				!$OMP PARALLEL DO PRIVATE (K,J,WKI)
         DO K = 1,KM						         DO K = 1,KM
            DO J = JSM,JEM					            DO J = JSM,JEM
               WKI (1)= 0.0					               WKI (1)= 0.0
               DO I = 2,IMT					               DO I = 2,IMT
                  WKI (I) = 0.5* (AH3 (I,J,K) + AH3 (I -1,J,K	                  WKI (I) = 0.5* (AH3 (I,J,K) + AH3 (I -1,J,K
                           I,J,K,NP) - PTB (I -1, &		                           I,J,K,NP) - PTB (I -1, &
                  J,K,NP))* VIT (I,J,K)* VIT (I -1,J,K)		                  J,K,NP))* VIT (I,J,K)* VIT (I -1,J,K)
               END DO						               END DO
               DO I = 2,IMM					               DO I = 2,IMM
                  TF1 (I,J,K) = TF1 (I,J,K) + SOTX (J)*(WKI(I	                  TF1 (I,J,K) = TF1 (I,J,K) + SOTX (J)*(WKI(I
               END DO						               END DO
            END DO						            END DO
         END DO							         END DO
 								 
 								 
!$OMP PARALLEL DO PRIVATE (K,J,I)				!$OMP PARALLEL DO PRIVATE (K,J,I)
         DO K = 1,KM						         DO K = 1,KM
         DO J = JSM,JEM						         DO J = JSM,JEM
         DO I = 2,IMM						         DO I = 2,IMM
            wt1= 0.5*(AH3(I,J,K)+AH3(I,J-1,K))*(PTB(I,J,K,NP)	            wt1= 0.5*(AH3(I,J,K)+AH3(I,J-1,K))*(PTB(I,J,K,NP)
            wt2= 0.5*(AH3(I,J+1,K)+AH3(I,J,K))*(PTB(I,J+1,K,N	            wt2= 0.5*(AH3(I,J+1,K)+AH3(I,J,K))*(PTB(I,J+1,K,N
            TF1 (I,J,K) = TF1 (I,J,K) + (R2D (J)* wt2 - R2C(J	            TF1 (I,J,K) = TF1 (I,J,K) + (R2D (J)* wt2 - R2C(J
         END DO							         END DO
         END DO							         END DO
         END DO							         END DO
 								 
#else								#else
 								 
!------------------------------------------------------------	!------------------------------------------------------------
!     COMPUTE THE EDDY-DIFFUSION TERM :  ZONAL COMPONENT	!     COMPUTE THE EDDY-DIFFUSION TERM :  ZONAL COMPONENT
!------------------------------------------------------------	!------------------------------------------------------------
 								 
#if (defined BIHAR)						#if (defined BIHAR)
!$OMP PARALLEL DO PRIVATE (K,J,I)				!$OMP PARALLEL DO PRIVATE (K,J,I)
         DO K = 1,KM						         DO K = 1,KM
            DO J = 1,JMT					            DO J = 1,JMT
               DO I = 1,JMT					               DO I = 1,JMT
                  WKD1 (I,J,K) = 0.0				                  WKD1 (I,J,K) = 0.0
               END DO						               END DO
            END DO						            END DO
         END DO							         END DO
 								 
!$OMP PARALLEL DO PRIVATE (K,J,WKI)				!$OMP PARALLEL DO PRIVATE (K,J,WKI)
         DO K = 1,KM						         DO K = 1,KM
            DO J = JSM,JEM					            DO J = JSM,JEM
               WKI (1)= 0.0					               WKI (1)= 0.0
               DO I = 2,IMT					               DO I = 2,IMT
                  WKI (I) = (PTB (I,J,K,NP) - PTB (I -1,J,K,N	                  WKI (I) = (PTB (I,J,K,NP) - PTB (I -1,J,K,N
                           J,K)* VIT (I -1,J,K)			                           J,K)* VIT (I -1,J,K)
               END DO						               END DO
 								 
               DO I = 2,IMM					               DO I = 2,IMM
                  WKD1 (I,J,K) = AH3 (I,J,K)* SOTX (J)* (WKI 	                  WKD1 (I,J,K) = AH3 (I,J,K)* SOTX (J)* (WKI 
               END DO						               END DO
               							               
               IF(NX_PROC==1) THEN 				               IF(NX_PROC==1) THEN 
               WKD1 (1,J,K)= WKD1 (IMM,J,K)			               WKD1 (1,J,K)= WKD1 (IMM,J,K)
               WKD1 (IMT,J,K)= WKD1 (2,J,K)			               WKD1 (IMT,J,K)= WKD1 (2,J,K)
               ENDIF						               ENDIF
            END DO						            END DO
         END DO							         END DO
#ifdef SPMD							#ifdef SPMD
       call exch_boundary(wkd1(1,1,1),km)			       call exch_boundary(wkd1(1,1,1),km)
#endif								#endif
 								 
!$OMP PARALLEL DO PRIVATE (K,J,WKI)				!$OMP PARALLEL DO PRIVATE (K,J,WKI)
         DO K = 1,KM						         DO K = 1,KM
            DO J = JSM,JEM					            DO J = JSM,JEM
               WKI (1)= 0.0					               WKI (1)= 0.0
               DO I = 2,IMT					               DO I = 2,IMT
                  WKI (I) = (WKD1 (I,J,K) - WKD1 (I -1,J,K))*	                  WKI (I) = (WKD1 (I,J,K) - WKD1 (I -1,J,K))*
                           * VIT (I -1,J,K)			                           * VIT (I -1,J,K)
               END DO						               END DO
               DO I = 2,IMM					               DO I = 2,IMM
                  TF1 (I,J,K) = TF1 (I,J,K) + SOTX (J)* (WKI 	                  TF1 (I,J,K) = TF1 (I,J,K) + SOTX (J)* (WKI 
               END DO						               END DO
            END DO						            END DO
         END DO							         END DO
 								 
#else								#else
! default diffusion (ZONAL COMPONENT)				! default diffusion (ZONAL COMPONENT)
!$OMP PARALLEL DO PRIVATE (K,J,WKI)				!$OMP PARALLEL DO PRIVATE (K,J,WKI)
         DO K = 1,KM						         DO K = 1,KM
            DO J = JSM,JEM					            DO J = JSM,JEM
               WKI (1)= 0.0					               WKI (1)= 0.0
               DO I = 2,IMT					               DO I = 2,IMT
                  WKI (I) = (PTB (I,J,K,NP) - PTB (I -1,J,K,N	                  WKI (I) = (PTB (I,J,K,NP) - PTB (I -1,J,K,N
                           J,K)* VIT (I -1,J,K)			                           J,K)* VIT (I -1,J,K)
               END DO						               END DO
               DO I = 2,IMM					               DO I = 2,IMM
                  TF1 (I,J,K) = TF1 (I,J,K) + AH3 (I,J,K)* SO	                  TF1 (I,J,K) = TF1 (I,J,K) + AH3 (I,J,K)* SO
                              WKI (I +1) - WKI (I))		                              WKI (I +1) - WKI (I))
               END DO						               END DO
            END DO						            END DO
         END DO							         END DO
 								 
#endif								#endif
 								 
!------------------------------------------------------------	!------------------------------------------------------------
!     COMPUTE THE EDDY-DIFFUSION TERM :  MERIDIONAL COMPONENT	!     COMPUTE THE EDDY-DIFFUSION TERM :  MERIDIONAL COMPONENT
!------------------------------------------------------------	!------------------------------------------------------------
 								 
#if (defined BIHAR)						#if (defined BIHAR)
!$OMP PARALLEL DO PRIVATE (K,J,I)				!$OMP PARALLEL DO PRIVATE (K,J,I)
         DO K = 1,KM						         DO K = 1,KM
            DO J = 1,JMT					            DO J = 1,JMT
               DO I = 1,JMT					               DO I = 1,JMT
                  WKD1 (I,J,K) = 0.0				                  WKD1 (I,J,K) = 0.0
               END DO						               END DO
            END DO						            END DO
         END DO							         END DO
 								 
!$OMP PARALLEL DO PRIVATE (K,J,I)				!$OMP PARALLEL DO PRIVATE (K,J,I)
         DO K = 1,KM						         DO K = 1,KM
            DO J = JSM,JEM					            DO J = JSM,JEM
               DO I = 2,IMM					               DO I = 2,IMM
                  wt1= (PTB (I,J,K,NP)- PTB(I,J-1,K,NP))*VIT(	                  wt1= (PTB (I,J,K,NP)- PTB(I,J-1,K,NP))*VIT(
                  wt2= (PTB (I,J+1,K,NP)- PTB(I,J,K,NP))*VIT(	                  wt2= (PTB (I,J+1,K,NP)- PTB(I,J,K,NP))*VIT(
                  wkd1 (I,J,K) = ah3(i,j,k)*(R2D (J)* wt2 - R	                  wkd1 (I,J,K) = ah3(i,j,k)*(R2D (J)* wt2 - R
               END DO						               END DO
            END DO						            END DO
         END DO							         END DO

        IF(NX_PROC==1)THEN 					        IF(NX_PROC==1)THEN 
            DO J = JSM,JEM					            DO J = JSM,JEM
!---xu  likely typing mistakes----------			!---xu  likely typing mistakes----------
!               WKD1 (1,J,K)= WKD1 (JMM,J,K)			!               WKD1 (1,J,K)= WKD1 (JMM,J,K)
!               WKD1 (JMT,J,K)= WKD1 (2,J,K)			!               WKD1 (JMT,J,K)= WKD1 (2,J,K)
!------------------------------------------			!------------------------------------------
               WKD1 (1,J,K)= WKD1 (iMM,J,K)			               WKD1 (1,J,K)= WKD1 (iMM,J,K)
               WKD1 (iMT,J,K)= WKD1 (2,J,K)			               WKD1 (iMT,J,K)= WKD1 (2,J,K)
            END DO						            END DO
!         END DO						!         END DO
         ENDIF							         ENDIF
#ifdef SPMD							#ifdef SPMD
!------------------------------------				!------------------------------------
         call exch_boundary(wkd1(1,1,1),km)			         call exch_boundary(wkd1(1,1,1),km)
!------------------------------------				!------------------------------------
#endif 								#endif 
!$OMP PARALLEL DO PRIVATE (K,J,I)				!$OMP PARALLEL DO PRIVATE (K,J,I)
         DO K = 1,KM						         DO K = 1,KM
         DO J = JSM,JEM						         DO J = JSM,JEM
         DO I = 2,IMM						         DO I = 2,IMM
            wt1= (WKD1 (I,J,K) - WKD1 (I,J -1,K))* VIT (I,J,K	            wt1= (WKD1 (I,J,K) - WKD1 (I,J -1,K))* VIT (I,J,K
            wt2= (WKD1 (I,J+1,K) - WKD1 (I,J ,K))* VIT (I,J,K	            wt2= (WKD1 (I,J+1,K) - WKD1 (I,J ,K))* VIT (I,J,K
            TF1 (I,J,K) = TF1 (I,J,K) + (R2D (J)* wt2 - R2C(J	            TF1 (I,J,K) = TF1 (I,J,K) + (R2D (J)* wt2 - R2C(J
         END DO							         END DO
         END DO							         END DO
         END DO							         END DO

#else								#else
!default difussion (MERIDIONAL COMPONENT)			!default difussion (MERIDIONAL COMPONENT)
!$OMP PARALLEL DO PRIVATE (K,J,I)				!$OMP PARALLEL DO PRIVATE (K,J,I)
         DO K = 1,KM						         DO K = 1,KM
         DO J = JSM,JEM						         DO J = JSM,JEM
         DO I = 2,IMM						         DO I = 2,IMM
            wt1= (PTB (I,J,K,NP) - PTB (I,J -1,K,NP))* VIT (I	            wt1= (PTB (I,J,K,NP) - PTB (I,J -1,K,NP))* VIT (I
            wt2= (PTB (I,J +1,K,NP) - PTB (I,J,K,NP))* VIT (I	            wt2= (PTB (I,J +1,K,NP) - PTB (I,J,K,NP))* VIT (I
            TF1 (I,J,K) = TF1 (I,J,K) + ah3(i,j,k)* (R2D (J)*	            TF1 (I,J,K) = TF1 (I,J,K) + ah3(i,j,k)* (R2D (J)*
         END DO							         END DO
         END DO							         END DO
         END DO							         END DO

#endif								#endif
#endif								#endif
!								!
!iso22222----------------------					!iso22222----------------------
#endif								#endif
!								!
!-------------------------------------------------		!-------------------------------------------------
!          VERTICAL COMPONENT					!          VERTICAL COMPONENT
!--------------------------------------------------		!--------------------------------------------------
 								 
!     EDDY-DIFFUSION						!     EDDY-DIFFUSION
 								 
        wt1=0							        wt1=0
!$OMP PARALLEL DO PRIVATE (K,J,I)				!$OMP PARALLEL DO PRIVATE (K,J,I)
        DO K=2,KM-1						        DO K=2,KM-1
           DO J=JSM,JEM						           DO J=JSM,JEM
           DO I=2,IMM						           DO I=2,IMM
              wt1= WKC1(I,J,K-1)*(PTB(I,J,K-1,NP)-PTB(I,J,K,N	              wt1= WKC1(I,J,K-1)*(PTB(I,J,K-1,NP)-PTB(I,J,K,N
              wt2= WKC1(I,J,K)*(PTB(I,J,K,NP)-PTB(I,J,K+1,NP)	              wt2= WKC1(I,J,K)*(PTB(I,J,K,NP)-PTB(I,J,K+1,NP)
              TF1 (I,J,K)= TF1 (I,J,K)+ODZP(K)*(wt1-wt2)*(1.0	              TF1 (I,J,K)= TF1 (I,J,K)+ODZP(K)*(wt1-wt2)*(1.0
                 if(isnan(tf1(i,j,k))) print *,'tf1 vertical 	                 if(isnan(tf1(i,j,k))) print *,'tf1 vertical 
           END DO						           END DO
           END DO						           END DO
        END DO							        END DO
!$OMP PARALLEL DO PRIVATE (J,I)					!$OMP PARALLEL DO PRIVATE (J,I)
       DO J = JSM,JEM						       DO J = JSM,JEM
       DO I = 2,IMM						       DO I = 2,IMM
           wt1= WKC1(I,J,1)*(PTB(I,J,1,NP)-PTB(I,J,2,NP))*ODZ	           wt1= WKC1(I,J,1)*(PTB(I,J,1,NP)-PTB(I,J,2,NP))*ODZ
           wt2= WKC1(I,J,km-1)*(PTB(I,J,km-1,NP)-PTB(I,J,km,N	           wt2= WKC1(I,J,km-1)*(PTB(I,J,km-1,NP)-PTB(I,J,km,N
           TF1(I,J,1)=TF1 (I,J,1)-ODZP(1)*wt1*(1.0-AIDIF)	           TF1(I,J,1)=TF1 (I,J,1)-ODZP(1)*wt1*(1.0-AIDIF)
           TF1(I,J,km)=TF1(I,J,km)+ODZP(km)*wt2*(1.0-AIDIF)	           TF1(I,J,km)=TF1(I,J,km)+ODZP(km)*wt2*(1.0-AIDIF)
       END DO							       END DO
       END DO							       END DO
!------------------------------------------			!------------------------------------------
!     SET SURFACE BOUNDARY CONDITION				!     SET SURFACE BOUNDARY CONDITION
!------------------------------------------			!------------------------------------------
!lyc								!lyc
         stf1(:,:)=0 						         stf1(:,:)=0 
         ssfc(:,:)=0.						         ssfc(:,:)=0.
!--------------------------------------				!--------------------------------------
         IF (NP == 1) THEN					         IF (NP == 1) THEN
!--------------------------------------				!--------------------------------------
! only give surface flux of DIC ,radiocarbon, CFC		! only give surface flux of DIC ,radiocarbon, CFC
#ifdef printcall						#ifdef printcall
#ifdef SPMD							#ifdef SPMD
            print*,"call flux_pt in ptracer, mytid=",mytid	            print*,"call flux_pt in ptracer, mytid=",mytid
#else								#else
            print*,"call flux_pt in ptracer"			            print*,"call flux_pt in ptracer"
#endif								#endif
#endif								#endif
!------------------------------           			!------------------------------           
            CALL FLUX_PT					            CALL FLUX_PT
!--------------------------------------				!--------------------------------------
#if (defined  carbonC14)||(defined cfc)				#if (defined  carbonC14)||(defined cfc)
!--------------------------					!--------------------------
            call flux_ot					            call flux_ot
!------------------------					!------------------------
#endif								#endif
!-------------------------------				!-------------------------------
            DO J = JSM,JEM					            DO J = JSM,JEM
               DO I = 2,IMM					               DO I = 2,IMM
                IF (ITNU (I,J) > 0) THEN			                IF (ITNU (I,J) > 0) THEN
#if (defined  carbonC14)||(defined cfc)				#if (defined  carbonC14)||(defined cfc)
!								!
                 STF1 (I,J) = ssfc (I,J)*dzp(1)			                 STF1 (I,J) = ssfc (I,J)*dzp(1)
#endif           						#endif           
!xu-- 								!xu-- 
!#if (defined carbonC) || (defined carbonBio)			!#if (defined carbonC) || (defined carbonBio)
#if (defined carbonC) || (defined carbonBio) ||(defined carbo	#if (defined carbonC) || (defined carbonBio) ||(defined carbo
!								!
                 STF1 (I,J) = ssfc (I,J) 			                 STF1 (I,J) = ssfc (I,J) 
#endif            						#endif            
                 TF1 (I,J,1) = TF1 (I,J,1) + STF1 (I,J)*ODZP(	                 TF1 (I,J,1) = TF1 (I,J,1) + STF1 (I,J)*ODZP(
                END IF						                END IF
               END DO						               END DO
            END DO						            END DO
        END IF							        END IF
#ifdef carbonBio						#ifdef carbonBio
    IF (NP==4) THEN						    IF (NP==4) THEN
        do j=1,jmt						        do j=1,jmt
	   do i=1,imt							   do i=1,imt
	     ssfc(i,j)=0.0						     ssfc(i,j)=0.0
	   enddo							   enddo
        enddo							        enddo
!-------------------------					!-------------------------
	  CALL FLUX_TA							  CALL FLUX_TA
!-------------------------					!-------------------------
          do j=2,jem						          do j=2,jem
            do i=2,imm						            do i=2,imm
              IF (ITNU (I,J) > 0) THEN				              IF (ITNU (I,J) > 0) THEN
                 stf1(i,j)= ssfc(i,j)				                 stf1(i,j)= ssfc(i,j)
                 TF1 (I,J,1) = TF1 (I,J,1) + STF1 (I,J)*ODZP(	                 TF1 (I,J,1) = TF1 (I,J,1) + STF1 (I,J)*ODZP(
              ENDIF						              ENDIF
            enddo						            enddo
          enddo							          enddo
      ENDIF							      ENDIF
!cm090330--------------------------				!cm090330--------------------------
! surface flux of o2        					! surface flux of o2        
         IF (NP == 5) THEN					         IF (NP == 5) THEN
	    ssfc(:,:)=0.						    ssfc(:,:)=0.
!-------------------------					!-------------------------
            CALL FLUX_o2					            CALL FLUX_o2
!-------------------------					!-------------------------
            DO J = JSM,JEM					            DO J = JSM,JEM
               DO I = 2,IMM					               DO I = 2,IMM
                IF (ITNU (I,J) > 0) THEN			                IF (ITNU (I,J) > 0) THEN
                    STF1 (I,J) = ssfc (I,J) 			                    STF1 (I,J) = ssfc (I,J) 
                    TF1 (I,J,1) = TF1 (I,J,1) + STF1 (I,J)*OD	                    TF1 (I,J,1) = TF1 (I,J,1) + STF1 (I,J)*OD
                END IF						                END IF
               END DO						               END DO
            END DO						            END DO
         END IF							         END IF
!cm090330----------------------					!cm090330----------------------
!------------------------------------------------------------	!------------------------------------------------------------
! for fe (lyc,2013,07)						! for fe (lyc,2013,07)
!------------------------------------------------------------	!------------------------------------------------------------
      IF(NP==6) THEN						      IF(NP==6) THEN
       DO J=JSM, JEM						       DO J=JSM, JEM
         DO I=2,IMM						         DO I=2,IMM
          IF(ITNU(I,J)>0) THEN					          IF(ITNU(I,J)>0) THEN
           STF1(I,J)=FE_F(I,J)					           STF1(I,J)=FE_F(I,J)
           TF1(I,J,1)=TF1(I,J,1)+STF1(I,J)*ODZP(1)*(1.0-AIDIF	           TF1(I,J,1)=TF1(I,J,1)+STF1(I,J)*ODZP(1)*(1.0-AIDIF
          ENDIF							          ENDIF
         ENDDO							         ENDDO
        ENDDO							        ENDDO
     ENDIF							     ENDIF
       								       
!								!
#endif								#endif
!lyc end							!lyc end
!************************************************************	!************************************************************
!     Calculate biological source of DIC, PO4, LDOC and TA (b	!     Calculate biological source of DIC, PO4, LDOC and TA (b
!------------------------------------------------------------	!------------------------------------------------------------
#ifdef carbonBio						#ifdef carbonBio
#ifdef printcall						#ifdef printcall
#ifdef SPMD							#ifdef SPMD
            print*,"call biosource in ptracer, idx=',N,'mytid	            print*,"call biosource in ptracer, idx=',N,'mytid
#else								#else
            print*,"call biosource in ptracer, idx=",N		            print*,"call biosource in ptracer, idx=",N
#endif								#endif
#endif           						#endif           
!---------------------------------------------			!---------------------------------------------
               CALL BIOSOURCE(TF1,NP)				               CALL BIOSOURCE(TF1,NP)
!--------------------------------------------			!--------------------------------------------
#endif								#endif
!								!
#ifdef carbonBio						#ifdef carbonBio
#ifdef carbonDebug						#ifdef carbonDebug
       do k=1,km						       do k=1,km
        do j=jsm,jem						        do j=jsm,jem
         do i=2,imm						         do i=2,imm
	     if(vit(i,j,k)<0.5) cycle					     if(vit(i,j,k)<0.5) cycle
             if(np==3.and.tf1(i,j,k) < -0.0001) then		             if(np==3.and.tf1(i,j,k) < -0.0001) then
               print*, 'lodc error! i,j,k,lodc:',i,j,k,j_glob	               print*, 'lodc error! i,j,k,lodc:',i,j,k,j_glob
	       print*, 'biosourc lodc!,i,j,k:', i,j,k,j_globa		       print*, 'biosourc lodc!,i,j,k:', i,j,k,j_globa
               print*,'lodcb!',i,j,k,j_global(j),ptb(i,j,k,3)	               print*,'lodcb!',i,j,k,j_global(j),ptb(i,j,k,3)
	       print*,'salinity',at(i,j,k,2)				       print*,'salinity',at(i,j,k,2)
	       print*,'tempreture',at(i,j,k,1)				       print*,'tempreture',at(i,j,k,1)
	       print*,'u,v',utf(i,j,k),vtf(i,j,k)			       print*,'u,v',utf(i,j,k),vtf(i,j,k)
	       print*,'ta',pt(i,j,k,4)					       print*,'ta',pt(i,j,k,4)
	       print*,'tc',pt(i,j,k,1)					       print*,'tc',pt(i,j,k,1)
	       print *,'error biosource!'				       print *,'error biosource!'
             endif						             endif
	 enddo								 enddo
	enddo								enddo
       enddo							       enddo
#endif  							#endif  
#endif       							#endif       
!------------------------------------------------------------	!------------------------------------------------------------
!     SOLVE FOR "TAU+1" PASSIVE TRACER AT CENTER OF "T" CELLS	!     SOLVE FOR "TAU+1" PASSIVE TRACER AT CENTER OF "T" CELLS
!------------------------------------------------------------	!------------------------------------------------------------
!lyc test           if(mytid==1.and.n==6) then			!lyc test           if(mytid==1.and.n==6) then
!            print*,'the source of fe', tf1(91,jmt/2,:)		!            print*,'the source of fe', tf1(91,jmt/2,:)
!           endif						!           endif
!$OMP PARALLEL DO PRIVATE (K,J,I)				!$OMP PARALLEL DO PRIVATE (K,J,I)
         DO K = 1,KM						         DO K = 1,KM
            DO J = JSM,JEM					            DO J = JSM,JEM
               DO I = 2,IMM					               DO I = 2,IMM
                  VTL1 (I,J,K) = PTB (I,J,K,NP) + C2DTTS * TF	                  VTL1 (I,J,K) = PTB (I,J,K,NP) + C2DTTS * TF
!								!
!cm080418----------for decay of carbonC14--------------------	!cm080418----------for decay of carbonC14--------------------
#ifdef preindustrial 						#ifdef preindustrial 
#ifdef carbonC14						#ifdef carbonC14
                  VTL1 (I,J,K) =VTL1 (I,J,K) - C2DTTS * rdca 	                  VTL1 (I,J,K) =VTL1 (I,J,K) - C2DTTS * rdca 
#endif								#endif
#endif								#endif
!cm080418----------for decay of carbonC14--------------------	!cm080418----------for decay of carbonC14--------------------

               END DO						               END DO
            END DO						            END DO
         END DO							         END DO
!								!
!    if(mytid==0.and.n==3) print*, 'lodc debug!',ptb(40,34,10	!    if(mytid==0.and.n==3) print*, 'lodc debug!',ptb(40,34,10
!lyc end							!lyc end
!								!
#ifdef carbonBio						#ifdef carbonBio
#ifdef carbonDebug					      |	!#ifdef carbonDebug
      do k=1,km						      |	      do k=1,km-1
        do j=jsm,jem						        do j=jsm,jem
          do i=2,imm						          do i=2,imm
            if(vit(i,j,k) < 0.5) cycle				            if(vit(i,j,k) < 0.5) cycle
            if(vtl1(i,j,k) < 1200.0) then		      |	            if(vtl1(i,j,k) < 1300.0) then
              if(np==1) print*, 'TC error! i,j,k,TC:',i_globa |	              if(np==1) print*, 'TC error! i,j,k,TC:',i_globa
              if(np==4) print*, 'TA error! i,j,k,TA:',i_globa	              if(np==4) print*, 'TA error! i,j,k,TA:',i_globa
            endif						            endif
	    if(vtl1(i,j,k) < -0.01) then		      |		    if(vtl1(i,j,k) < 0.0) then
              if(np==2) print*, 'PO4 error! i,j,k,PO4:',i_glo	              if(np==2) print*, 'PO4 error! i,j,k,PO4:',i_glo
              if(np==3) print*, 'LDOC error! i,j,k,LDOC:',i_g	              if(np==3) print*, 'LDOC error! i,j,k,LDOC:',i_g
            endif						            endif
          enddo							          enddo
        enddo							        enddo
      enddo							      enddo
#endif 							      |	!#endif 
#endif     							#endif     
!------------------------------------------------------------	!------------------------------------------------------------
!     ADD DT/DT COMPONENT DUE TO IMPLICIT VERTICAL DIFFUSION	!     ADD DT/DT COMPONENT DUE TO IMPLICIT VERTICAL DIFFUSION
!------------------------------------------------------------	!------------------------------------------------------------
 								 
#if (defined ISO)						#if (defined ISO)
!-------------------------------------------------		!-------------------------------------------------
         CALL INVTRI (VTL1,STF1,WKC1,AIDIF,C2DTTS)		         CALL INVTRI (VTL1,STF1,WKC1,AIDIF,C2DTTS)
!-------------------------------------------------		!-------------------------------------------------
#endif								#endif

!------------------------------------------------------------	!------------------------------------------------------------
!     SET CYCLIC CONDITIONS ON EASTERN AND WESTERN BOUNDARY	!     SET CYCLIC CONDITIONS ON EASTERN AND WESTERN BOUNDARY
!------------------------------------------------------------	!------------------------------------------------------------
!------------------------------------				!------------------------------------
!$OMP PARALLEL DO PRIVATE (K,J)					!$OMP PARALLEL DO PRIVATE (K,J)
         DO K = 1,KM						         DO K = 1,KM
            DO J = JSM,JEM					            DO J = JSM,JEM
               DO I = 2,IMM  !lyc2014.06			               DO I = 2,IMM  !lyc2014.06
                  VTL1 (I,J,K) = VTL1 (I,J,K)*VIT(I,J,K)	                  VTL1 (I,J,K) = VTL1 (I,J,K)*VIT(I,J,K)
               END DO						               END DO
            END DO						            END DO
         ENDDO							         ENDDO

!lyc 2014.06							!lyc 2014.06
        IF(NX_PROC==1) then					        IF(NX_PROC==1) then
           DO K = 1,KM						           DO K = 1,KM
            DO J = JSM,JEM					            DO J = JSM,JEM
!lyc set the cyclic conditions					!lyc set the cyclic conditions
             VTL1(1,J,K)=VTL1(IMM,J,K)				             VTL1(1,J,K)=VTL1(IMM,J,K)
	     VTL1(IMT,J,K)=VTL1(2,J,K)					     VTL1(IMT,J,K)=VTL1(2,J,K)
            ENDDO						            ENDDO
           ENDDO						           ENDDO
        ENDIF							        ENDIF
!   								!   
         do k=1,km						         do k=1,km
              do i=1,imt					              do i=1,imt
                 if(isnan(vtl1(i,1,k))) then			                 if(isnan(vtl1(i,1,k))) then
                  print *,'lyc test for the northest boundary	                  print *,'lyc test for the northest boundary
                endif						                endif
              enddo						              enddo
          enddo							          enddo
#ifdef SPMD							#ifdef SPMD
        call exch_boundary(vtl1(1,1,1),km)			        call exch_boundary(vtl1(1,1,1),km)
#endif								#endif
         do k=1,km						         do k=1,km
              do i=1,imt					              do i=1,imt
                 if(isnan(vtl1(i,1,k))) then			                 if(isnan(vtl1(i,1,k))) then
                  print *,'lyc test for the northest boundary	                  print *,'lyc test for the northest boundary
                  stop						                  stop
                endif						                endif
              enddo						              enddo
          enddo							          enddo
!   2003,8,2 changed by lrf for 1 X 1 model			!   2003,8,2 changed by lrf for 1 X 1 model
!								!
!        CALL SMTS (VTL,VIT,KM,50,70,294,331)			!        CALL SMTS (VTL,VIT,KM,50,70,294,331)
!								!
!-------------------------------------				!-------------------------------------
         call SMTS(VTL1,VIT,KM,fil_latp)			         call SMTS(VTL1,VIT,KM,fil_latp)
!---------------------------------				!---------------------------------
         do k=1,km						         do k=1,km
              do i=1,imt					              do i=1,imt
                 if(isnan(vtl1(i,1,k))) then			                 if(isnan(vtl1(i,1,k))) then
                  print *,'lyc test for the northest boundary	                  print *,'lyc test for the northest boundary
                 stop						                 stop
                endif						                endif
              enddo						              enddo
          enddo							          enddo

#ifdef carbonBio      						#ifdef carbonBio      
!								!
#ifdef carbonDebug						#ifdef carbonDebug
      do k=1,km							      do k=1,km
        do j=jsm,jem						        do j=jsm,jem
          do i=1,imt						          do i=1,imt
            if(vit(i,j,k) < 0.5) cycle				            if(vit(i,j,k) < 0.5) cycle
            if(np==1.or.np==4) then				            if(np==1.or.np==4) then
            if(vtl1(i,j,k) < 1700.0) vtl1(i,j,k)=1700.0 	            if(vtl1(i,j,k) < 1700.0) vtl1(i,j,k)=1700.0 
            if(vtl1(i,j,k) > 2500.0) vtl1(i,j,k)= 2500.0	            if(vtl1(i,j,k) > 2500.0) vtl1(i,j,k)= 2500.0
            endif						            endif
	    if (np==2.or.np==3) then					    if (np==2.or.np==3) then
            if(vtl1(i,j,k) < -1.0E-3)  vtl1(i,j,k)=0.001	            if(vtl1(i,j,k) < -1.0E-3)  vtl1(i,j,k)=0.001
            if(np==2.and.vtl1(i,j,k)>10.0) vtl1(i,j,k)=10.0	            if(np==2.and.vtl1(i,j,k)>10.0) vtl1(i,j,k)=10.0
            if(np==3.and.vtl1(i,j,k)>110.0) vtl1(i,j,k)=110.0	            if(np==3.and.vtl1(i,j,k)>110.0) vtl1(i,j,k)=110.0
            endif						            endif
          enddo							          enddo
        enddo							        enddo
      enddo							      enddo
       do k=1,km						       do k=1,km
        do j=jsm,jem						        do j=jsm,jem
          do i=1,imt						          do i=1,imt
            if(np==2.and.vtl1(i,j,1)>5.0) then			            if(np==2.and.vtl1(i,j,1)>5.0) then
             print *, i_global(i),j_global(j),k,vtl1(i,j,k),p	             print *, i_global(i),j_global(j),k,vtl1(i,j,k),p
	     stop							     stop
	    endif							    endif
	     enddo							     enddo
        enddo							        enddo
      enddo							      enddo
#endif 								#endif 
#endif								#endif
!------------------------------------------------------------	!------------------------------------------------------------
!     SOLVE FOR "TAU+1" TRACER AT CENTER OF "T" CELLS		!     SOLVE FOR "TAU+1" TRACER AT CENTER OF "T" CELLS
!------------------------------------------------------------	!------------------------------------------------------------
#ifdef SPMD							#ifdef SPMD
!----------------------------------				!----------------------------------
         CALL exch_boundary(vtl1(1,1,1),km)			         CALL exch_boundary(vtl1(1,1,1),km)
!----------------------------------				!----------------------------------
#endif								#endif
!								!
#ifdef buchang 							#ifdef buchang 
#if (defined carbonBio)||(defined carbonC)||(defined carbonC1	#if (defined carbonBio)||(defined carbonC)||(defined carbonC1
!------------------------------------------------------------	!------------------------------------------------------------
!lyc-------calculate the tc(n-1)+ssfc*c2dtts			!lyc-------calculate the tc(n-1)+ssfc*c2dtts
!-----------------------------------------------		!-----------------------------------------------
    if(np==1) then						    if(np==1) then
         tcsumb=0.0						         tcsumb=0.0
	 tctmpb=0.0							 tctmpb=0.0
	    do j=2,jem							    do j=2,jem
	      do i=2,imm						      do i=2,imm
		if(vit(i,j,1)<0.5) cycle					if(vit(i,j,1)<0.5) cycle
		tcsumb=tcsumb+stf1(i,j)*dxdyt(j)*dts				tcsumb=tcsumb+stf1(i,j)*dxdyt(j)*dts
	      enddo							      enddo
	    enddo							    enddo
#ifdef SPMD	    						#ifdef SPMD	    
	  call mpi_barrier(mpi_comm_ocn,ierr)				  call mpi_barrier(mpi_comm_ocn,ierr)
          call mpi_reduce(tcsumb,tctmpb,1,mpi_real8,mpi_sum,0	          call mpi_reduce(tcsumb,tctmpb,1,mpi_real8,mpi_sum,0
	  if(mytid==0) print *,' the sum of stf1',tctmpb		  if(mytid==0) print *,' the sum of stf1',tctmpb
#else								#else
	  print *,' the sum of stf1',tcsumb				  print *,' the sum of stf1',tcsumb
#endif								#endif
	  tctmpb=0.0							  tctmpb=0.0
	   do k=1,km							   do k=1,km
	    do j=2,jem							    do j=2,jem
	      do i=2,imm						      do i=2,imm
		if(vit(i,j,k)<0.5) cycle					if(vit(i,j,k)<0.5) cycle
		 tcsumb=tcsumb+pt(i,j,k,1)*dxdyt(j)*dzp(k)			 tcsumb=tcsumb+pt(i,j,k,1)*dxdyt(j)*dzp(k)
	      enddo							      enddo
	    enddo							    enddo
	   enddo							   enddo
#ifdef SPMD	   						#ifdef SPMD	   
	  call mpi_barrier(mpi_comm_ocn,ierr)				  call mpi_barrier(mpi_comm_ocn,ierr)
          call mpi_reduce(tcsumb,tctmpb,1,mpi_real8,mpi_sum,0	          call mpi_reduce(tcsumb,tctmpb,1,mpi_real8,mpi_sum,0
#else								#else
	  tctmpb=tcsumb							  tctmpb=tcsumb
#endif								#endif
	tcsum=0.0							tcsum=0.0
	tctmp=0.0							tctmp=0.0
!	vseasum=0.0						!	vseasum=0.0
!	vsea_bio=0.0						!	vsea_bio=0.0
	   do k=1,km							   do k=1,km
	    do j=2,jem							    do j=2,jem
	      do i=2,imm						      do i=2,imm
		if(vit(i,j,k)<0.5) cycle					if(vit(i,j,k)<0.5) cycle
		 tcsum=tcsum+vtl1(i,j,k)*dxdyt(j)*dzp(k)			 tcsum=tcsum+vtl1(i,j,k)*dxdyt(j)*dzp(k)
!		 vseasum=vseasum+dxdyt(j)*dzp(k)		!		 vseasum=vseasum+dxdyt(j)*dzp(k)
	      enddo							      enddo
	    enddo							    enddo
	   enddo							   enddo
#ifdef SPMD	   						#ifdef SPMD	   
	  call mpi_barrier(mpi_comm_ocn,ierr)				  call mpi_barrier(mpi_comm_ocn,ierr)
          call mpi_reduce(tcsum,tctmp,1,mpi_real8,mpi_sum,0,m	          call mpi_reduce(tcsum,tctmp,1,mpi_real8,mpi_sum,0,m
#else								#else
	  tctmp=tcsum							  tctmp=tcsum
#endif	 							#endif	 
!								!
#ifdef carbonBio						#ifdef carbonBio	
#ifdef SPMD	  						#ifdef SPMD	  
	if(mytid==0) then						if(mytid==0) then
#endif	    							#endif	    
	    deltatc=(tctmpb-tctmp)/vsea					    deltatc=(tctmpb-tctmp)/vsea
!          print *, 'the compensatory concentration of pt(1)'	!          print *, 'the compensatory concentration of pt(1)'
#ifdef SPMD							#ifdef SPMD
        endif							        endif
#endif								#endif	
#else								#else
       vseac=0.0						       vseac=0.0
       do k=1,km						       do k=1,km
	   do j=2,jmm							   do j=2,jmm
	       do i=2,imm						       do i=2,imm
	       if(vit(i,j,k)<0.5) cycle					       if(vit(i,j,k)<0.5) cycle
		if(vtl1(i,j,k)<0.0001)cycle					if(vtl1(i,j,k)<0.0001)cycle
		 vseac=vseac+dxdyt(j)*dzp(k)					 vseac=vseac+dxdyt(j)*dzp(k)
		enddo								enddo
           enddo						           enddo
       enddo							       enddo
#ifdef SPMD       						#ifdef SPMD       
        call mpi_barrier(mpi_comm_ocn,ierr)			        call mpi_barrier(mpi_comm_ocn,ierr)
        call mpi_reduce(vseac,vseap,1,mpi_real8,mpi_sum,0,mpi	        call mpi_reduce(vseac,vseap,1,mpi_real8,mpi_sum,0,mpi
	if(mytid==0) then						if(mytid==0) then
#endif        							#endif        
	    deltatc=(tctmpb-tctmp)/vseap				    deltatc=(tctmpb-tctmp)/vseap
	     print *, 'the compensatory concentration of pt(1		     print *, 'the compensatory concentration of pt(1
#ifdef SPMD       						#ifdef SPMD       
       endif  							       endif  
#endif								#endif
#endif								#endif


#ifdef SPMD       						#ifdef SPMD       
          call mpi_bcast(deltatc,1,mpi_real8,0,mpi_comm_ocn,i	          call mpi_bcast(deltatc,1,mpi_real8,0,mpi_comm_ocn,i
#endif								#endif
          do k=1,km						          do k=1,km
            do j=jst,jet					            do j=jst,jet
              do i=1,imt					              do i=1,imt
	       if(vit(i,j,k)<0.5) cycle					       if(vit(i,j,k)<0.5) cycle
#if (defined carbonC)||(defined carbonC14)			#if (defined carbonC)||(defined carbonC14)
		if(vtl1(i,j,k)<0.0001) cycle					if(vtl1(i,j,k)<0.0001) cycle
#endif		    						#endif		    
               vtl1(i,j,k)=vtl1(i,j,k)+deltatc			               vtl1(i,j,k)=vtl1(i,j,k)+deltatc
              enddo						              enddo
            enddo						            enddo
          enddo							          enddo
      endif							      endif
#endif      							#endif      
#endif	 							#endif	 
!cm090302----							!cm090302----
!         IF (ISP >= 1)THEN					!         IF (ISP >= 1)THEN
!!lyc 2011.02.15$OMP PARALLEL DO PRIVATE (K,J,I)		!!lyc 2011.02.15$OMP PARALLEL DO PRIVATE (K,J,I)
!            DO K = 1,KM					!            DO K = 1,KM
!               DO J = JST,JET					!               DO J = JST,JET
!                  DO I = 1,IMT					!                  DO I = 1,IMT
!         IF (mod(ISP,15)/=0) THEN				!         IF (mod(ISP,15)/=0) THEN
!                     PTB (I,J,K,N) = AFT2* PT (I,J,K,N) + AF	!                     PTB (I,J,K,N) = AFT2* PT (I,J,K,N) + AF
!                                    J,K,N) + VTL1 (I,J, K))	!                                    J,K,N) + VTL1 (I,J, K))
!         ELSE							!         ELSE
!	             PTB (I,J,K,N) =VTL1 (I,J,K)		!	             PTB (I,J,K,N) =VTL1 (I,J,K)
!         END IF						!         END IF
!!cm090302----							!!cm090302----
!		  END DO					!		  END DO
!               END DO						!               END DO
!            END DO						!            END DO
!!         END IF						!!         END IF
!------------------------------------				!------------------------------------
!$OMP PARALLEL DO PRIVATE (K,J,I)				!$OMP PARALLEL DO PRIVATE (K,J,I)
         DO K = 1,KM						         DO K = 1,KM
            DO J = JST,JET					            DO J = JST,JET
               DO I = 1,IMT					               DO I = 1,IMT
                  PTF(I,J,K,NP) = PT (I,J,K,NP)			                  PTF(I,J,K,NP) = PT (I,J,K,NP)
                  PT (I,J,K,NP) = VTL1 (I,J,K)			                  PT (I,J,K,NP) = VTL1 (I,J,K)
               END DO						               END DO
            END DO						            END DO
         END DO							         END DO
!!555---------------------					!!555---------------------
!								!
#ifdef carbonBio	 					#ifdef carbonBio	 
#ifdef buchang	 						#ifdef buchang	 
  tcsum=0.0							  tcsum=0.0
  tctmp=0.0							  tctmp=0.0
  tasum=0.0							  tasum=0.0
  tatmp=0.0							  tatmp=0.0
  po4sum=0.0							  po4sum=0.0
  po4tmp=0.0							  po4tmp=0.0
  ldocsum=0.0							  ldocsum=0.0
  ldoctmp =0.0							  ldoctmp =0.0
     DO K = 1,KM						     DO K = 1,KM
            DO J = JSM,JEM					            DO J = JSM,JEM
               DO I = 2,IMM					               DO I = 2,IMM
		  if(vit(i,j,k)<0.5) cycle					  if(vit(i,j,k)<0.5) cycle
		  if(np==1) then						  if(np==1) then
		      tcsum=tcsum+pt(i,j,k,np)*dxdyt(j)*dzp(k			      tcsum=tcsum+pt(i,j,k,np)*dxdyt(j)*dzp(k
		  endif								  endif
		  if(np==4) then						  if(np==4) then
		      tasum=tasum+pt(i,j,k,np)*dxdyt(j)*dzp(k			      tasum=tasum+pt(i,j,k,np)*dxdyt(j)*dzp(k
		  endif								  endif
		  if(np==2) po4sum=po4sum+pt(i,j,k,np)*dxdyt(			  if(np==2) po4sum=po4sum+pt(i,j,k,np)*dxdyt(
               END DO						               END DO
            END DO						            END DO
         END DO							         END DO
!								!
       if(np==3) then						       if(np==3) then
         DO K = 1,KM						         DO K = 1,KM
            DO J = JSM,JEM					            DO J = JSM,JEM
               DO I = 2,IMM					               DO I = 2,IMM
		  if(vit(i,j,k)<0.5) cycle					  if(vit(i,j,k)<0.5) cycle
                  if(pt(i,j,k,3)>0.0) then			                  if(pt(i,j,k,3)>0.0) then
		  ldocsum=ldocsum+pt(i,j,k,np)*dxdyt(j)*dzp(k			  ldocsum=ldocsum+pt(i,j,k,np)*dxdyt(j)*dzp(k
                  endif						                  endif
               END DO						               END DO
            END DO						            END DO
         END DO							         END DO
       endif							       endif

     if(np==3) then						     if(np==3) then
	 call mpi_barrier(mpi_comm_ocn,ierr)				 call mpi_barrier(mpi_comm_ocn,ierr)
	 call mpi_reduce(ldocsum,ldoctmp,1,mpi_real8,mpi_sum,		 call mpi_reduce(ldocsum,ldoctmp,1,mpi_real8,mpi_sum,

      	if(mytid==0) then					      	if(mytid==0) then
         delldoc=(vsea*ldocga-ldoctmp)/vsea			         delldoc=(vsea*ldocga-ldoctmp)/vsea
!        print *, 'the total storage of ldoc!', ldoctmp		!        print *, 'the total storage of ldoc!', ldoctmp
!        print *, 'the compensatory concentration of ldoc',de	!        print *, 'the compensatory concentration of ldoc',de
        endif  							        endif  
          call mpi_bcast(delldoc,1,mpi_real8,0,mpi_comm_ocn,i	          call mpi_bcast(delldoc,1,mpi_real8,0,mpi_comm_ocn,i
          do k=1,km						          do k=1,km
            do j=jst,jet					            do j=jst,jet
              do i=1,imt					              do i=1,imt
	       if(vit(i,j,k)<0.5) cycle					       if(vit(i,j,k)<0.5) cycle
               pt(i,j,k,np)=pt(i,j,k,np)+delldoc		               pt(i,j,k,np)=pt(i,j,k,np)+delldoc
              enddo						              enddo
            enddo						            enddo
          enddo							          enddo
     endif							     endif

     if(np==1) then						     if(np==1) then
	  call mpi_barrier(mpi_comm_ocn,ierr)				  call mpi_barrier(mpi_comm_ocn,ierr)
          call mpi_reduce(tcsum,tctmp,1,mpi_real8,mpi_sum,0,m	          call mpi_reduce(tcsum,tctmp,1,mpi_real8,mpi_sum,0,m
	if(mytid==0) print *, 'the total storage of tc!', tct		if(mytid==0) print *, 'the total storage of tc!', tct
      endif							      endif

     if(np==4) then						     if(np==4) then
	  call mpi_barrier(mpi_comm_ocn,ierr)				  call mpi_barrier(mpi_comm_ocn,ierr)
          call mpi_reduce(tasum,tatmp,1,mpi_real8,mpi_sum,0,m	          call mpi_reduce(tasum,tatmp,1,mpi_real8,mpi_sum,0,m
	if(mytid==0) then						if(mytid==0) then
!         print *, 'the total storage of ta!', tatmp		!         print *, 'the total storage of ta!', tatmp
         deltata=(vsea*2377-tatmp)/vsea				         deltata=(vsea*2377-tatmp)/vsea
        endif  							        endif  
          call mpi_bcast(deltata,1,mpi_real8,0,mpi_comm_ocn,i	          call mpi_bcast(deltata,1,mpi_real8,0,mpi_comm_ocn,i
          do k=1,km						          do k=1,km
            do j=jst,jet					            do j=jst,jet
              do i=1,imt					              do i=1,imt
	      if(vit(i,j,k)<0.5) cycle					      if(vit(i,j,k)<0.5) cycle
               pt(i,j,k,np)=pt(i,j,k,np)+deltata		               pt(i,j,k,np)=pt(i,j,k,np)+deltata
              enddo						              enddo
            enddo						            enddo
          enddo							          enddo
     endif							     endif
     if(np==2) then						     if(np==2) then
	  call mpi_barrier(mpi_comm_ocn,ierr)				  call mpi_barrier(mpi_comm_ocn,ierr)
          call mpi_reduce(po4sum,po4tmp,1,mpi_real8,mpi_sum,0	          call mpi_reduce(po4sum,po4tmp,1,mpi_real8,mpi_sum,0
      if(mytid==0) then						      if(mytid==0) then
!	print *, 'the total storage of po4!', po4tmp		!	print *, 'the total storage of po4!', po4tmp
         deltapo4=(vsea*2.38-po4tmp)/vsea			         deltapo4=(vsea*2.38-po4tmp)/vsea
      endif  							      endif  
       call mpi_bcast(deltapo4,1,mpi_real8,0,mpi_comm_ocn,ier	       call mpi_bcast(deltapo4,1,mpi_real8,0,mpi_comm_ocn,ier
       do k=1,km						       do k=1,km
            do j=jst,jet					            do j=jst,jet
              do i=1,imt					              do i=1,imt
		if(vit(i,j,k)<0.5) cycle					if(vit(i,j,k)<0.5) cycle
               pt(i,j,k,np)=pt(i,j,k,np)+deltapo4		               pt(i,j,k,np)=pt(i,j,k,np)+deltapo4
              enddo						              enddo
            enddo						            enddo
          enddo							          enddo

      endif							      endif

      do k=1,km							      do k=1,km
	  do j=1,jmt							  do j=1,jmt
	      do i=1,imt						      do i=1,imt
		if(vit(i,j,k)<0.5) cycle					if(vit(i,j,k)<0.5) cycle
		if(pt(i,j,k,np)<0.0) pt(i,j,k,np)=0.0				if(pt(i,j,k,np)<0.0) pt(i,j,k,np)=0.0
	      enddo							      enddo
	  enddo								  enddo
       enddo							       enddo
!555---------------------------------				!555---------------------------------
#endif      							#endif      
#endif      							#endif      
      END DO							      END DO
!-------------------------------------				!-------------------------------------
             ISP = ISP +1					             ISP = ISP +1
!-------------------------------------				!-------------------------------------
! 								! 
#ifdef ISO							#ifdef ISO
!zhaoliang      deallocate(K1,K2,K3,adv_vetiso,adv_vbtiso,adv	!zhaoliang      deallocate(K1,K2,K3,adv_vetiso,adv_vbtiso,adv
!lyc test							!lyc test
!      deallocate(K1,K2,K3,adv_vetiso,adv_vbtiso,adv_vntiso)	!      deallocate(K1,K2,K3,adv_vetiso,adv_vbtiso,adv_vntiso)
#endif								#endif
      deallocate(stf1,tf1)					      deallocate(stf1,tf1)
      deallocate(wkb1,wkc1,wkd1,uwk1,wst)			      deallocate(wkb1,wkc1,wkd1,uwk1,wst)
      deallocate(h0f1)						      deallocate(h0f1)
      deallocate(utf1,vtf1,utl1,vtl1)				      deallocate(utf1,vtf1,utl1,vtl1)
!--------------------------------------------			!--------------------------------------------
      RETURN							      RETURN
      END SUBROUTINE PTRACER					      END SUBROUTINE PTRACER
 								 
 								 
! CVS: $Id: biosource.F90,v 2.1 2004/06/10 07:45:17 cvsroot E	! CVS: $Id: biosource.F90,v 2.1 2004/06/10 07:45:17 cvsroot E
  SUBROUTINE BIOSOURCE(sourceb,idx)				  SUBROUTINE BIOSOURCE(sourceb,idx)
!========================					!========================
! BIOSOURCE							! BIOSOURCE
!------------------------------------------------------------	!------------------------------------------------------------
!								!
! purpose: calculate biological source of DIC, PO4, LDOC and 	! purpose: calculate biological source of DIC, PO4, LDOC and 
!								!
! author: Zhao Liang@lapc 2004/05/21				! author: Zhao Liang@lapc 2004/05/21
!								!
!------------------------------------------------------------	!------------------------------------------------------------
#include <def-undef.h>       					#include <def-undef.h>       
!								!
      USE param_mod						      USE param_mod
      USE pconst_mod						      USE pconst_mod
      USE tracer_mod						      USE tracer_mod
      USE carbon_mod						      USE carbon_mod
      USE cforce_mod						      USE cforce_mod
#ifdef SPMD      						#ifdef SPMD      
      USE msg_mod,only:mpi_comm_ocn				      USE msg_mod,only:mpi_comm_ocn
#endif      							#endif      
!								!
!------------------------------------------------------------	!------------------------------------------------------------
      IMPLICIT NONE						      IMPLICIT NONE
!#include <netcdf.inc>      					!#include <netcdf.inc>      
!#ifdef SPMD      						!#ifdef SPMD      
!#include <mpif.h>						!#include <mpif.h>
!#endif      							!#endif      
!      								!      
!------------------------------------------------------------	!------------------------------------------------------------
!     This sub is used to calculate the FLUX of a natural car	!     This sub is used to calculate the FLUX of a natural car
!     cycle including a simple biological paramterizationi	!     cycle including a simple biological paramterizationi
!     1) pCO2 flux at surface					!     1) pCO2 flux at surface
!     2) TC, TA 						!     2) TC, TA 
!     3) PO4 							!     3) PO4 
!------------------------------------------------------------	!------------------------------------------------------------
!								!
      integer::idx						      integer::idx
      real,dimension(imt,jmt,km)::sourceb,atest			      real,dimension(imt,jmt,km)::sourceb,atest
!cm---------------------					!cm---------------------
!o20:oxygen consumption is assumed to be halted below this cr	!o20:oxygen consumption is assumed to be halted below this cr
      real::o20							      real::o20
!cm---------------------					!cm---------------------

#ifdef carbonBio						#ifdef carbonBio

      real::r_cpr						      real::r_cpr
!								!
      r_cpr=1.0/r_cp						      r_cpr=1.0/r_cp

!cm---------------------					!cm---------------------
      o20=4.0							      o20=4.0
!cm---------------------					!cm---------------------

!     calculate biological source of DIC       			!     calculate biological source of DIC       
       IF(idx==1) THEN						       IF(idx==1) THEN
         do k=1,km						         do k=1,km
           do j=jsm,jem						           do j=jsm,jem
             do i=2,imm						             do i=2,imm
               sourceb(i,j,k)=sourceb(i,j,k) &			               sourceb(i,j,k)=sourceb(i,j,k) &
                            -r_cp*a0_b(i,j,k)-b0_b(i,j,k)-c_b	                            -r_cp*a0_b(i,j,k)-b0_b(i,j,k)-c_b
             enddo						             enddo
           enddo						           enddo
         enddo							         enddo
       ENDIF    						       ENDIF    
!     calculate biological source of PO4       			!     calculate biological source of PO4       
       IF(idx==2) THEN						       IF(idx==2) THEN
         do k=1,km						         do k=1,km
           do j=jsm,jem						           do j=jsm,jem
             do i=2,imm						             do i=2,imm
               sourceb(i,j,k)=sourceb(i,j,k) &			               sourceb(i,j,k)=sourceb(i,j,k) &
                            -a0_b(i,j,k)-b0_b(i,j,k)*r_cpr	                            -a0_b(i,j,k)-b0_b(i,j,k)*r_cpr
             enddo						             enddo
           enddo						           enddo
         enddo							         enddo
       ENDIF    						       ENDIF    
!     calculate biological source of LDOC       		!     calculate biological source of LDOC       
       IF(idx==3) THEN						       IF(idx==3) THEN
         do k=1,km						         do k=1,km
           do j=jsm,jem						           do j=jsm,jem
            do i=2,imm						            do i=2,imm
               sourceb(i,j,k)=sourceb(i,j,k)+b0_b(i,j,k)	               sourceb(i,j,k)=sourceb(i,j,k)+b0_b(i,j,k)
             enddo						             enddo
           enddo						           enddo
         enddo							         enddo
!	if(mytid==0) print *, 'ldoc source ',b0_b(40,34,10)	!	if(mytid==0) print *, 'ldoc source ',b0_b(40,34,10)
       ENDIF    						       ENDIF    
!     calculate biological source of TA       			!     calculate biological source of TA       
       IF(idx==4) THEN						       IF(idx==4) THEN
         do k=1,km						         do k=1,km
           do j=jsm,jem						           do j=jsm,jem
             do i=2,imm						             do i=2,imm
               sourceb(i,j,k)=sourceb(i,j,k) &			               sourceb(i,j,k)=sourceb(i,j,k) &
                            +r_np*(a0_b(i,j,k)+b0_b(i,j,k)*r_	                            +r_np*(a0_b(i,j,k)+b0_b(i,j,k)*r_
             enddo						             enddo
           enddo						           enddo
         enddo							         enddo
       ENDIF    						       ENDIF    
!cm---------------------					!cm---------------------
!     calculate biological source of o2   			!     calculate biological source of o2   
       IF(idx==5) THEN						       IF(idx==5) THEN
         do k=1,km						         do k=1,km
           do j=jsm,jem						           do j=jsm,jem
             do i=2,imm						             do i=2,imm
		 if(pt(i,j,k,5)>o20) then					 if(pt(i,j,k,5)>o20) then
                     sourceb(i,j,k)=sourceb(i,j,k) &		                     sourceb(i,j,k)=sourceb(i,j,k) &
                            +r_o2p*(-a0_b(i,j,k)-b0_b(i,j,k)*	                            +r_o2p*(-a0_b(i,j,k)-b0_b(i,j,k)*
	         endif							         endif
             enddo						             enddo
           enddo						           enddo
         enddo							         enddo
       ENDIF    						       ENDIF    
!cm---------------------					!cm---------------------
!								!
!lyc 2013.05-------------------------------------------------	!lyc 2013.05-------------------------------------------------
! calculate the biosource of Fe					! calculate the biosource of Fe
      IF(idx==6) THEN						      IF(idx==6) THEN
        do k=1,km						        do k=1,km
          do j=jsm,jem						          do j=jsm,jem
            do i=2,imm						            do i=2,imm
             sourceb(i,j,k)=sourceb(i,j,k)+Fe_source(i,j,k)	             sourceb(i,j,k)=sourceb(i,j,k)+Fe_source(i,j,k)
           enddo						           enddo
          enddo							          enddo
        enddo							        enddo
      ENDIF       						      ENDIF       
#ifdef carbonDebug      					#ifdef carbonDebug      
#ifdef SPMD							#ifdef SPMD
      print*, 'subroutine biosource--------------------------	      print*, 'subroutine biosource--------------------------
      print*,'idx,i,j,1,source:',idx,imt/2,jmt/2,sourceb(imt/	      print*,'idx,i,j,1,source:',idx,imt/2,jmt/2,sourceb(imt/
      print*,'idx=',idx,'a0=',a0_b(imt/2,jmt/2,1),'b0=',b0_b(	      print*,'idx=',idx,'a0=',a0_b(imt/2,jmt/2,1),'b0=',b0_b(
             'c=',c_b(imt/2,jmt/2,1), &				             'c=',c_b(imt/2,jmt/2,1), &
             'a1=',a1_b(imt/2,jmt/2,1),'a2=',a2_b(imt/2,jmt/2	             'a1=',a1_b(imt/2,jmt/2,1),'a2=',a2_b(imt/2,jmt/2
             'b1=',b1_b(imt/2/2,jmt/2,1),'b2=',b2_b(imt/2,jmt	             'b1=',b1_b(imt/2/2,jmt/2,1),'b2=',b2_b(imt/2,jmt
             'mytid=',mytid,"BIOSOURCE"				             'mytid=',mytid,"BIOSOURCE"
#else        							#else        
      print*, 'subroutine biosource--------------------------	      print*, 'subroutine biosource--------------------------
      print*,'idx,i,j,1,source:',idx,imt/2,jmt/2,sourceb(imt/	      print*,'idx,i,j,1,source:',idx,imt/2,jmt/2,sourceb(imt/
      print*,'idx=',idx,'a0=',a0_b(imt/2,jmt/2,1),'b0=',b0_b(	      print*,'idx=',idx,'a0=',a0_b(imt/2,jmt/2,1),'b0=',b0_b(
             'c=',c_b(imt/2,jmt/2,1), &				             'c=',c_b(imt/2,jmt/2,1), &
             'a1=',a1_b(imt/2,jmt/2,1),'a2=',a2_b(imt/2,jmt/2	             'a1=',a1_b(imt/2,jmt/2,1),'a2=',a2_b(imt/2,jmt/2
             'b1=',b1_b(imt2/2,jmt/2,1),'b2=',b2_b(imt/2,jmt/	             'b1=',b1_b(imt2/2,jmt/2,1),'b2=',b2_b(imt/2,jmt/
             "BIOSOURCE"					             "BIOSOURCE"
#endif								#endif
#endif								#endif
	     								     
#endif      							#endif      
!      								!      
      RETURN							      RETURN
      END SUBROUTINE BIOSOURCE					      END SUBROUTINE BIOSOURCE


! CVS: $Id: flux_pt.F90,v 2.1 2004/06/10 07:45:17 cvsroot Exp	! CVS: $Id: flux_pt.F90,v 2.1 2004/06/10 07:45:17 cvsroot Exp
!------------------------					!------------------------
     SUBROUTINE FLUX_PT						     SUBROUTINE FLUX_PT
!========================					!========================
! FLUX_PT							! FLUX_PT
!------------------------------------------------------------	!------------------------------------------------------------
!								!
! purpose: give surface flux of CCs (carbon or C14)		! purpose: give surface flux of CCs (carbon or C14)
!          (original author: Xu Y F)				!          (original author: Xu Y F)
!								!
! author: Zhao Liang@lapc 2004/03/03				! author: Zhao Liang@lapc 2004/03/03
!								!
!------------------------------------------------------------	!------------------------------------------------------------
#include <def-undef.h>      					#include <def-undef.h>      
!---------------------- 					!---------------------- 
!								!
      USE param_mod						      USE param_mod
      USE pconst_mod						      USE pconst_mod
      USE tracer_mod						      USE tracer_mod
      USE carbon_mod						      USE carbon_mod
      USE coutput_mod						      USE coutput_mod
      USE cforce_mod						      USE cforce_mod
      USE forc_mod   !for sea ice				      USE forc_mod   !for sea ice
#ifdef COUP							#ifdef COUP
      USE buf_mod						      USE buf_mod
							      >	      USE control_mod,only:ncpl
#endif								#endif
!----------------------------------				!----------------------------------
#ifdef SPMD      						#ifdef SPMD      
      USE msg_mod,only:mpi_comm_ocn				      USE msg_mod,only:mpi_comm_ocn
#endif      							#endif      
!								!
!----------------------------------------------			!----------------------------------------------
      IMPLICIT NONE						      IMPLICIT NONE
#include <netcdf.inc>      					#include <netcdf.inc>      
!#ifdef SPMD      						!#ifdef SPMD      
!#include <mpif.h>						!#include <mpif.h>
!#endif      							!#endif      
!      								!      
!for forcing data						!for forcing data
!lyc 2015.08							!lyc 2015.08

#if (defined carbonC) || (defined carbonBio) ||(defined carbo	#if (defined carbonC) || (defined carbonBio) ||(defined carbo
!------------------------------------------------------------	!------------------------------------------------------------
!     This sub is used to calculate the FLUX of a natural car	!     This sub is used to calculate the FLUX of a natural car
!     cycle including a simple biological parameterization	!     cycle including a simple biological parameterization
!     1) pCO2 flux at surface					!     1) pCO2 flux at surface
!     2) STC, STA 						!     2) STC, STA 
!------------------------------------------------------------	!------------------------------------------------------------
!								!
      REAL T0,ES,FACTOR,FACTX					      REAL T0,ES,FACTOR,FACTX
#ifdef carbonC							#ifdef carbonC
      REAL C1(IMT,JMT),T1(IMT,JMT),S1(IMT,JMT)			      REAL C1(IMT,JMT),T1(IMT,JMT),S1(IMT,JMT)
      REAL A1,A2,A3,B1,B2,B3,Z0,Z1				      REAL A1,A2,A3,B1,B2,B3,Z0,Z1
#endif								#endif
#endif      							#endif      
!----xu-----							!----xu-----
#if(defined carbonBio)||(defined carbonAbio)			#if(defined carbonBio)||(defined carbonAbio)
      REAL tt(imt,jmt),ss(imt,jmt),tatmp(imt,jmt),tctmp(imt,j	      REAL tt(imt,jmt),ss(imt,jmt),tatmp(imt,jmt),tctmp(imt,j
#endif								#endif
							      >
!       							!       
#ifdef carbonC14						#ifdef carbonC14
!------------------------------------------------------------	!------------------------------------------------------------
!     GIVE SURFACE FLUX of C14					!     GIVE SURFACE FLUX of C14
!------------------------------------------------------------	!------------------------------------------------------------
!cm 081027,use wind velosity to compute overd			!cm 081027,use wind velosity to compute overd
#ifdef nc14wind							#ifdef nc14wind
       real,dimension(IMT,JMT)::overdwind			       real,dimension(IMT,JMT)::overdwind
       real ccs1						       real ccs1
#else								#else
       REAL ccs1,overd						       REAL ccs1,overd
#endif								#endif

!cm 081027							!cm 081027
!------------------------------------------------------------	!------------------------------------------------------------
! one year=1.0*3.1536E7 seconds       				! one year=1.0*3.1536E7 seconds       
! a timescale of 5 year is used to relax the modelled values 	! a timescale of 5 year is used to relax the modelled values 
! observed ones with the surface thickness is 50m.		! observed ones with the surface thickness is 50m.
! if the thickness of the surface layer is 10 meter, the rela	! if the thickness of the surface layer is 10 meter, the rela
! should be 1 year.						! should be 1 year.
!------------------------------------------------------------	!------------------------------------------------------------
#ifdef nc14wind							#ifdef nc14wind
!from Toggweiler,1989						!from Toggweiler,1989
do j=1,jmt							do j=1,jmt
    do i=1,imt							    do i=1,imt
	overdwind(i,j)=(3.5*(w22np(i,j)-2))/(2.0*dzp(1)*3.153		overdwind(i,j)=(3.5*(w22np(i,j)-2))/(2.0*dzp(1)*3.153
!	if(overdwind(i,j)<0.) overdwind(i,j)=0.			!	if(overdwind(i,j)<0.) overdwind(i,j)=0.
    enddo							    enddo
enddo								enddo
!print *,((w22np(90,j),overdwind(90,j)*3.1536E7),j=1,jmt)	!print *,((w22np(90,j),overdwind(90,j)*3.1536E7),j=1,jmt)
!stop								!stop
#else								#else
      overd=1.0/(1.0*3.1536E7)					      overd=1.0/(1.0*3.1536E7)
#endif								#endif
#endif								#endif
!----------------------------------------------------------	!----------------------------------------------------------
!      								!      
!lyc								!lyc
#ifdef cfc							#ifdef cfc
INTEGER:: NN							INTEGER:: NN
real,dimension(2)::a1,a2,a3,a4,b1,b2,b3				real,dimension(2)::a1,a2,a3,a4,b1,b2,b3
real,dimension(imt,jmt)::ccs					real,dimension(imt,jmt)::ccs
integer::l 							integer::l 
#endif								#endif

#ifdef COUP							#ifdef COUP
     w22np=sqrt(duu10n)						     w22np=sqrt(duu10n)
     pressureday=patm						     pressureday=patm
     pressureday=patm/1.01325*1.0E-5				     pressureday=patm/1.01325*1.0E-5
!     if(mytid==0) print *,'pressureday: ',pressureday(2,2),'	!     if(mytid==0) print *,'pressureday: ',pressureday(2,2),'
          !pressureday(i,j)=psa3(i,j,1)/1.01325*1.0E-5		          !pressureday(i,j)=psa3(i,j,1)/1.01325*1.0E-5
#endif     							#endif     
!lyc 2014.09.11							!lyc 2014.09.11
#ifdef COUP							#ifdef COUP
          iceday=ifrac						          iceday=ifrac
#else								#else
          iceday=seaice						          iceday=seaice
#endif								#endif

#if (defined carbonC) || (defined carbonBio) || (defined carb	#if (defined carbonC) || (defined carbonBio) || (defined carb
!------------------------------------------------------------	!------------------------------------------------------------
!     xu, calculation of change in PCO2A with time		!     xu, calculation of change in PCO2A with time
!     pCO2  in the atmosphere					!     pCO2  in the atmosphere
!------------------------------------------------------------	!------------------------------------------------------------
!     pco2dry from INTFOR_PT.F90 from yearly mean values	!     pco2dry from INTFOR_PT.F90 from yearly mean values
!------------------------------------------------------------	!------------------------------------------------------------
#ifdef COUP							#ifdef COUP
 !      pco2dry=pco2(1,1)				      |	!lyc 2017.1.23       pco2dry=pco2(1,1)
							      >	       pco2dry2=pco2 !for 2D-pCO2A
 !      pco2s=284.725*1.0E-6					 !      pco2s=284.725*1.0E-6
       pco2dry=284.725  !for instant purpose		      |	!lyc 2017.1.23       pco2dry=284.725  !for instant purpose
      !if(mytid==0) write(6,*) 'the atmospheric carbon dioxid |	     !  pco2dry2=284.725  !for instant purpose
							      >	     if(mytid==0) write(6,*) 'the atmospheric carbon dioxide 
#endif								#endif
!$OMP PARALLEL DO PRIVATE (I,J,T0,ES)				!$OMP PARALLEL DO PRIVATE (I,J,T0,ES)
      DO J=1,JMT						      DO J=1,JMT
        DO I=1,IMT						        DO I=1,IMT
          IF(VIT(i,j,1) < 0.5) CYCLE				          IF(VIT(i,j,1) < 0.5) CYCLE
          T0 = 273.15 + AT(I,J,1,1)				          T0 = 273.15 + AT(I,J,1,1)
          ES = EXP(20.1050 - 9.7982E-3*T0 - 6163.10/T0)		          ES = EXP(20.1050 - 9.7982E-3*T0 - 6163.10/T0)
							      >	#ifdef COUP
							      >	          pco2a(I,J) = pco2dry2(i,j) * (1.0 - ES) ! juanxiong
							      >	#else
          pco2a(I,J) = pco2dry * (1.0 - ES)			          pco2a(I,J) = pco2dry * (1.0 - ES)
							      >	#endif
#ifdef carbonC							#ifdef carbonC
          dpco2a(I,J)=pco2a(I,J)-pco2dry0*(1.0-ES)		          dpco2a(I,J)=pco2a(I,J)-pco2dry0*(1.0-ES)
#endif          						#endif          
        ENDDO							        ENDDO
      ENDDO							      ENDDO
!------------------------------------------------------------	!------------------------------------------------------------
!     PCO2O: PARTIAL PRESSURE OF CO2-OCEAN (uatm)		!     PCO2O: PARTIAL PRESSURE OF CO2-OCEAN (uatm)
!------------------------------------------------------------	!------------------------------------------------------------
!     C1(I,J) = PTB(I,J,1,1)/RHOSRF(I,J)*1.0E9			!     C1(I,J) = PTB(I,J,1,1)/RHOSRF(I,J)*1.0E9
!     C1(I,J) =(PTB(I,J,1,1)+SSTC(i,j))/RHOSRF(I,J)		!     C1(I,J) =(PTB(I,J,1,1)+SSTC(i,j))/RHOSRF(I,J)
!     TALK(i,j)=50.26*s(i,j,1)+2317.				!     TALK(i,j)=50.26*s(i,j,1)+2317.
!------------------------------------------------------------	!------------------------------------------------------------
#ifdef carbonC          					#ifdef carbonC          
!$OMP PARALLEL DO PRIVATE (J,I)					!$OMP PARALLEL DO PRIVATE (J,I)
      DO J=1,JMT						      DO J=1,JMT
        DO I=1,IMT						        DO I=1,IMT
          C1(I,J)=0.0						          C1(I,J)=0.0
          T1(I,J)=0.0						          T1(I,J)=0.0
          IF(VIT(I,J,1)==0) CYCLE				          IF(VIT(I,J,1)==0) CYCLE
          T1(I,J)=AT(I,J,1,1)					          T1(I,J)=AT(I,J,1,1)
          C1(I,J)=PTB(I,J,1,1)					          C1(I,J)=PTB(I,J,1,1)
        ENDDO							        ENDDO
      ENDDO							      ENDDO
!------------------------------------------------------------	!------------------------------------------------------------
!     Calculation of dpco2 from C1 using Sarmiento et al.'s e	!     Calculation of dpco2 from C1 using Sarmiento et al.'s e
!     If C1 is larger than 100 umol/kg, eq is invalid (too la	!     If C1 is larger than 100 umol/kg, eq is invalid (too la
!------------------------------------------------------------	!------------------------------------------------------------
      A1 =  1.7561						      A1 =  1.7561
      A2 = -0.031618						      A2 = -0.031618
      A3 =  0.0004444						      A3 =  0.0004444
      B1 =  0.004096						      B1 =  0.004096
      B2 = -7.7086E-5						      B2 = -7.7086E-5
      B3 =  6.1000E-7						      B3 =  6.1000E-7
      								      
!$OMP PARALLEL DO PRIVATE(I,J,Z0,Z1)				!$OMP PARALLEL DO PRIVATE(I,J,Z0,Z1)
      DO J=1,JMT						      DO J=1,JMT
        DO I=1,IMT						        DO I=1,IMT
! control       						! control       
          IF(C1(I,J) > 600.0) THEN				          IF(C1(I,J) > 600.0) THEN
#ifdef SPMD							#ifdef SPMD
            PRINT*, "PTB is too big",I,J,C1(I,J),"MYTID=",myt	            PRINT*, "PTB is too big",I,J,C1(I,J),"MYTID=",myt
#else            						#else            
            PRINT*, "PTB is too big",I,J,C1(I,J),"FLUX_PT"	            PRINT*, "PTB is too big",I,J,C1(I,J),"FLUX_PT"
#endif								#endif
          ENDIF							          ENDIF
          Z0  = A1 + A2*T1(I,J) + A3*T1(I,J)*T1(I,J)		          Z0  = A1 + A2*T1(I,J) + A3*T1(I,J)*T1(I,J)
          Z1  = B1 + B2*T1(I,J) + B3*T1(I,J)*T1(I,J)		          Z1  = B1 + B2*T1(I,J) + B3*T1(I,J)*T1(I,J)
          pco2o(i,j) = Z0*C1(I,J) / ( 1.0-Z1*C1(I,J) )		          pco2o(i,j) = Z0*C1(I,J) / ( 1.0-Z1*C1(I,J) )
        ENDDO							        ENDDO
      ENDDO							      ENDDO
#endif          						#endif          
!----------------------------------------			!----------------------------------------
#if(defined carbonBio) || (defined carbonAbio)          	#if(defined carbonBio) || (defined carbonAbio)          
!lyc 2014.10.28         call FLUX_ta				!lyc 2014.10.28         call FLUX_ta
!------------------------					!------------------------
      DO J=1,JMT						      DO J=1,JMT
        DO I=1,IMT						        DO I=1,IMT
          tt(i,j)=at(i,j,1,1)					          tt(i,j)=at(i,j,1,1)
          ss(i,j)=at(i,j,1,2)					          ss(i,j)=at(i,j,1,2)
#ifdef carbonAbio						#ifdef carbonAbio
          tctmp(i,j)=ptb(i,j,1,1)+2000.				          tctmp(i,j)=ptb(i,j,1,1)+2000.
#else 								#else 
          tctmp(i,j)=ptb(i,j,1,1)				          tctmp(i,j)=ptb(i,j,1,1)
#endif								#endif
#ifdef carbonAbio						#ifdef carbonAbio
!-------------------------------------------			!-------------------------------------------
! xu, Calculation of inorganic carbon cycle			! xu, Calculation of inorganic carbon cycle
!------------------------------------------			!------------------------------------------
          tatmp(i,j)=ssfc(i,j)					          tatmp(i,j)=ssfc(i,j)
#else								#else
!--------------------------					!--------------------------
          tatmp(i,j)=ptb(i,j,1,4)				          tatmp(i,j)=ptb(i,j,1,4)
#endif								#endif
        ENDDO							        ENDDO
      ENDDO							      ENDDO
#ifdef carbonDebug						#ifdef carbonDebug
#ifdef SPMD							#ifdef SPMD
      print*, 'subroutine flux_pt----------------------------	      print*, 'subroutine flux_pt----------------------------
      PRINT*,"i,j",imt/2,jmt/2, &				      PRINT*,"i,j",imt/2,jmt/2, &
             "ta=",tatmp(imt/2,jmt/2),"tc=",tctmp(imt/2,jmt/2	             "ta=",tatmp(imt/2,jmt/2),"tc=",tctmp(imt/2,jmt/2
             "tt=",tt(imt/2,jmt/2),"ss=",ss(imt/2,jmt/2), &	             "tt=",tt(imt/2,jmt/2),"ss=",ss(imt/2,jmt/2), &
             "mytid=",mytid,"FLUX_PT"				             "mytid=",mytid,"FLUX_PT"
!             							!             
      do j=1,jmt						      do j=1,jmt
        do i=1,imt						        do i=1,imt
          if (vit(i,j,1) < 0.5) cycle				          if (vit(i,j,1) < 0.5) cycle
          if(tt(i,j)< -1.8) print*,"abnormal tt===",i,j,tt(i,	          if(tt(i,j)< -1.8) print*,"abnormal tt===",i,j,tt(i,
          if(tatmp(i,j)< 100.0 .or. tatmp(i,j)>5000.0) &	          if(tatmp(i,j)< 100.0 .or. tatmp(i,j)>5000.0) &
            print*,"abnormal ta===",i,j,tatmp(i,j),"tt=",tt(i	            print*,"abnormal ta===",i,j,tatmp(i,j),"tt=",tt(i
                   "mytid=",mytid,"VIT=",vit(i,j,1),"FLUX_PT"	                   "mytid=",mytid,"VIT=",vit(i,j,1),"FLUX_PT"
          if(tctmp(i,j)< 100.0 .or. tctmp(i,j)>5000.0) &	          if(tctmp(i,j)< 100.0 .or. tctmp(i,j)>5000.0) &
            print*,"abnormal tc===",i,j,tctmp(i,j),"tt=",tt(i	            print*,"abnormal tc===",i,j,tctmp(i,j),"tt=",tt(i
                   "mytid=",mytid,"VIT=",vit(i,j,1),"FLUX_PT"	                   "mytid=",mytid,"VIT=",vit(i,j,1),"FLUX_PT"
        enddo							        enddo
      enddo							      enddo
#else								#else
      print*, 'subroutine flux_pt----------------------------	      print*, 'subroutine flux_pt----------------------------
      PRINT*,"i,j",imt/2,jmt/2, &				      PRINT*,"i,j",imt/2,jmt/2, &
             "ta=",tatmp(imt/2,jmt/2),"tc=",tctmp(imt/2,jmt/2	             "ta=",tatmp(imt/2,jmt/2),"tc=",tctmp(imt/2,jmt/2
             "tt=",tt(imt/2,jmt/2),"ss=",ss(imt/2,jmt/2), &	             "tt=",tt(imt/2,jmt/2),"ss=",ss(imt/2,jmt/2), &
            "FLUX_PT"						            "FLUX_PT"
!             							!             
      do j=1,jmt						      do j=1,jmt
        do i=1,imt						        do i=1,imt
          if (vit(i,j,1) < 0.5) cycle				          if (vit(i,j,1) < 0.5) cycle
          if(tt(i,j)< -1.8) print*,"abnormal tt===",i,j,tt(i,	          if(tt(i,j)< -1.8) print*,"abnormal tt===",i,j,tt(i,
          if(tatmp(i,j)< 1000.0 .or. tatmp(i,j)>3000.0) &	          if(tatmp(i,j)< 1000.0 .or. tatmp(i,j)>3000.0) &
            print*,"abnormal ta===",i,j,tatmp(i,j),"tt=",tt(i	            print*,"abnormal ta===",i,j,tatmp(i,j),"tt=",tt(i
                   "VIT=",vit(i,j,1),"FLUX_PT"  		                   "VIT=",vit(i,j,1),"FLUX_PT"  
          if(tctmp(i,j)< 1000.0 .or. tctmp(i,j)>3000.0) &	          if(tctmp(i,j)< 1000.0 .or. tctmp(i,j)>3000.0) &
            print*,"abnormal tc===",i,j,tctmp(i,j),"tt=",tt(i	            print*,"abnormal tc===",i,j,tctmp(i,j),"tt=",tt(i
                   "VIT=",vit(i,j,1),"FLUX_PT" 			                   "VIT=",vit(i,j,1),"FLUX_PT" 
        enddo							        enddo
      enddo							      enddo
#endif								#endif
#endif								#endif
#ifdef printcall						#ifdef printcall
#ifdef SPMD							#ifdef SPMD
     print*, "call pco2 in flux_pt+++++++++++++++++++++++++++	     print*, "call pco2 in flux_pt+++++++++++++++++++++++++++
#else     							#else     
     print*, "call pco2 in flux_pt+++++++++++++++++++++++++++	     print*, "call pco2 in flux_pt+++++++++++++++++++++++++++
#endif								#endif
#endif								#endif
!-----------------------------------------			!-----------------------------------------
      CALL OPCO2(pco2o,tatmp,tctmp,tt,ss)			      CALL OPCO2(pco2o,tatmp,tctmp,tt,ss)
!------------------------------------------			!------------------------------------------
#endif								#endif
!------------------------------------------------------------	!------------------------------------------------------------
!     call SGEC.F90 to calculate the exchange coefficients of	!     call SGEC.F90 to calculate the exchange coefficients of
!------------------------------------------------------------	!------------------------------------------------------------
        CALL SGEC						        CALL SGEC
!------------------------------------------------------------	!------------------------------------------------------------
!     FIND CO2-FLUX FROM ATMOSPHERE TO OCEAN			!     FIND CO2-FLUX FROM ATMOSPHERE TO OCEAN
!     PCODRY: PCO2-DRY ATMOSPHERE (PPM)				!     PCODRY: PCO2-DRY ATMOSPHERE (PPM)
!     PCO2A: PARTIAL PRESSURE OF CO2-WET ATMOSPHERE (PPM)	!     PCO2A: PARTIAL PRESSURE OF CO2-WET ATMOSPHERE (PPM)
!     ssfc in units of m/s *umol/kg (in LICOM)			!     ssfc in units of m/s *umol/kg (in LICOM)
!------------------------------------------------------------	!------------------------------------------------------------
!$OMP PARALLEL DO PRIVATE (I,J)					!$OMP PARALLEL DO PRIVATE (I,J)
      DO J=1,JMT						      DO J=1,JMT
        DO I=1,IMT						        DO I=1,IMT
#ifdef carbonC							#ifdef carbonC
          dpco2o(I,J)=(dpco2a(I,J)-pco2o(I,J))*VIT(I,J,1)	          dpco2o(I,J)=(dpco2a(I,J)-pco2o(I,J))*VIT(I,J,1)
#endif          						#endif          
!-----xu------------------					!-----xu------------------
!#ifdef carbonBio						!#ifdef carbonBio
#if(defined carbonBio)||(defined carbonAbio)			#if(defined carbonBio)||(defined carbonAbio)
          dpco2o(I,J)=(pco2a(I,J)-pco2o(I,J))*VIT(I,J,1)	          dpco2o(I,J)=(pco2a(I,J)-pco2o(I,J))*VIT(I,J,1)
#endif          						#endif          
!-----treatment of sea ice,cm080813--------			!-----treatment of sea ice,cm080813--------
!          ssfc(I,J) = sge(I,J)*dpco2o(I,J)			!          ssfc(I,J) = sge(I,J)*dpco2o(I,J)
          ssfc(I,J) =(1.0-iceday(i,j))*sge(I,J)*dpco2o(I,J)	          ssfc(I,J) =(1.0-iceday(i,j))*sge(I,J)*dpco2o(I,J)
! treanment of sea ice           				! treanment of sea ice           
!          IF(AT(I,J,1,1)<=-1.8) ssfc(I,J) = 0.0		!          IF(AT(I,J,1,1)<=-1.8) ssfc(I,J) = 0.0
!          IF(ITICE(I,J)==1) ssfc(I,J) = 0.0			!          IF(ITICE(I,J)==1) ssfc(I,J) = 0.0
!-----cm080813-----------------------------			!-----cm080813-----------------------------
        ENDDO						      |	#ifdef COUP
							      >	       if(ii==1.or.ii==nss/ncpl+1) uptake(i,j)=0.0
							      >	!        if(rice(i,j)/=1.0) then
							      >	!        uptake(i,j)=uptake(i,j)+ssfc(i,j)*vit(i,j,1) *1025*1
							      >	!        endif
							      >	       uptake(i,j)=uptake(i,j)+ssfc(i,j)*dxdyt(j)*vit(i,j,1)*
							      >	#endif
							      >	         ENDDO
      ENDDO							      ENDDO
							      >
							      >	#ifdef COUP
							      >	      if(ii==nss/ncpl) then
							      >	         uptake(:,:)=-uptake(:,:)/ii
							      >	         call local_to_global_4d_double(uptake,uptake_io,1,1)
							      >	       if(mytid==0) then
							      >	         pco2up=0.0
							      >	         pco2ups=0.0
							      >	         do j=1,jmt_global
							      >	           do i=2,imm_global
							      >	            pco2up(i,j)=uptake_io(i,j)*vit_global(i,j,1)
							      >	!            pco2ups=pco2upsi+uptake_io(i,j)*vit_global(i,j,1
							      >	            pco2ups=pco2ups+uptake_io(i,j)*vit_global(i,j,1)
							      >	           enddo
							      >	         enddo
							      >	         write(6,*) 'the total exchange flux (mol/s):', pco2u
							      >	        endif
							      >	      endif
							      >	#endif
							      >
#ifdef carbonDebug      					#ifdef carbonDebug      
#ifdef SPMD							#ifdef SPMD
      PRINT*,'i,j,pco2a:',imt/2,jmt/2,pco2a(imt/2,jmt/2),'myt	      PRINT*,'i,j,pco2a:',imt/2,jmt/2,pco2a(imt/2,jmt/2),'myt
      PRINT*,'i,j,ssfc:',imt/2,jmt/2,ssfc(imt/2,jmt/2),'mytid	      PRINT*,'i,j,ssfc:',imt/2,jmt/2,ssfc(imt/2,jmt/2),'mytid
#else        							#else        
      PRINT*,'i,j,pco2a:',imt/2,jmt/2,pco2a(imt/2,jmt/2),"FLU	      PRINT*,'i,j,pco2a:',imt/2,jmt/2,pco2a(imt/2,jmt/2),"FLU
      PRINT*,'i,j,ssfc:',imt/2,jmt/2,ssfc(imt/2,jmt/2),"FLUX_	      PRINT*,'i,j,ssfc:',imt/2,jmt/2,ssfc(imt/2,jmt/2),"FLUX_
#endif								#endif
#endif      							#endif      
!------------------------------------------------------------	!------------------------------------------------------------
!     calculation of accumulative input CO2 			!     calculation of accumulative input CO2 
!       in one timestep in units of GtC				!       in one timestep in units of GtC
!------------------------------------------------------------	!------------------------------------------------------------
!$OMP PARALLEL DO PRIVATE(I,J,FACTX)				!$OMP PARALLEL DO PRIVATE(I,J,FACTX)
      DO J=1,JMT						      DO J=1,JMT
        FACTX=DXDYT(J)*unitc*DTS				        FACTX=DXDYT(J)*unitc*DTS
        DO I=1,IMT						        DO I=1,IMT
          totup(I,J)=totup(I,J)+ssfc(i,j)*FACTX*VIT(I,J,1)	          totup(I,J)=totup(I,J)+ssfc(i,j)*FACTX*VIT(I,J,1)
          tpco2o(I,J)=tpco2o(I,J)+pco2o(i,j)			          tpco2o(I,J)=tpco2o(I,J)+pco2o(i,j)
          tdpco2o(I,J)=tdpco2o(I,J)+dpco2o(i,j)			          tdpco2o(I,J)=tdpco2o(I,J)+dpco2o(i,j)
        ENDDO							        ENDDO
      ENDDO							      ENDDO
#endif      							#endif      
!--------------------------------------				!--------------------------------------
!     GIVE SURFACE FLUX of C14					!     GIVE SURFACE FLUX of C14
!-------------------------------------				!-------------------------------------
#ifdef carbonC14						#ifdef carbonC14
!								!
      DO J = 1,JMT						      DO J = 1,JMT
        DO I = 1,IMT						        DO I = 1,IMT
!lyc#ifdef SPMD          					!lyc#ifdef SPMD          
!          IF(j_global(J)<=40) THEN				!          IF(j_global(J)<=40) THEN
!            ccs1=catm(3)					!            ccs1=catm(3)
!          ELSE IF(j_global(J)<=140) THEN			!          ELSE IF(j_global(J)<=140) THEN
!            ccs1=catm(2)					!            ccs1=catm(2)
!          ELSE							!          ELSE
!            ccs1=catm(1)					!            ccs1=catm(1)
!          ENDIF     						!          ENDIF     
!#else          						!#else          
!          IF(J<=40) THEN					!          IF(J<=40) THEN
!            ccs1=catm(3)					!            ccs1=catm(3)
!          ELSE IF(J<=140) THEN					!          ELSE IF(J<=140) THEN
!            ccs1=catm(2)					!            ccs1=catm(2)
!          ELSE							!          ELSE
!            ccs1=catm(1)					!            ccs1=catm(1)
!          ENDIF     						!          ENDIF     
!#endif          						!#endif          
#ifdef SPMD          						#ifdef SPMD          
!cm080415							!cm080415
!          IF(j_global(J)<=70) THEN				!          IF(j_global(J)<=70) THEN
          IF(j_global(J)<=36) THEN				          IF(j_global(J)<=36) THEN
            ccs1=catm(3)					            ccs1=catm(3)
!          ELSE IF(j_global(J)<=111) THEN			!          ELSE IF(j_global(J)<=111) THEN
          ELSE IF(j_global(J)<=56) THEN				          ELSE IF(j_global(J)<=56) THEN
            ccs1=catm(2)					            ccs1=catm(2)
          ELSE							          ELSE
            ccs1=catm(1)					            ccs1=catm(1)
          ENDIF     						          ENDIF     
#else          							#else          
!          IF(J<=70) THEN					!          IF(J<=70) THEN
          IF(J<=36) THEN					          IF(J<=36) THEN
            ccs1=catm(3)					            ccs1=catm(3)
!          ELSE IF(J<=111) THEN					!          ELSE IF(J<=111) THEN
          ELSE IF(J<=56) THEN					          ELSE IF(J<=56) THEN
            ccs1=catm(2)					            ccs1=catm(2)
          ELSE							          ELSE
            ccs1=catm(1)					            ccs1=catm(1)
          ENDIF     						          ENDIF     
!cm080415							!cm080415
#endif          						#endif          
!cm080807,for the use of sea ice				!cm080807,for the use of sea ice
!          ssfc(I,J) = overd*(ccs1-ptb(I,J,1,1))*vit(I,J,1)	!          ssfc(I,J) = overd*(ccs1-ptb(I,J,1,1))*vit(I,J,1)
#ifdef nc14wind							#ifdef nc14wind
          ssfc(I,J) = (1.0-iceday(i,j))*overdwind(i,j)*(ccs1-	          ssfc(I,J) = (1.0-iceday(i,j))*overdwind(i,j)*(ccs1-
#else								#else
          ssfc(I,J) = (1.0-iceday(i,j))*overd*(ccs1-ptb(I,J,1	          ssfc(I,J) = (1.0-iceday(i,j))*overd*(ccs1-ptb(I,J,1
#endif								#endif
!cm080807							!cm080807
!ssfc(i,j)=0.							!ssfc(i,j)=0.
ENDDO								ENDDO
      ENDDO							      ENDDO
#ifdef carbonDebug      					#ifdef carbonDebug      
#ifdef SPMD							#ifdef SPMD
      PRINT*,'i,j,ssfc:',imt/2,jmt/2,ssfc(imt/2,jmt/2),'mytid	      PRINT*,'i,j,ssfc:',imt/2,jmt/2,ssfc(imt/2,jmt/2),'mytid
#else        							#else        
      PRINT*,'i,j,ssfc:',imt/2,jmt/2,ssfc(imt/2,jmt/2),"FLUX_	      PRINT*,'i,j,ssfc:',imt/2,jmt/2,ssfc(imt/2,jmt/2),"FLUX_
#endif								#endif
#endif								#endif
#endif								#endif
!     								!     
!----xu----A--------------------------				!----xu----A--------------------------
!  checking the inorganic carbon cycle				!  checking the inorganic carbon cycle
!-------------------------------------				!-------------------------------------
#ifdef carbonAbio						#ifdef carbonAbio
#ifdef SPMD							#ifdef SPMD
      PRINT*,'i,j,totup,ssfc,dpco2o,pco2o,dpco2a,tatmp,tctmp,	      PRINT*,'i,j,totup,ssfc,dpco2o,pco2o,dpco2a,tatmp,tctmp,
             imt/2,jmt/2,totup(imt/2,jmt/2),ssfc(imt/2,jmt/2)	             imt/2,jmt/2,totup(imt/2,jmt/2),ssfc(imt/2,jmt/2)
             dpco2a(imt/2,jmt/2),tatmp(imt/2,jmt/2),tctmp(imt	             dpco2a(imt/2,jmt/2),tatmp(imt/2,jmt/2),tctmp(imt
             ss(imt/2,jmt/2),'mytid=',mytid,"FLUX_PT"		             ss(imt/2,jmt/2),'mytid=',mytid,"FLUX_PT"
#else        							#else        
      PRINT*,'i,j,ssfc:',imt/2,jmt/2,ssfc(imt/2,jmt/2),"FLUX_	      PRINT*,'i,j,ssfc:',imt/2,jmt/2,ssfc(imt/2,jmt/2),"FLUX_
#endif								#endif
#endif								#endif
!								!
! 								! 
!lyc								!lyc
!------------------------------------------------------------	!------------------------------------------------------------
!     SOLUBILITY COEFFICIENTS OF CFC11 & 12 AFTER WEISS(1974)	!     SOLUBILITY COEFFICIENTS OF CFC11 & 12 AFTER WEISS(1974)
!                   UNIT: mol/liter/atm				!                   UNIT: mol/liter/atm
!------------------------------------------------------------	!------------------------------------------------------------
#ifdef cfc							#ifdef cfc
!---------------------------------------------			!---------------------------------------------
       DATA A1/ -229.9261   , -218.0971    /			       DATA A1/ -229.9261   , -218.0971    /
       DATA A2/  319.6552   ,  298.9702    /			       DATA A2/  319.6552   ,  298.9702    /
       DATA A3/  119.4471   ,  113.8049    /			       DATA A3/  119.4471   ,  113.8049    /
       DATA A4/   -1.39165  ,   -1.39165   /			       DATA A4/   -1.39165  ,   -1.39165   /
       DATA B1/   -0.142382 ,   -0.143566  /			       DATA B1/   -0.142382 ,   -0.143566  /
       DATA B2/    0.091459 ,    0.091015  /			       DATA B2/    0.091459 ,    0.091015  /
       DATA B3/   -0.0157274,   -0.0153924 /			       DATA B3/   -0.0157274,   -0.0153924 /
!----------------------------------------------------------	!----------------------------------------------------------
!      COMPUTE SURFACE SATURATED CFC CONCENTRATION.		!      COMPUTE SURFACE SATURATED CFC CONCENTRATION.
!      SOL (mol/liter/atm) : SOLUBILITY OF CFC11 & 12.		!      SOL (mol/liter/atm) : SOLUBILITY OF CFC11 & 12.
!      CCS (pico-mol/liter): SATURATED CFCs IN UPPER MOST BOX	!      CCS (pico-mol/liter): SATURATED CFCs IN UPPER MOST BOX
!      T0(K), S0(psu)      : SURFACE TEMPERATURE & SALINITY.	!      T0(K), S0(psu)      : SURFACE TEMPERATURE & SALINITY.
!------------------------------------------------------------	!------------------------------------------------------------
        L=1							        L=1
!c$omp parallel do private (j,i,t0,s0,xsol,sol)			!c$omp parallel do private (j,i,t0,s0,xsol,sol)
!$doacross local(j,i,t0,s0,xsol,sol) 				!$doacross local(j,i,t0,s0,xsol,sol) 
       DO  j = 1, Jmt						       DO  j = 1, Jmt
       DO  i = 1, Imt						       DO  i = 1, Imt
        t0 = AT(i,j,1,1) + 273.15				        t0 = AT(i,j,1,1) + 273.15
         s0 = AT(i,j,1,2)*1000.+35.  				         s0 = AT(i,j,1,2)*1000.+35.  
         if( vit(I,J,1)<0.5 ) cycle				         if( vit(I,J,1)<0.5 ) cycle
         xsol = A1(L) + A2(L)*100.0/t0                &		         xsol = A1(L) + A2(L)*100.0/t0                &
            + A3(L)*LOG(t0/100.) + A4(L)*(t0/100.)**2 &		            + A3(L)*LOG(t0/100.) + A4(L)*(t0/100.)**2 &
            + s0 *( B1(L) + B2(L)*t0/100.0 + B3(L)*(t0/100.)*	            + s0 *( B1(L) + B2(L)*t0/100.0 + B3(L)*(t0/100.)*
        sol = EXP(xsol)						        sol = EXP(xsol)
        if (j_global(j).le.91) then				        if (j_global(j).le.91) then
        ccs(i,j) = sol * cfcatm(1) * vit(I,J,1)			        ccs(i,j) = sol * cfcatm(1) * vit(I,J,1)
         else 							         else 
         ccs(i,j) = sol * cfcatm(2) * vit(I,J,1)		         ccs(i,j) = sol * cfcatm(2) * vit(I,J,1)
        endif							        endif
       ENDDO							       ENDDO
       ENDDO							       ENDDO
!--------------------------------------				!--------------------------------------
       call sgecfc						       call sgecfc
!--------------------------------------				!--------------------------------------
!								!
! 5 year=5*3.1536E7 seconds       				! 5 year=5*3.1536E7 seconds       
      nn=1							      nn=1
      IF(NN.EQ.1) THEN						      IF(NN.EQ.1) THEN
!14      overd=1.0/5./3.1536E7					!14      overd=1.0/5./3.1536E7
      DO 120 J = 1,JMT						      DO 120 J = 1,JMT
        DO 120 I = 1,IMT					        DO 120 I = 1,IMT
!14          IF(J.LT.21) THEN					!14          IF(J.LT.21) THEN
!14            ccs1=ccatm(3)					!14            ccs1=ccatm(3)
!14          ELSE IF(J.LE.69) THEN				!14          ELSE IF(J.LE.69) THEN
!14            ccs1=ccatm(2)					!14            ccs1=ccatm(2)
!14          ELSE						!14          ELSE
!14            ccs1=ccatm(1)					!14            ccs1=ccatm(1)
!14          ENDIF     						!14          ENDIF     
!cc          ssfc(i,j) = (zk0(1)-zk0(2))/5./3.1536E7*(ccs1-cc	!cc          ssfc(i,j) = (zk0(1)-zk0(2))/5./3.1536E7*(ccs1-cc
!cc     &                                           *vit(i,j,	!cc     &                                           *vit(i,j,
!         if(itice(i,j).ne.1) then				!         if(itice(i,j).ne.1) then
         ssfc(I,J) = SGE(i,j)*ODZP(1)/360000.*(ccs(I,J)-ptb(I	         ssfc(I,J) = SGE(i,j)*ODZP(1)/360000.*(ccs(I,J)-ptb(I
!         else							!         else
!         ssfc(i,j)=0.0						!         ssfc(i,j)=0.0
!         endif							!         endif
120   CONTINUE							120   CONTINUE
       write(*,*) 'ssfc=' ,ssfc(imt/2,jmt/2)			       write(*,*) 'ssfc=' ,ssfc(imt/2,jmt/2)
      ENDIF							      ENDIF
#endif								#endif

      RETURN							      RETURN
      END SUBROUTINE FLUX_PT					      END SUBROUTINE FLUX_PT


SUBROUTINE FLUX_TA						SUBROUTINE FLUX_TA

!------------------------------------------------------------	!------------------------------------------------------------
!if carbonBio is defined , the sea surface TA will be modifie	!if carbonBio is defined , the sea surface TA will be modifie
!the statistical relationship is from the work of Millero et 	!the statistical relationship is from the work of Millero et 
!------------------------------------------------------------	!------------------------------------------------------------

!Author: Li Yangchun 15/05/2008					!Author: Li Yangchun 15/05/2008


#include <def-undef.h>						#include <def-undef.h>
#if(defined carbonBio) || (defined carbonAbio)			#if(defined carbonBio) || (defined carbonAbio)
      USE param_mod						      USE param_mod
      USE pconst_mod						      USE pconst_mod
      USE tracer_mod						      USE tracer_mod
      USE carbon_mod						      USE carbon_mod
      USE forc_mod						      USE forc_mod
#ifdef SPMD      						#ifdef SPMD      
      USE msg_mod,only:mpi_comm_ocn				      USE msg_mod,only:mpi_comm_ocn
#endif      							#endif      
!								!
!------------------------------------------------------------	!------------------------------------------------------------
      IMPLICIT NONE						      IMPLICIT NONE
      integer::ia,ja						      integer::ia,ja
      real,dimension(:,:,:),allocatable::res			      real,dimension(:,:,:),allocatable::res

!      real,dimension(imt,jmt,2)::res				!      real,dimension(imt,jmt,2)::res
!      real,dimension(imt,jmt)::nta_pt1				!      real,dimension(imt,jmt)::nta_pt1
!      real,dimension(imt,jmt_global)::nta_io			!      real,dimension(imt,jmt_global)::nta_io
      allocate(res(imt,jmt,2))					      allocate(res(imt,jmt,2))


!--------------------------------------- 			!--------------------------------------- 
      nta_pt(:,:)=0.0						      nta_pt(:,:)=0.0
#if (defined BOUNDARY)						#if (defined BOUNDARY)
    do j=1,jmt							    do j=1,jmt
	do i=1,imt							do i=1,imt
	    res(i,j,1)=restore(i,j,1,1)					    res(i,j,1)=restore(i,j,1,1)
	    res(i,j,2)=restore(i,j,1,2)*1000.0+35.0			    res(i,j,2)=restore(i,j,1,2)*1000.0+35.0
	enddo								enddo
    enddo							    enddo
#else								#else
    do j=1,jmt							    do j=1,jmt
	do i=1,imt							do i=1,imt
	    res(i,j,1)=at(i,j,1,1)					    res(i,j,1)=at(i,j,1,1)
	    res(i,j,2)=at(i,j,1,2)*1000.0+35.0				    res(i,j,2)=at(i,j,1,2)*1000.0+35.0
	enddo								enddo
    enddo							    enddo
#endif								#endif
    do j=1,jmt							    do j=1,jmt
    do i=2,imm							    do i=2,imm
#ifdef SPMD							#ifdef SPMD
	ja=j_global(j)							ja=j_global(j)
        ia=i_global(i)						        ia=i_global(i)
#else								#else
	ja=j								ja=j
        ia=i							        ia=i
#endif								#endif
	if(vit(i,j,1)<0.5.or.res(i,j,2)<29.0.or.res(i,j,2)>37		if(vit(i,j,1)<0.5.or.res(i,j,2)<29.0.or.res(i,j,2)>37
!------------------------------------------------------------	!------------------------------------------------------------
! for the Arctic Ocean						! for the Arctic Ocean
!    if(basin(i,ja)==1) then					!    if(basin(i,ja)==1) then
!	nta_pt(i,j)=2291-2.69*(res(i,j,1)-20.0)-0.046*(res(i,	!	nta_pt(i,j)=2291-2.69*(res(i,j,1)-20.0)-0.046*(res(i,
!    endif							!    endif
!------------------------------------------------------------	!------------------------------------------------------------
! for the Atlantic ocean and Indian ocean   			! for the Atlantic ocean and Indian ocean   
   if(basin(ia,ja)==2.and.lat(ja)>=30.0) then			   if(basin(ia,ja)==2.and.lat(ja)>=30.0) then
	nta_pt(i,j)=2291-2.69*(res(i,j,1)-20.0)-0.046*(res(i,		nta_pt(i,j)=2291-2.69*(res(i,j,1)-20.0)-0.046*(res(i,
   endif							   endif
   if(basin(ia,ja)==2.and.lat(ja)<30.0.or.basin(ia,ja)==3) th	   if(basin(ia,ja)==2.and.lat(ja)<30.0.or.basin(ia,ja)==3) th
       nta_pt(i,j)= 2291					       nta_pt(i,j)= 2291
   endif							   endif
!------------------------------------------------------------	!------------------------------------------------------------
!for the Pacific ocean						!for the Pacific ocean
   if(basin(ia,ja)==4) then					   if(basin(ia,ja)==4) then
     if(lat(ja)>=30.0) then					     if(lat(ja)>=30.0) then
         nta_pt(i,j)=2300-7.00*(res(i,j,1)-20)-0.158*(res(i,j	         nta_pt(i,j)=2300-7.00*(res(i,j,1)-20)-0.158*(res(i,j
     else if(lat(ja)>=-20.0.and.lat(ja)<=20.0.and.lon(ia)>=25	     else if(lat(ja)>=-20.0.and.lat(ja)<=20.0.and.lon(ia)>=25
         nta_pt(i,j)=2300-2.94*(res(i,j,1)-29)-0.058*(res(i,j	         nta_pt(i,j)=2300-2.94*(res(i,j,1)-29)-0.058*(res(i,j
     else if(lat(ja)<=10.0.and.lat(ja)>=-10.0.and.lon(ia)>=22	     else if(lat(ja)<=10.0.and.lat(ja)>=-10.0.and.lon(ia)>=22
         nta_pt(i,j)=2300-2.94*(res(i,j,1)-29)-0.058*(res(i,j	         nta_pt(i,j)=2300-2.94*(res(i,j,1)-29)-0.058*(res(i,j
     else							     else
         nta_pt(i,j)=2300					         nta_pt(i,j)=2300
     endif							     endif
    endif							    endif
!------------------------------------------------------------	!------------------------------------------------------------
!for the southern ocean						!for the southern ocean
     if(basin(ia,ja)==5.or.basin(ia,ja)==6) then		     if(basin(ia,ja)==5.or.basin(ia,ja)==6) then
	  nta_pt(i,j)=2291-2.52*(res(i,j,1)-20)+0.056*(res(i,		  nta_pt(i,j)=2291-2.52*(res(i,j,1)-20)+0.056*(res(i,
     endif							     endif
     if(basin(ia,ja)==7) then					     if(basin(ia,ja)==7) then
	  nta_pt(i,j)=2300-2.52*(res(i,j,1)-20)+0.056*(res(i,		  nta_pt(i,j)=2300-2.52*(res(i,j,1)-20)+0.056*(res(i,
     endif							     endif

 !    if(nta_pt(i,j)<1900) print *,'nta<1900', i,j_global(j),	 !    if(nta_pt(i,j)<1900) print *,'nta<1900', i,j_global(j),
     enddo							     enddo
       if(nx_proc==1) then					       if(nx_proc==1) then
        nta_pt(1,j)=nta_pt(imm,j)				        nta_pt(1,j)=nta_pt(imm,j)
        nta_pt(imt,j)=nta_pt(2,j)				        nta_pt(imt,j)=nta_pt(2,j)
       endif							       endif
     enddo							     enddo
#ifdef SPMD							#ifdef SPMD
      call exch_boundary(nta_pt(1,1),1)				      call exch_boundary(nta_pt(1,1),1)
#endif								#endif
!    if(mytid==1) then						!    if(mytid==1) then
!	do j=1,jmt						!	do j=1,jmt
!    write(99,*) (basin(i,ja),i=1,imt)				!    write(99,*) (basin(i,ja),i=1,imt)
!        enddo							!        enddo
!    endif							!    endif
!-----------------------------------------------------------	!-----------------------------------------------------------
   do j=1,jmt							   do j=1,jmt
     do i=1,imt							     do i=1,imt
!	 nta_pt1(i,j)=nta_pt(i,j)*vit(i,j,1)*res(i,j,2)/35.0	!	 nta_pt1(i,j)=nta_pt(i,j)*vit(i,j,1)*res(i,j,2)/35.0
     IF (vit(i,j,1) > 0.5) then					     IF (vit(i,j,1) > 0.5) then
     if(res(i,j,2)>29.and.res(i,j,2)<38.and.nta_pt(i,j)>0.0) 	     if(res(i,j,2)>29.and.res(i,j,2)<38.and.nta_pt(i,j)>0.0) 
!----------------------------------------------------		!----------------------------------------------------
!xu								!xu
!----------------						!----------------
#ifdef carbonAbio						#ifdef carbonAbio
!---------							!---------
!   SSFC is the observed TA for the calculation of pCO2sw	!   SSFC is the observed TA for the calculation of pCO2sw
!-------------------------------------------------------	!-------------------------------------------------------
     ssfc(i,j)=nta_pt(i,j)*vit(i,j,1)*res(i,j,2)/35.0		     ssfc(i,j)=nta_pt(i,j)*vit(i,j,1)*res(i,j,2)/35.0

    else							    else
     ssfc(i,j)=2300						     ssfc(i,j)=2300
#else								#else
     ssfc(i,j)=DZP(1)*3*GAMMA*(nta_pt(i,j)*vit(i,j,1)*       	     ssfc(i,j)=DZP(1)*3*GAMMA*(nta_pt(i,j)*vit(i,j,1)*       
                res(i,j,2)/35.0-ptb(i,j,1,4))			                res(i,j,2)/35.0-ptb(i,j,1,4))
#endif								#endif
    endif							    endif
     ENDIF							     ENDIF
     enddo							     enddo
    enddo							    enddo

!      call local_to_global_4d(nta_pt1,nta_io,1,1)		!      call local_to_global_4d(nta_pt1,nta_io,1,1)
!      if(mytid==0) then					!      if(mytid==0) then
!               write(99) ((nta_io(i,j),i=1,imt),j=1,jmt_glob	!               write(99) ((nta_io(i,j),i=1,imt),j=1,jmt_glob
!              close(99)					!              close(99)
!      endif							!      endif

!     do j=1,jmt						!     do j=1,jmt
!	 do i=1,imt						!	 do i=1,imt
!	     ja=j_global(j)					!	     ja=j_global(j)
!	     if(i==141.and.ja==20) print *,ssfc(i,j),nta_pt(i	!	     if(i==141.and.ja==20) print *,ssfc(i,j),nta_pt(i
!                (res(i,j,2)*1000.0+35.0)/35.0,res(i,j,1:2)	!                (res(i,j,2)*1000.0+35.0)/35.0,res(i,j,1:2)
		 								 
!         enddo							!         enddo
!     enddo							!     enddo
!----------------------------------				!----------------------------------

     deallocate(res)						     deallocate(res)
#endif  							#endif  

END SUBROUTINE FLUX_TA						END SUBROUTINE FLUX_TA


! CVS: $Id: pco2.F90,v 2.1 2004/06/10 07:45:17 cvsroot Exp $	! CVS: $Id: pco2.F90,v 2.1 2004/06/10 07:45:17 cvsroot Exp $
  SUBROUTINE OPCO2(pco2o,tta,ttc,tt,ss)				  SUBROUTINE OPCO2(pco2o,tta,ttc,tt,ss)
!========================					!========================
! PCO2								! PCO2
!------------------------------------------------------------	!------------------------------------------------------------
!								!
! purpose: calculate partial pressure of carbon dioxide with 	! purpose: calculate partial pressure of carbon dioxide with 
!								!
! author: Zhao Liang@lapc 2004/05/26				! author: Zhao Liang@lapc 2004/05/26
!          (original author: Li Y CH and Xu Y F)		!          (original author: Li Y CH and Xu Y F)
!								!
!------------------------------------------------------------	!------------------------------------------------------------
#include <def-undef.h>       					#include <def-undef.h>       
!								!
      USE param_mod, ONLY: imt,jmt,jsm,jem,imm,mytid,nx_proc 	      USE param_mod, ONLY: imt,jmt,jsm,jem,imm,mytid,nx_proc 
      USE pconst_mod, ONLY: vit,i_global,j_global 		      USE pconst_mod, ONLY: vit,i_global,j_global 
#ifdef SPMD      						#ifdef SPMD      
      USE msg_mod,only:mpi_comm_ocn				      USE msg_mod,only:mpi_comm_ocn
#endif      							#endif      
!								!
!------------------------------------------------------------	!------------------------------------------------------------
      IMPLICIT NONE						      IMPLICIT NONE
!#ifdef SPMD      						!#ifdef SPMD      
!#include <mpif.h>						!#include <mpif.h>
!#endif      							!#endif      
!      								!      
      REAL,DIMENSION(imt,jmt)::tta,ttc,tt,ss			      REAL,DIMENSION(imt,jmt)::tta,ttc,tt,ss
      REAL::ta,tc,t,s						      REAL::ta,tc,t,s
      REAL,DIMENSION(imt,jmt)::pco2o				      REAL,DIMENSION(imt,jmt)::pco2o
!      								!      
      REAL::tp,tsi,tb						      REAL::tp,tsi,tb
      REAL::ion							      REAL::ion
      REAL*8::k0,pk1,pk2,k1,k2,fh,kb,ksi,kw,kp1,kp2,kp3		      REAL*8::k0,pk1,pk2,k1,k2,fh,kb,ksi,kw,kp1,kp2,kp3
      REAL*8::fh1						      REAL*8::fh1
      REAL*8::ac,ab,asi,ap,aw,ah,ah1				      REAL*8::ac,ab,asi,ap,aw,ah,ah1

      INTEGER::i,j,nn						      INTEGER::i,j,nn

      tp=1.5							      tp=1.5
      tsi=5.0							      tsi=5.0
      tb=410.6							      tb=410.6

      pco2o(:,:)=0.0						      pco2o(:,:)=0.0
#ifdef carbonDebug						#ifdef carbonDebug
#ifdef SPMD							#ifdef SPMD
            print*, 'subroutine pco2 ------------------------	            print*, 'subroutine pco2 ------------------------
#else								#else
            print*, 'subroutine pco2 ------------------------	            print*, 'subroutine pco2 ------------------------
#endif								#endif
#endif								#endif

      DO j=2,jem						      DO j=2,jem
        DO i=2,imm						        DO i=2,imm
          IF(vit(i,j,1) < 0.5) CYCLE				          IF(vit(i,j,1) < 0.5) CYCLE
          t=tt(i,j)+273.15					          t=tt(i,j)+273.15
          s=ss(i,j)*1000.0+35.0					          s=ss(i,j)*1000.0+35.0
          ta=tta(i,j)						          ta=tta(i,j)
          tc=ttc(i,j)						          tc=ttc(i,j)

!#ifdef carbonDebug						!#ifdef carbonDebug
          if(t>270.0 .and. t<313.0) then			          if(t>270.0 .and. t<313.0) then
            continue						            continue
          else							          else
#ifdef SPMD							#ifdef SPMD
            print*, 'abnormal temperature i,j,t:',i,j,t,'myti	            print*, 'abnormal temperature i,j,t:',i,j,t,'myti
#else								#else
            print*,'abnormal temperature i,j,t:',i,j,t		            print*,'abnormal temperature i,j,t:',i,j,t
#endif								#endif
          endif							          endif
          if(isnan(tc))then					          if(isnan(tc))then
          print*,'DIC is nan',i_global(i),j_global(j),tc,ta	          print*,'DIC is nan',i_global(i),j_global(j),tc,ta
         stop							         stop
          endif							          endif
          if(ta<1600.0.or.ta>3000.0 ) then			          if(ta<1600.0.or.ta>3000.0 ) then
#ifdef SPMD							#ifdef SPMD
            print*, 'abnormal TA i,j,ta:',i,j_global(j),ta,s	            print*, 'abnormal TA i,j,ta:',i,j_global(j),ta,s
#else								#else
            print*,'abnormal TA i,j,ta:',i,j,ta			            print*,'abnormal TA i,j,ta:',i,j,ta
#endif								#endif
          endif							          endif
          if(tc<1500.0 .or. tc>2500.0) then			          if(tc<1500.0 .or. tc>2500.0) then
#ifdef SPMD							#ifdef SPMD
            print*, 'abnormal TC i,j,tc:',i,j_global(j),tc    |	            print*, 'abnormal TC i,j,tc:',i,j_global(j),tc,'t
#else								#else
            print*,'abnormal TC i,j,tc:',i,j,tc			            print*,'abnormal TC i,j,tc:',i,j,tc
#endif								#endif
          endif							          endif
!#endif							      |	!#endif 'tt',t,'ss',s,
!          tb=410.6*s/35.					!          tb=410.6*s/35.
 								 
! the unit of ko is moles/(kg*atm)or umols/(kg*uatm)		! the unit of ko is moles/(kg*atm)or umols/(kg*uatm)
          k0=exp(-60.2409+93.4517*(100./t)+23.3585*log(t/100.	          k0=exp(-60.2409+93.4517*(100./t)+23.3585*log(t/100.
                s*(0.023517-0.023656*(t/100.)+0.0047036*(t/10	                s*(0.023517-0.023656*(t/100.)+0.0047036*(t/10

          pk1=845.0/t+3.248-0.0098*s+0.000087*s**2		          pk1=845.0/t+3.248-0.0098*s+0.000087*s**2
          pk2=1377.3/t+4.824-0.0185*s+0.000122*s**2		          pk2=1377.3/t+4.824-0.0185*s+0.000122*s**2
          k1=10.0**(-pk1)*10**6					          k1=10.0**(-pk1)*10**6
          k2=10.0**(-pk2)*10**6					          k2=10.0**(-pk2)*10**6
          fh=1.29-0.00204*T+4.6E-4*S**2-1.48E-6*S**2*T		          fh=1.29-0.00204*T+4.6E-4*S**2-1.48E-6*S**2*T
          fh1=fh*10.0**6					          fh1=fh*10.0**6

! the unit is molality						! the unit is molality
! dissociation of borate :					! dissociation of borate :
          kb=exp((-8966.90-2890.51*s**0.5-77.942*s+1.726*s**1	          kb=exp((-8966.90-2890.51*s**0.5-77.942*s+1.726*s**1
             0.0993*s**2)/t+(148.0248+137.194*s**0.5+1.62247*	             0.0993*s**2)/t+(148.0248+137.194*s**0.5+1.62247*
             (-24.4344-25.085*s**0.5-0.2474*s)*log(t)+0.05310	             (-24.4344-25.085*s**0.5-0.2474*s)*log(t)+0.05310
             *(1-s*0.001005)*10.0**6				             *(1-s*0.001005)*10.0**6
! dissociation of silicic					! dissociation of silicic
          ion=0.7						          ion=0.7
          ksi=exp(117.40-8904.2/t-19.334*log(t)+(3.5913-458.7	          ksi=exp(117.40-8904.2/t-19.334*log(t)+(3.5913-458.7
                 (-1.5998+188.74/t)*ion+ &			                 (-1.5998+188.74/t)*ion+ &
                 (0.07871-12.1652/t)*ion**2)*(1-s*0.001005)*1	                 (0.07871-12.1652/t)*ion**2)*(1-s*0.001005)*1

! the unit is umol/(kg soln):					! the unit is umol/(kg soln):
! dissociation of water						! dissociation of water
          kw=exp(148.9802-13847.26/t-23.6521*log(t)+(-5.977+1	          kw=exp(148.9802-13847.26/t-23.6521*log(t)+(-5.977+1
                 1.0495*log(t))*s**0.5-0.01615*s)*10.0**6	                 1.0495*log(t))*s**0.5-0.01615*s)*10.0**6

! dissociation of phosphoric					! dissociation of phosphoric
          kp1=exp(115.54-4576.752/t-18.453*log(t)+(0.69171-10	          kp1=exp(115.54-4576.752/t-18.453*log(t)+(0.69171-10
                 (-0.01844-0.65643/t)*s)*10.0**6		                 (-0.01844-0.65643/t)*s)*10.0**6
          kp2=exp(172.1033-8814.715/t-27.927*log(t)+(1.3566-1	          kp2=exp(172.1033-8814.715/t-27.927*log(t)+(1.3566-1
                 (-0.05778+0.37335/t)*s)*10.0**6		                 (-0.05778+0.37335/t)*s)*10.0**6
          kp3=exp(-18.126-3070.75/t+(2.81197+17.27039/t)*s**0	          kp3=exp(-18.126-3070.75/t+(2.81197+17.27039/t)*s**0
                  44.99486/t)*s)*10.0**6			                  44.99486/t)*s)*10.0**6

! calculate:							! calculate:
          ah=0.005						          ah=0.005
	  nn=0								  nn=0
 								 
 doo:     DO							 doo:     DO
     !       ac=tc*(k1*ah+2*k1*k2)/(ah**2+k1*ah+k1*k2)		     !       ac=tc*(k1*ah+2*k1*k2)/(ah**2+k1*ah+k1*k2)
            ab=tb*kb/(ah+kb)					            ab=tb*kb/(ah+kb)
            asi=tsi*ksi/(ah+ksi)				            asi=tsi*ksi/(ah+ksi)
            ap=tp*(kp2*ah+2*kp2*kp3)/(ah**2+kp2*ah+kp2*kp3)	            ap=tp*(kp2*ah+2*kp2*kp3)/(ah**2+kp2*ah+kp2*kp3)
            aw=kw*fh1/ah-ah/fh1					            aw=kw*fh1/ah-ah/fh1
     !      ab=ta-ac-asi-ap-aw					     !      ab=ta-ac-asi-ap-aw
            ac=ta-ab-asi-ap-aw					            ac=ta-ab-asi-ap-aw
     !      ah1=tb*kb/ab-kb					     !      ah1=tb*kb/ab-kb

            ah1=k1/(2.0*ac)*((tc-ac)+sqrt((ac-tc)**2+4.0*ac*k	            ah1=k1/(2.0*ac)*((tc-ac)+sqrt((ac-tc)**2+4.0*ac*k
            IF(abs((ah1-ah)/ah) > 1.e-4) THEN			            IF(abs((ah1-ah)/ah) > 1.e-4) THEN
              ah=ah1						              ah=ah1

!            IF(abs(ah1-ah) > 1.e-6) THEN			!            IF(abs(ah1-ah) > 1.e-6) THEN
!              ah=ah+(ah1-ah)/10.0				!              ah=ah+(ah1-ah)/10.0
	      if(ah<0.0) then						      if(ah<0.0) then
		  print *, 'ah is error,i,j', i,j_global(j),a			  print *, 'ah is error,i,j', i,j_global(j),a
		stop								stop
	      endif							      endif
              nn=nn+1						              nn=nn+1
	      if(nn>50) then						      if(nn>50) then
		  print*,"the endless cycle",i,j_global(j),ah			  print*,"the endless cycle",i,j_global(j),ah
		  stop								  stop
	      endif							      endif
	      CYCLE doo							      CYCLE doo
            ELSE						            ELSE
              EXIT doo						              EXIT doo
            ENDIF						            ENDIF
          ENDDO doo  						          ENDDO doo  
      								      
          pco2o(i,j)=tc*ah**2/(k0*(ah**2+k1*ah+k1*k2))		          pco2o(i,j)=tc*ah**2/(k0*(ah**2+k1*ah+k1*k2))
        							        
        ENDDO							        ENDDO
       if(nx_proc==1) then					       if(nx_proc==1) then
        call exchange_2d(pco2o,1,1)				        call exchange_2d(pco2o,1,1)
         pco2o(1,j)  =pco2o(imm,j)				         pco2o(1,j)  =pco2o(imm,j)
         pco2o(imt,j)=pco2o(2,j)				         pco2o(imt,j)=pco2o(2,j)
       endif							       endif
      ENDDO							      ENDDO

#ifdef SPMD							#ifdef SPMD
        call exch_boundary(pco2o,1)				        call exch_boundary(pco2o,1)
#endif								#endif
!      								!      
!!!      CALL exchange_2d(pco2o)				!!!      CALL exchange_2d(pco2o)
!      								!      
#ifdef carbonDebug						#ifdef carbonDebug
#ifdef SPMD							#ifdef SPMD
      print*, "i,j,pco2o:",imt/2,jmt/2,pco2o(imt/2,jmt/2), &	      print*, "i,j,pco2o:",imt/2,jmt/2,pco2o(imt/2,jmt/2), &
                  "mytid=",mytid,"PCO2"				                  "mytid=",mytid,"PCO2"
#else								#else
      print*, "i,j,pco2o:",imt/2,jmt/2,pco2o(imt/2,jmt/2),"PC	      print*, "i,j,pco2o:",imt/2,jmt/2,pco2o(imt/2,jmt/2),"PC
#endif								#endif
#endif								#endif
#ifdef carbonDebug						#ifdef carbonDebug
#ifdef SPMD							#ifdef SPMD
            print*, 'subroutine pco2 end-----------------','m	            print*, 'subroutine pco2 end-----------------','m
#else								#else
            print*, 'subroutine pco2 end-----------------'	            print*, 'subroutine pco2 end-----------------'
#endif								#endif
#endif								#endif
  END SUBROUTINE OPCO2						  END SUBROUTINE OPCO2

! CVS: $Id: readybio.F90,v 2.1 2004/06/10 07:45:17 cvsroot Ex	! CVS: $Id: readybio.F90,v 2.1 2004/06/10 07:45:17 cvsroot Ex
  SUBROUTINE READYBIO(C2DTTS)					  SUBROUTINE READYBIO(C2DTTS)
!========================					!========================
! BIOSOURCE							! BIOSOURCE
!------------------------------------------------------------	!------------------------------------------------------------
!								!
! purpose: prepararion of calculating biological source		! purpose: prepararion of calculating biological source
!          calculate A0, A1, A2, B0, B1, B2 and C		!          calculate A0, A1, A2, B0, B1, B2 and C
!								!
! author: Zhao Liang@lapc 2004/05/30				! author: Zhao Liang@lapc 2004/05/30
! the iron is added by lyc in 05/2013				! the iron is added by lyc in 05/2013
!------------------------------------------------------------	!------------------------------------------------------------
! zb(1:km)=-zkp(2:km+1)						! zb(1:km)=-zkp(2:km+1)
! dzp(1:km)=zkp(1:km)-zkp(2:km+1)				! dzp(1:km)=zkp(1:km)-zkp(2:km+1)
!								!
! 0        ====================================== zb(0)		! 0        ====================================== zb(0)
! 1        ------------------- dzp(1)       zm(1)		! 1        ------------------- dzp(1)       zm(1)
! 1        ====================================== zb(1)		! 1        ====================================== zb(1)
!          -------------------					!          -------------------
!          ====================================== 		!          ====================================== 
! kmmix    ------------------- dzp(kmmix)   zm(kmmix)		! kmmix    ------------------- dzp(kmmix)   zm(kmmix)
! kmmix    ====================================== zb(kmmix) -	! kmmix    ====================================== zb(kmmix) -
! kmmix+1  ------------------- dzp(kmmix+1) zm(kmmix+1) 	! kmmix+1  ------------------- dzp(kmmix+1) zm(kmmix+1) 
! kmmix+1  ====================================== zb(kmmix+1)	! kmmix+1  ====================================== zb(kmmix+1)
!          ------------------- 					!          ------------------- 
!          ====================================== 		!          ====================================== 
! km       ------------------- dzp(km)      zm(km)		! km       ------------------- dzp(km)      zm(km)
! km       ====================================== zb(km)	! km       ====================================== zb(km)
!------------------------------------------------------------	!------------------------------------------------------------
#include <def-undef.h>       					#include <def-undef.h>       
!								!
      USE param_mod						      USE param_mod
      USE pconst_mod						      USE pconst_mod
      USE tracer_mod						      USE tracer_mod
      USE carbon_mod						      USE carbon_mod
      USE cforce_mod						      USE cforce_mod
      USE grids_pt_mod						      USE grids_pt_mod
#ifdef SPMD      						#ifdef SPMD      
      USE msg_mod,only:mpi_comm_ocn				      USE msg_mod,only:mpi_comm_ocn
#endif      							#endif      
     								     
!								!
!------------------------------------------------------------	!------------------------------------------------------------
      IMPLICIT NONE						      IMPLICIT NONE
#include <netcdf.inc>      					#include <netcdf.inc>      
!#ifdef SPMD      						!#ifdef SPMD      
!#include <mpif.h>						!#include <mpif.h>
!#endif      							!#endif      
!      								!      
#ifdef carbonBio						#ifdef carbonBio

      real,parameter::S0=35.0					      real,parameter::S0=35.0
!      real,dimension(km)::zb,zm				!      real,dimension(km)::zb,zm
      real::dtts,scalet,zer,r_cpr				      real::dtts,scalet,zer,r_cpr
!lyc2009.07.07      real::inta1,sr				!lyc2009.07.07      real::inta1,sr
      real::sr,ze						      real::sr,ze
      real,dimension(:,:),allocatable::inta1			      real,dimension(:,:),allocatable::inta1
      real,dimension(:,:,:),allocatable::c2_b			      real,dimension(:,:,:),allocatable::c2_b
!     kappa_a(1:km)						!     kappa_a(1:km)
#ifdef anderson1995						#ifdef anderson1995
      real(kind=8)::prodze,ldoczb,prod0,ldoc0			      real(kind=8)::prodze,ldoczb,prod0,ldoc0
#endif								#endif
!     r_cap(1:km),delta_a(1:km)					!     r_cap(1:km),delta_a(1:km)
      real,dimension(imt,jmt,km)::atmp				      real,dimension(imt,jmt,km)::atmp
      real(kind=8),dimension(km)::intatmp,inta0			      real(kind=8),dimension(km)::intatmp,inta0
!      real(kind=8),dimension(km)::sdxdy			!      real(kind=8),dimension(km)::sdxdy
      real::tmpf,tmpd						      real::tmpf,tmpd
      real(kind=8),dimension(km)::intatmp0,inta00		      real(kind=8),dimension(km)::intatmp0,inta00
!      real(kind=8),dimension(km)::sdxdy0			!      real(kind=8),dimension(km)::sdxdy0
!      								!      
! add new compent by lyc					! add new compent by lyc
      real(kind=8):: va0tmp,va0sum,vctmp,vcsum,delcaco3,delta	      real(kind=8):: va0tmp,va0sum,vctmp,vcsum,delcaco3,delta
      real(kind=8):: vb0tmp,vb0sum,deltab0			      real(kind=8):: vb0tmp,vb0sum,deltab0
!      integer:: kb0						!      integer:: kb0
!lyc 2013.05							!lyc 2013.05
      real::Fe_b,Fe_c,Fe_free,scb,sc				      real::Fe_b,Fe_c,Fe_free,scb,sc
!      real,parameter::feb=0.00384 ng-1cm-1 !moore 2008		!      real,parameter::feb=0.00384 ng-1cm-1 !moore 2008
      real,parameter::feb=0.015/86400/365!kg/ug/ml		      real,parameter::feb=0.015/86400/365!kg/ug/ml
      real::nut_f  !nutrient forcing				      real::nut_f  !nutrient forcing
      real::nut_b  !basic nutrient for bio-production		      real::nut_b  !basic nutrient for bio-production
      real,dimension(imt,jmt,kmp1)::dust_out			      real,dimension(imt,jmt,kmp1)::dust_out
      real,dimension(imt,jmt)::dust_soft,dust_hard		      real,dimension(imt,jmt)::dust_soft,dust_hard
      real::sqfe						      real::sqfe
      real::scal						      real::scal

      real::c2dtts						      real::c2dtts
      allocate(inta1(imt,jmt),c2_b(imt,jmt,km))			      allocate(inta1(imt,jmt),c2_b(imt,jmt,km))
!lyc2013.05      kb0=24						!lyc2013.05      kb0=24
      scalet=1.0/(tau_b*86400.0)				      scalet=1.0/(tau_b*86400.0)
      ze=zb(kmmix)						      ze=zb(kmmix)
      zer=1.0/ze						      zer=1.0/ze
      r_cpr=1.0/r_cp						      r_cpr=1.0/r_cp

!								!
!      if (isp >= 1)then					!      if (isp >= 1)then
      IF (mod(ISP,15)/=0) THEN					      IF (mod(ISP,15)/=0) THEN
         dtts = dts * 2.0					         dtts = dts * 2.0
      else							      else
         dtts = dts						         dtts = dts
      endif							      endif
!lyc 2013.05      						!lyc 2013.05      
!      zb(1)=dzp(1)						!      zb(1)=dzp(1)
!      do k=2,km						!      do k=2,km
!        zb(k)=zb(k-1)+dzp(k)					!        zb(k)=zb(k-1)+dzp(k)
!      enddo							!      enddo
!      do k=1,km						!      do k=1,km
!        zm(k)=-zkt(k)						!        zm(k)=-zkt(k)
!      enddo							!      enddo
!!lyc-----------------------------------------			!!lyc-----------------------------------------
!!calculate the volume of sea water under 1500m			!!calculate the volume of sea water under 1500m
!   if(mytid==0) then						!   if(mytid==0) then
!     vsea2000=0.0						!     vsea2000=0.0
!     do k=kb0,km						!     do k=kb0,km
!       do j=1,jmt_global					!       do j=1,jmt_global
!         do i=1,imm						!         do i=1,imm
!         if(vit_global(i,j,k)<0.5) cycle			!         if(vit_global(i,j,k)<0.5) cycle
!          vsea2000=vsea2000+dxdyt_global(j)*dzp(k)		!          vsea2000=vsea2000+dxdyt_global(j)*dzp(k)
!         enddo							!         enddo
!       enddo							!       enddo
!     enddo							!     enddo
!   endif							!   endif
!lyc 2013.05							!lyc 2013.05
!------------------------------------------------------------	!------------------------------------------------------------
!     This subroutine is used to calculate Ax, Bx and C		!     This subroutine is used to calculate Ax, Bx and C
!------------------------------------------------------------	!------------------------------------------------------------
!								!
!     calculate A1 - new primary production        		!     calculate A1 - new primary production        
#ifdef murnane1999        					#ifdef murnane1999        
      do k=1,kmmix						      do k=1,kmmix
        do j=1,jmt						        do j=1,jmt
          do i=2,imm						          do i=2,imm
            if(vit(i,j,k) < 0.5) cycle				            if(vit(i,j,k) < 0.5) cycle
            if (ptb(i,j,k,2) > po4force(i,j,k).and.po4force(i	            if (ptb(i,j,k,2) > po4force(i,j,k).and.po4force(i
              a1_b(i,j,k)=scalet*(pt(i,j,k,2)-po4force(i,j,k)	              a1_b(i,j,k)=scalet*(pt(i,j,k,2)-po4force(i,j,k)
            else						            else
              a1_b(i,j,k)=0.0					              a1_b(i,j,k)=0.0
            endif						            endif
          enddo							          enddo
        enddo							        enddo
      enddo							      enddo
!      if(mytid==0) print *, 'a1_b(85,2,1)',a1_b(85,2,1)	!      if(mytid==0) print *, 'a1_b(85,2,1)',a1_b(85,2,1)
#ifdef carbonDebug						#ifdef carbonDebug
#ifdef SPMD							#ifdef SPMD
      print*, 'subroutine readybio---------------------------	      print*, 'subroutine readybio---------------------------
      print*, 'i,j,1,ptb(po4),po4force',imt/2,jmt/2,ptb(imt/2	      print*, 'i,j,1,ptb(po4),po4force',imt/2,jmt/2,ptb(imt/2
              'mytid=',mytid      				              'mytid=',mytid      
#else								#else
      print*, 'subroutine readybio---------------------------	      print*, 'subroutine readybio---------------------------
      print*, 'i,j,1,ptb(po4),po4force',imt/2,jmt/2,ptb(imt/2	      print*, 'i,j,1,ptb(po4),po4force',imt/2,jmt/2,ptb(imt/2
#endif								#endif
#endif								#endif

#else								#else
!the new production is a funtion of I,PO4			!the new production is a funtion of I,PO4
!the new production is a funtion of I,PO4			!the new production is a funtion of I,PO4
!  EP=r0*Lf*[po4]**2/(hf+[po4])*exp(-kz)*dzp*(t+2.0)/(t+10.)	!  EP=r0*Lf*[po4]**2/(hf+[po4])*exp(-kz)*dzp*(t+2.0)/(t+10.)
!------------------------------------------------------------	!------------------------------------------------------------
      nut_f=0.0							      nut_f=0.0
      do k=1,kmmix						      do k=1,kmmix
        do j=1,jmt						        do j=1,jmt
          do i=2,imm						          do i=2,imm
            a1_b(i,j,k)=0.0					            a1_b(i,j,k)=0.0
            if(vit(i,j,k) < 0.5.or.pt(i,j,k,2)<0.1E-6) cycle	            if(vit(i,j,k) < 0.5.or.pt(i,j,k,2)<0.1E-6) cycle
#ifdef Felimit							#ifdef Felimit
            if (pt(i,j,k,6)>0.0) then				            if (pt(i,j,k,6)>0.0) then
            if(pt(i,j,k,6)<0.2*1.0E-3) then 			            if(pt(i,j,k,6)<0.2*1.0E-3) then 
            r_fec(i,j)=2.0*1.0E-6				            r_fec(i,j)=2.0*1.0E-6
            r_fep(i,j)=r_fec(i,j)*r_cp				            r_fep(i,j)=r_fec(i,j)*r_cp
            endif						            endif
            nut_f=min(pt(i,j,k,2)/(hf/1.025+pt(i,j,k,2)),pt(i	            nut_f=min(pt(i,j,k,2)/(hf/1.025+pt(i,j,k,2)),pt(i
            nut_b=min(pt(i,j,k,2),pt(i,j,k,6)/r_fep(i,j))	            nut_b=min(pt(i,j,k,2),pt(i,j,k,6)/r_fep(i,j))
            else						            else
            nut_f=0.0						            nut_f=0.0
            nut_b=0.0						            nut_b=0.0
            endif						            endif
#else								#else
            nut_f=pt(i,j,k,2)/(hf/1.025+pt(i,j,k,2))		            nut_f=pt(i,j,k,2)/(hf/1.025+pt(i,j,k,2))
            nut_b=pt(i,j,k,2)					            nut_b=pt(i,j,k,2)
#endif								#endif
            a1_b(i,j,k)=ar0*sint(j)*nut_b*nut_f*(at(i,j,k,1)+	            a1_b(i,j,k)=ar0*sint(j)*nut_b*nut_f*(at(i,j,k,1)+
                        *exp(-zm(k)/zdc)			                        *exp(-zm(k)/zdc)
#ifdef Felimit							#ifdef Felimit
            if((pt(i,j,k,2)-a1_b(i,j,k)*c2dtts)<0.0.or.(pt(i,	            if((pt(i,j,k,2)-a1_b(i,j,k)*c2dtts)<0.0.or.(pt(i,
            a1_b(i,j,k)=min(pt(i,j,k,2)/c2dtts,pt(i,j,k,6)/c2	            a1_b(i,j,k)=min(pt(i,j,k,2)/c2dtts,pt(i,j,k,6)/c2
            endif						            endif
#endif								#endif
          enddo							          enddo
        enddo							        enddo
      enddo							      enddo
#endif								#endif
#ifdef SPMD							#ifdef SPMD
      call exch_boundary(a1_b,km)				      call exch_boundary(a1_b,km)
#endif								#endif
!     calculate A2 - flux of POP below the euphotic zone     	!     calculate A2 - flux of POP below the euphotic zone     
      do j=1,jmt						      do j=1,jmt
        do i=2,imm						        do i=2,imm
        if(vit(i,j,1) < 0.5) cycle				        if(vit(i,j,1) < 0.5) cycle
          inta1(i,j)=0.0					          inta1(i,j)=0.0
          do k=1,kmmix						          do k=1,kmmix
            inta1(i,j)=inta1(i,j)+a1_b(i,j,k)*dzp(k)		            inta1(i,j)=inta1(i,j)+a1_b(i,j,k)*dzp(k)
          enddo							          enddo
          do k=kmmix,km						          do k=kmmix,km
            a2_b(i,j,k)=(1.0-sigma_b)*inta1(i,j)*(zb(k)*zer)*	            a2_b(i,j,k)=(1.0-sigma_b)*inta1(i,j)*(zb(k)*zer)*
          enddo							          enddo
        enddo							        enddo
      enddo							      enddo
!     calculate A0       					!     calculate A0       
      do k=1,kmmix						      do k=1,kmmix
        do j=1,jmt						        do j=1,jmt
          do i=2,imm						          do i=2,imm
            if(vit(i,j,k) < 0.5) cycle				            if(vit(i,j,k) < 0.5) cycle
!lyc20140404							!lyc20140404
             if(k<ITNU(I,J))then				             if(k<ITNU(I,J))then
            a0_b(i,j,k)=(1.0-sigma_b)*a1_b(i,j,k)		            a0_b(i,j,k)=(1.0-sigma_b)*a1_b(i,j,k)
             else						             else
            a0_b(i,j,k)=-inta1(i,j)/dzp(k)			            a0_b(i,j,k)=-inta1(i,j)/dzp(k)
             endif						             endif
          enddo							          enddo
        enddo							        enddo
      enddo							      enddo
      do k=kmmix+1,km						      do k=kmmix+1,km
        do j=1,jmt						        do j=1,jmt
          do i=2,imm						          do i=2,imm
            if(vit(i,j,k) < 0.5) cycle				            if(vit(i,j,k) < 0.5) cycle
!lyc20140404							!lyc20140404
            if(k< ITNU(i,j)) then				            if(k< ITNU(i,j)) then
            a0_b(i,j,k)=-(a2_b(i,j,k-1)-a2_b(i,j,k))/dzp(k)	            a0_b(i,j,k)=-(a2_b(i,j,k-1)-a2_b(i,j,k))/dzp(k)
            else						            else
            a0_b(i,j,k)=-a2_b(i,j,k-1)/dzp(k)			            a0_b(i,j,k)=-a2_b(i,j,k-1)/dzp(k)
            endif						            endif
          enddo							          enddo
        enddo							        enddo
      enddo							      enddo
#ifdef SPMD							#ifdef SPMD
     call exch_boundary(a0_b,km)				     call exch_boundary(a0_b,km)
     call exch_boundary(a2_b,km)				     call exch_boundary(a2_b,km)
#endif								#endif
!lyc--------------------------					!lyc--------------------------
! calculate delta a0						! calculate delta a0
!lyc20140404							!lyc20140404
!      va0sum=0.0						!      va0sum=0.0
!      do k=1,km						!      do k=1,km
!        do j=2,jem						!        do j=2,jem
!          do  i=2,imm						!          do  i=2,imm
!            if(vit(i,j,k)<0.5) cycle				!            if(vit(i,j,k)<0.5) cycle
!            va0sum=va0sum+a0_b(i,j,k)*dxdyt(j)*dzp(k)		!            va0sum=va0sum+a0_b(i,j,k)*dxdyt(j)*dzp(k)
!          enddo						!          enddo
!        enddo							!        enddo
!      enddo							!      enddo
!       call mpi_barrier(mpi_comm_ocn,ierr)			!       call mpi_barrier(mpi_comm_ocn,ierr)
!       call mpi_reduce(va0sum,va0tmp,1,mpi_real8,mpi_sum,0,m	!       call mpi_reduce(va0sum,va0tmp,1,mpi_real8,mpi_sum,0,m
!       if(mytid==0) then					!       if(mytid==0) then
!          deltaa0=va0tmp/vsea2000				!          deltaa0=va0tmp/vsea2000
!       endif							!       endif
!       call mpi_bcast(deltaa0,1,mpi_real8,0,mpi_comm_ocn,ier	!       call mpi_bcast(deltaa0,1,mpi_real8,0,mpi_comm_ocn,ier
!       do k=kb0,km						!       do k=kb0,km
!         do j=1,jet						!         do j=1,jet
!           do i=2,imm						!           do i=2,imm
!           if(vit(i,j,k)<0.5) cycle				!           if(vit(i,j,k)<0.5) cycle
!            a0_b(i,j,k)=a0_b(i,j,k)-deltaa0			!            a0_b(i,j,k)=a0_b(i,j,k)-deltaa0
!           enddo						!           enddo
!         enddo							!         enddo
!       enddo							!       enddo
   								   
!     calculate kappa_b(km)					!     calculate kappa_b(km)
#ifdef anderson1995						#ifdef anderson1995
!      kappa_b(1:km)=1.0/(11.2*365.0*86400.0)			!      kappa_b(1:km)=1.0/(11.2*365.0*86400.0)
       prodze=0.0						       prodze=0.0
       do k=1,kmmix						       do k=1,kmmix
         do j=jsm,jem						         do j=jsm,jem
           do i=2,imm						           do i=2,imm
             if(vit(i,j,k) < 0.5) cycle  			             if(vit(i,j,k) < 0.5) cycle  
             prodze=prodze+a1_b(i,j,k)*dxdyt(j)*dzp(k)		             prodze=prodze+a1_b(i,j,k)*dxdyt(j)*dzp(k)
           enddo						           enddo
         enddo							         enddo
       enddo							       enddo
       prodze=r_cp*sigma_b*prodze				       prodze=r_cp*sigma_b*prodze
       								       
       ldoczb=0.0						       ldoczb=0.0
       do k=kmmix+1,km						       do k=kmmix+1,km
         do j=jsm,jem						         do j=jsm,jem
           do i=2,imm						           do i=2,imm
             if(vit(i,j,k) < 0.5) cycle  			             if(vit(i,j,k) < 0.5) cycle  
             ldoczb=ldoczb+pt(i,j,k,3)*dxdyt(j)*dzp(k)*exp((z	             ldoczb=ldoczb+pt(i,j,k,3)*dxdyt(j)*dzp(k)*exp((z
           enddo						           enddo
         enddo							         enddo
       enddo							       enddo
#ifdef SPMD							#ifdef SPMD
       prod0=0.0						       prod0=0.0
       ldoc0=0.0						       ldoc0=0.0
       call mpi_barrier(mpi_comm_ocn,ierr)			       call mpi_barrier(mpi_comm_ocn,ierr)
       call mpi_reduce(prodze,prod0,1,mpi_double_precision,mp	       call mpi_reduce(prodze,prod0,1,mpi_double_precision,mp
       call mpi_reduce(ldoczb,ldoc0,1,mpi_double_precision,mp	       call mpi_reduce(ldoczb,ldoc0,1,mpi_double_precision,mp

       								       
       if(mytid==0) then					       if(mytid==0) then
         kappa_b(1:km)=0.0					         kappa_b(1:km)=0.0
         do k=kmmix+1,km					         do k=kmmix+1,km
           kappa_b(k)=prod0/ldoc0*exp((ze-zm(k))/750.0)		           kappa_b(k)=prod0/ldoc0*exp((ze-zm(k))/750.0)
	 enddo								 enddo
#ifdef carbonDebug						#ifdef carbonDebug
       print*,'prod0=',prod0,'ldoc0=',ldoc0,'mytid=',mytid	       print*,'prod0=',prod0,'ldoc0=',ldoc0,'mytid=',mytid
#endif								#endif
       endif							       endif
       call mpi_barrier(mpi_comm_ocn,ierr)			       call mpi_barrier(mpi_comm_ocn,ierr)
       call mpi_bcast(kappa_b,km,mpi_real8,0,mpi_comm_ocn,ier	       call mpi_bcast(kappa_b,km,mpi_real8,0,mpi_comm_ocn,ier
#else       							#else       
       kappa_b(1:km)=0.0					       kappa_b(1:km)=0.0
       do k=kmmix+1,km						       do k=kmmix+1,km
         kappa_b(k)=prod0/ldoc0*exp((ze-zm(k))/750.0)		         kappa_b(k)=prod0/ldoc0*exp((ze-zm(k))/750.0)
       enddo							       enddo
#endif								#endif
#endif								#endif
!     calculate B1 - production of LDOC in the euphotic zone 	!     calculate B1 - production of LDOC in the euphotic zone 
      do k=1,kmmix						      do k=1,kmmix
        do j=1,jmt						        do j=1,jmt
          do i=2,imm						          do i=2,imm
            if(vit(i,j,k) < 0.5) cycle				            if(vit(i,j,k) < 0.5) cycle
            b1_b(i,j,k)=r_cp*sigma_b*a1_b(i,j,k)		            b1_b(i,j,k)=r_cp*sigma_b*a1_b(i,j,k)
          enddo							          enddo
        enddo							        enddo
      enddo							      enddo
!     calculate B2 - LDOC remineralization      		!     calculate B2 - LDOC remineralization      
      do k=1,km							      do k=1,km
        do j=1,jmt						        do j=1,jmt
          do i=2,imm						          do i=2,imm
            if(vit(i,j,k) < 0.5) cycle				            if(vit(i,j,k) < 0.5) cycle
            if(pt(i,j,k,3) > 0.0) then				            if(pt(i,j,k,3) > 0.0) then
              b2_b(i,j,k)=kappa_b(k)*pt(i,j,k,3)		              b2_b(i,j,k)=kappa_b(k)*pt(i,j,k,3)
            else						            else
              b2_b(i,j,k)=0.0  					              b2_b(i,j,k)=0.0  
            endif						            endif
          enddo							          enddo
        enddo							        enddo
      enddo							      enddo
!     calculate B0       					!     calculate B0       
      b0_b(:,:,:)=b1_b(:,:,:)-b2_b(:,:,:)			      b0_b(:,:,:)=b1_b(:,:,:)-b2_b(:,:,:)
#ifdef SPMD							#ifdef SPMD
      CALL EXCH_BOUNDARY(b0_b,km)				      CALL EXCH_BOUNDARY(b0_b,km)
      CALL EXCH_BOUNDARY(b1_b,km)				      CALL EXCH_BOUNDARY(b1_b,km)
      CALL EXCH_BOUNDARY(b2_b,km)				      CALL EXCH_BOUNDARY(b2_b,km)
#endif								#endif
!lyc--------------------------					!lyc--------------------------
      vb0sum=0.0						      vb0sum=0.0
      do k=1,km							      do k=1,km
        do j=2,jem						        do j=2,jem
          do  i=2,imm						          do  i=2,imm
            if(vit(i,j,k)<0.5) cycle				            if(vit(i,j,k)<0.5) cycle
            vb0sum=vb0sum+b0_b(i,j,k)*dxdyt(j)*dzp(k)		            vb0sum=vb0sum+b0_b(i,j,k)*dxdyt(j)*dzp(k)
          enddo							          enddo
        enddo							        enddo
      enddo							      enddo
       call mpi_barrier(mpi_comm_ocn,ierr)			       call mpi_barrier(mpi_comm_ocn,ierr)
       call mpi_reduce(vb0sum,vb0tmp,1,mpi_real8,mpi_sum,0,mp	       call mpi_reduce(vb0sum,vb0tmp,1,mpi_real8,mpi_sum,0,mp
       if(mytid==0) then					       if(mytid==0) then
          deltab0=vb0tmp/vsea2000				          deltab0=vb0tmp/vsea2000
       endif							       endif
       call mpi_bcast(deltab0,1,mpi_real8,0,mpi_comm_ocn,ierr	       call mpi_bcast(deltab0,1,mpi_real8,0,mpi_comm_ocn,ierr
       do k=kb0,km						       do k=kb0,km
         do j=1,jet						         do j=1,jet
           do i=1,imt						           do i=1,imt
           if(vit(i,j,k)<0.5) cycle				           if(vit(i,j,k)<0.5) cycle
            b0_b(i,j,k)=b0_b(i,j,k)-deltab0			            b0_b(i,j,k)=b0_b(i,j,k)-deltab0
           enddo						           enddo
         enddo							         enddo
       enddo							       enddo
!lyc----------------------------------------			!lyc----------------------------------------
! calculate the calcite						! calculate the calcite
#ifdef progca							#ifdef progca
!     calculate r_cap(1:km)					!     calculate r_cap(1:km)
      do k=1,km							      do k=1,km
        do j=1,jmt						        do j=1,jmt
          do i=2,imm						          do i=2,imm
            if(vit(i,j,k) < 0.5) cycle  			            if(vit(i,j,k) < 0.5) cycle  
            sr=at(i,j,k,2)*1000.0+35.0				            sr=at(i,j,k,2)*1000.0+35.0
            atmp(i,j,k)=(pt(i,j,k,4)+r_np*dtts* &		            atmp(i,j,k)=(pt(i,j,k,4)+r_np*dtts* &
                        (a0_b(i,j,k)+b0_b(i,j,k)*r_cpr))!*S0/	                        (a0_b(i,j,k)+b0_b(i,j,k)*r_cpr))!*S0/
          enddo							          enddo
        enddo							        enddo
      enddo							      enddo
#ifdef carbonDebug						#ifdef carbonDebug
#ifdef SPMD							#ifdef SPMD
      print*, '----------------------------------------------	      print*, '----------------------------------------------
      print*,'i,j,1,ptb(TA),a0,b0,at(S)',imt/2,jmt/2,ptb(imt/	      print*,'i,j,1,ptb(TA),a0,b0,at(S)',imt/2,jmt/2,ptb(imt/
              a0_b(imt/2,jmt/2,1),b0_b(imt/2,jmt/2,1),at(imt/	              a0_b(imt/2,jmt/2,1),b0_b(imt/2,jmt/2,1),at(imt/
              'mytid=',mytid,'READYBIO'				              'mytid=',mytid,'READYBIO'
      print*,'i,j,10,ptb(TA),a0,b0,at(S)',imt/2,jmt/2,ptb(imt	      print*,'i,j,10,ptb(TA),a0,b0,at(S)',imt/2,jmt/2,ptb(imt
              a0_b(imt/2,jmt/2,10),b0_b(imt/2,jmt/2,10),at(im	              a0_b(imt/2,jmt/2,10),b0_b(imt/2,jmt/2,10),at(im
              'mytid=',mytid,'READYBIO'				              'mytid=',mytid,'READYBIO'
      print*,'i,j,1,kappa,a1,b1',imt/2,jmt/2,kappa_b(1),a1_b(	      print*,'i,j,1,kappa,a1,b1',imt/2,jmt/2,kappa_b(1),a1_b(
              b1_b(imt/2,jmt/2,1),'mytid=',mytid		              b1_b(imt/2,jmt/2,1),'mytid=',mytid
      print*,'i,j,10,kappa,a2,b2',imt/2,jmt/2,kappa_b(10),a2_	      print*,'i,j,10,kappa,a2,b2',imt/2,jmt/2,kappa_b(10),a2_
              b2_b(imt/2,jmt/2,10),'mytid=',mytid		              b2_b(imt/2,jmt/2,10),'mytid=',mytid
#else								#else
      print*, '----------------------------------------------	      print*, '----------------------------------------------
      print*,'i,j,1,ptb(TA),a0,b0,at(S)',imt/2,jmt/2,ptb(imt/	      print*,'i,j,1,ptb(TA),a0,b0,at(S)',imt/2,jmt/2,ptb(imt/
              a0_b(imt/2,jmt/2,1),b0_b(imt/2,jmt/2,1),at(imt/	              a0_b(imt/2,jmt/2,1),b0_b(imt/2,jmt/2,1),at(imt/
              'READYBIO'					              'READYBIO'
      print*,'i,j,10,ptb(TA),a0,b0,at(S)',imt/2,jmt/2,ptb(imt	      print*,'i,j,10,ptb(TA),a0,b0,at(S)',imt/2,jmt/2,ptb(imt
              a0_b(imt/2,jmt/2,10),b0_b(imt/2,jmt/2,10),at(im	              a0_b(imt/2,jmt/2,10),b0_b(imt/2,jmt/2,10),at(im
              'READYBIO'					              'READYBIO'
      print*,'i,j,1,kappa,a1,b1',imt/2,jmt/2,kappa_b(1),a1_b(	      print*,'i,j,1,kappa,a1,b1',imt/2,jmt/2,kappa_b(1),a1_b(
              b1_b(imt/2,jmt/2,1)				              b1_b(imt/2,jmt/2,1)
      print*,'i,j,10,kappa,a2,b2',imt/2,jmt/2,kappa_b(10),a2_	      print*,'i,j,10,kappa,a2,b2',imt/2,jmt/2,kappa_b(10),a2_
              b2_b(imt/2,jmt/2,10)				              b2_b(imt/2,jmt/2,10)
#endif								#endif
#endif								#endif
      do k=1,km							      do k=1,km
       intatmp(k)=0.0						       intatmp(k)=0.0
       inta0(k)=0.0						       inta0(k)=0.0
       sdxdy(k)=0.0						       sdxdy(k)=0.0
       intatmp0(k)=0.0						       intatmp0(k)=0.0
       inta00(k)=0.0						       inta00(k)=0.0
       sdxdy0(k)=0.0						       sdxdy0(k)=0.0
       do j=jsm,jem						       do j=jsm,jem
         do i=2,imm						         do i=2,imm
           if(vit(i,j,k) < 0.5) cycle				           if(vit(i,j,k) < 0.5) cycle
           intatmp(k)=intatmp(k)+atmp(i,j,k)*dxdyt(j)		           intatmp(k)=intatmp(k)+atmp(i,j,k)*dxdyt(j)
           inta0(k)=inta0(k)+a0_b(i,j,k)*dxdyt(j)		           inta0(k)=inta0(k)+a0_b(i,j,k)*dxdyt(j)
           sdxdy(k)=sdxdy(k)+dxdyt(j)				           sdxdy(k)=sdxdy(k)+dxdyt(j)
         enddo							         enddo
       enddo							       enddo
      enddo							      enddo

#ifdef SPMD      						#ifdef SPMD      
      call mpi_barrier(mpi_comm_ocn,ierr)			      call mpi_barrier(mpi_comm_ocn,ierr)
      call mpi_reduce(intatmp,intatmp0,km,mpi_double_precisio	      call mpi_reduce(intatmp,intatmp0,km,mpi_double_precisio
      call mpi_reduce(inta0,inta00,km,mpi_double_precision,mp	      call mpi_reduce(inta0,inta00,km,mpi_double_precision,mp
      if(mytid==0) then						      if(mytid==0) then
#endif								#endif
        do k=1,km						        do k=1,km
#ifdef SPMD      						#ifdef SPMD      
          intatmp(k)=intatmp0(k)/sdxdy0(k)  			          intatmp(k)=intatmp0(k)/sdxdy0(k)  
          inta0(k)=inta00(k)/sdxdy0(k)  			          inta0(k)=inta00(k)/sdxdy0(k)  
#else								#else
          intatmp(k)=intatmp(k)/sdxdy(k)  			          intatmp(k)=intatmp(k)/sdxdy(k)  
          inta0(k)=inta0(k)/sdxdy(k)  				          inta0(k)=inta0(k)/sdxdy(k)  
#endif								#endif
          if(abs(inta0(k)) > 0.0) then				          if(abs(inta0(k)) > 0.0) then
            r_cap(k)=(intatmp(k)-taforce(k))/inta0(k)*0.5/dtt	            r_cap(k)=(intatmp(k)-taforce(k))/inta0(k)*0.5/dtt
          else							          else
            r_cap(k)=0.0   					            r_cap(k)=0.0   
          endif							          endif
        enddo							        enddo
        							        
!     calculate delta_a(1:km)					!     calculate delta_a(1:km)
        delta_a(1:km)=0.0					        delta_a(1:km)=0.0
        do k=1,kmmix						        do k=1,kmmix
          if(intatmp(k) > taforce(k)) delta_a(k)=1.0		          if(intatmp(k) > taforce(k)) delta_a(k)=1.0
        enddo							        enddo
        do k=kmmix+1,km						        do k=kmmix+1,km
          if(intatmp(k) < taforce(k)) delta_a(k)=1.0		          if(intatmp(k) < taforce(k)) delta_a(k)=1.0
        enddo							        enddo
        tmpf=0.0						        tmpf=0.0
        do k=1,kmmix						        do k=1,kmmix
          if(delta_a(k) < 0.5) cycle				          if(delta_a(k) < 0.5) cycle
          tmpf=tmpf+(intatmp(k)-taforce(k))			          tmpf=tmpf+(intatmp(k)-taforce(k))
        enddo							        enddo
        tmpd=0.0						        tmpd=0.0
        do k=kmmix+1,km						        do k=kmmix+1,km
          if(delta_a(k) < 0.5) cycle				          if(delta_a(k) < 0.5) cycle
          tmpd=tmpd+(taforce(k)-intatmp(k))			          tmpd=tmpd+(taforce(k)-intatmp(k))
          if(tmpd > tmpf) then					          if(tmpd > tmpf) then
            delta_a(k)=(tmpf-(tmpd-(taforce(k)-intatmp(k))))/	            delta_a(k)=(tmpf-(tmpd-(taforce(k)-intatmp(k))))/
#ifdef SPMD          						#ifdef SPMD          
            if(delta_a(k) > 1.0) print*,"delta_a error!",delt	            if(delta_a(k) > 1.0) print*,"delta_a error!",delt
#else								#else
            if(delta_a(k) > 1.0) print*,"delta_a error!",delt	            if(delta_a(k) > 1.0) print*,"delta_a error!",delt
#endif								#endif
            if(k<km) delta_a(k+1:km)=0.0			            if(k<km) delta_a(k+1:km)=0.0

            exit						            exit
          endif							          endif
        enddo							        enddo
#ifdef SPMD      						#ifdef SPMD      
#ifdef carbonDebug 						#ifdef carbonDebug 
#ifdef SPMD							#ifdef SPMD
        print*, '--------------------------------------------	        print*, '--------------------------------------------
        print*, 'intatmp=',intatmp(1:km),'mytid=',mytid		        print*, 'intatmp=',intatmp(1:km),'mytid=',mytid
        print*, 'taforce=',taforce(1:km),'mytid=',mytid		        print*, 'taforce=',taforce(1:km),'mytid=',mytid
        print*, 'inta0=',inta0(1:km),'mytid=',mytid		        print*, 'inta0=',inta0(1:km),'mytid=',mytid
        print*, 'r_cap=',r_cap(1:km),'mytid=',mytid		        print*, 'r_cap=',r_cap(1:km),'mytid=',mytid
        print*, 'delta_a=',delta_a(1:km),'mytid=',mytid		        print*, 'delta_a=',delta_a(1:km),'mytid=',mytid
#else								#else
        print*, '--------------------------------------------	        print*, '--------------------------------------------
        print*, 'intatmp=',intatmp(1:km)			        print*, 'intatmp=',intatmp(1:km)
        print*, 'taforce=',taforce(1:km)			        print*, 'taforce=',taforce(1:km)
        print*, 'inta0=',inta0(1:km)				        print*, 'inta0=',inta0(1:km)
        print*, 'r_cap=',r_cap(1:km)				        print*, 'r_cap=',r_cap(1:km)
        print*, 'delta_a=',delta_a(1:km)			        print*, 'delta_a=',delta_a(1:km)
#endif								#endif
#endif								#endif
      endif							      endif

      call mpi_barrier(mpi_comm_ocn,ierr)			      call mpi_barrier(mpi_comm_ocn,ierr)
      call mpi_bcast(r_cap,km,mpi_real8,0,mpi_comm_ocn,ierr)	      call mpi_bcast(r_cap,km,mpi_real8,0,mpi_comm_ocn,ierr)
      call mpi_bcast(delta_a,km,mpi_real8,0,mpi_comm_ocn,ierr	      call mpi_bcast(delta_a,km,mpi_real8,0,mpi_comm_ocn,ierr
#endif								#endif
      								      
!     calculate C       					!     calculate C       
      do k=1,km							      do k=1,km
        do j=1,jmt						        do j=1,jmt
          do i=2,imm						          do i=2,imm
            if(vit(i,j,k) < 0.5) cycle				            if(vit(i,j,k) < 0.5) cycle
            c_b(i,j,k)=delta_a(k)*r_cap(k)*a0_b(i,j,k)		            c_b(i,j,k)=delta_a(k)*r_cap(k)*a0_b(i,j,k)
          enddo							          enddo
        enddo							        enddo
      enddo							      enddo
#else								#else
     do k=1,kmmix						     do k=1,kmmix
        do j=1,jmt						        do j=1,jmt
           do i=2,imm						           do i=2,imm
            if(vit(i,j,k)<0.5) cycle				            if(vit(i,j,k)<0.5) cycle
            c_b(i,j,k)=r_rain*r_cp*a0_b(i,j,k)			            c_b(i,j,k)=r_rain*r_cp*a0_b(i,j,k)
           enddo						           enddo
        enddo							        enddo
     enddo							     enddo
!----------------------------------------			!----------------------------------------
! the calcite downward flux					! the calcite downward flux
     do k=kmmix,km						     do k=kmmix,km
       do j=1,jmt						       do j=1,jmt
         do i=2,imm						         do i=2,imm
            if(vit(i,j,k)<0.5) cycle				            if(vit(i,j,k)<0.5) cycle
            c2_b(i,j,k)=r_rain*r_cp*(1-sigma_b)*inta1(i,j)*ex	            c2_b(i,j,k)=r_rain*r_cp*(1-sigma_b)*inta1(i,j)*ex
         enddo							         enddo
       enddo							       enddo
      enddo   							      enddo   
     do k=kmmix+1,km						     do k=kmmix+1,km
       do j=1,jmt						       do j=1,jmt
         do i=2,imm						         do i=2,imm
           if(vit(i,j,k)<0.5) cycle				           if(vit(i,j,k)<0.5) cycle
!lyc20140407							!lyc20140407
           if(k<itnu(i,j))then					           if(k<itnu(i,j))then
           c_b(i,j,k)=-(c2_b(i,j,k-1)-c2_b(i,j,k))/dzp(k)	           c_b(i,j,k)=-(c2_b(i,j,k-1)-c2_b(i,j,k))/dzp(k)
           else							           else
           c_b(i,j,k)=-c2_b(i,j,k-1)/dzp(k)			           c_b(i,j,k)=-c2_b(i,j,k-1)/dzp(k)
           endif						           endif
         enddo							         enddo
       enddo							       enddo
     enddo 							     enddo 
#endif								#endif
#ifdef SPMD							#ifdef SPMD
     call exch_boundary(c_b,km)					     call exch_boundary(c_b,km)
#endif								#endif
!       							!       
!lyc---------------------					!lyc---------------------
!calculate deltacaco3						!calculate deltacaco3
!lyc20140407							!lyc20140407
!     vcsum=0.0							!     vcsum=0.0
!     do k=1,km							!     do k=1,km
!      do j=2,jem						!      do j=2,jem
!        do i=2,imm						!        do i=2,imm
!         if(vit(i,j,k)<0.5) cycle				!         if(vit(i,j,k)<0.5) cycle
!          vcsum=vcsum+c_b(i,j,k)*dxdyt(j)*dzp(k)		!          vcsum=vcsum+c_b(i,j,k)*dxdyt(j)*dzp(k)
!        enddo							!        enddo
!      enddo							!      enddo
!     enddo							!     enddo
!         call mpi_barrier(mpi_comm_ocn,ierr)			!         call mpi_barrier(mpi_comm_ocn,ierr)
!	 call mpi_reduce(vcsum,vctmp,1,mpi_real8,mpi_sum,0,mp	!	 call mpi_reduce(vcsum,vctmp,1,mpi_real8,mpi_sum,0,mp
!      	if(mytid==0) then					!      	if(mytid==0) then
!         delcaco3=vctmp/vsea2000				!         delcaco3=vctmp/vsea2000
!        endif  						!        endif  
!         call mpi_bcast(delcaco3,1,mpi_real8,0,mpi_comm_ocn,	!         call mpi_bcast(delcaco3,1,mpi_real8,0,mpi_comm_ocn,
!    do k=kb0,km						!    do k=kb0,km
!      do j=1,jet						!      do j=1,jet
!        do i=2,imm						!        do i=2,imm
!        if(vit(i,j,k)<0.5) cycle				!        if(vit(i,j,k)<0.5) cycle
!        c_b(i,j,k)=c_b(i,j,k)-delcaco3				!        c_b(i,j,k)=c_b(i,j,k)-delcaco3
!        if(isnan(c_b(i,j,k))) print *,'c_b is error',i,j_glo	!        if(isnan(c_b(i,j,k))) print *,'c_b is error',i,j_glo
!        enddo							!        enddo
!      enddo							!      enddo
!    enddo							!    enddo
!------------------------------------------------------------	!------------------------------------------------------------
! Iron cycle begin						! Iron cycle begin
!lyc 2013.0.5							!lyc 2013.0.5
!------------------------------------------------------------	!------------------------------------------------------------
!calculate the dust flux					!calculate the dust flux
!------------------------------------------------------------	!------------------------------------------------------------
!dust_in is the dust-bioavailable				!dust_in is the dust-bioavailable

   dust_in=0.0							   dust_in=0.0
    do j=1,jmt							    do j=1,jmt
      do i=2,imm						      do i=2,imm
      dust_soft(i,j)=0.03*dust_f(i,j)				      dust_soft(i,j)=0.03*dust_f(i,j)
      dust_hard(i,j)=0.97*dust_f(i,j)				      dust_hard(i,j)=0.97*dust_f(i,j)
      dust_out(i,j,1)=dust_f(i,j)				      dust_out(i,j,1)=dust_f(i,j)
      do k=2,km+1						      do k=2,km+1
      dust_out(i,j,k)=dust_soft(i,j)*exp(-zb(k-1)/600.0)+dust	      dust_out(i,j,k)=dust_soft(i,j)*exp(-zb(k-1)/600.0)+dust
      if(dust_out(i,j,k)<0.0.or.dust_out(i,j,k)>1.0E-7) then	      if(dust_out(i,j,k)<0.0.or.dust_out(i,j,k)>1.0E-7) then
       write(6,*) 'dust_out is error',i,j,k,dust_out(i,j,k),'	       write(6,*) 'dust_out is error',i,j,k,dust_out(i,j,k),'
      endif							      endif
      enddo							      enddo
      do k=1,km							      do k=1,km
      dust_in(i,j,k)=(dust_out(i,j,k)-dust_out(i,j,k+1))/dzp(	      dust_in(i,j,k)=(dust_out(i,j,k)-dust_out(i,j,k+1))/dzp(
      enddo							      enddo
      enddo							      enddo
    enddo							    enddo

!calculate the Fe_free						!calculate the Fe_free
!1.0E-3  is the constant ligand concentration(umol/l)		!1.0E-3  is the constant ligand concentration(umol/l)
!3.33E-6 is 1/Kl, Kl=300L/nmol  (umol/l)			!3.33E-6 is 1/Kl, Kl=300L/nmol  (umol/l)
!Fe_free is the positive root of the quadratic			!Fe_free is the positive root of the quadratic
![Fe_free]**2+b*[Fe_free]+c=0					![Fe_free]**2+b*[Fe_free]+c=0
!b=L+1/Kl-[Fe],L=1.0E-3 umol/l					!b=L+1/Kl-[Fe],L=1.0E-3 umol/l
!c=3.33E-6*[Fe]							!c=3.33E-6*[Fe]
!umol/l=1/1.025 umol/kg						!umol/l=1/1.025 umol/kg
!the method is similar with NCOM1.4				!the method is similar with NCOM1.4
    do k=1,km							    do k=1,km
     do j=jsm,jem						     do j=jsm,jem
      do i=2,imm						      do i=2,imm
        Fe_scav(i,j,k)=0.0					        Fe_scav(i,j,k)=0.0
      enddo							      enddo
     enddo							     enddo
    enddo							    enddo
    P_fe(:,:,:)=0.0						    P_fe(:,:,:)=0.0
    								    
    do k=1,km							    do k=1,km
       do j=jsm,jem						       do j=jsm,jem
         do i=2,imm						         do i=2,imm
         if(vit(i,j,k)<0.5.or.pt(i,j,k,6)<0.0) cycle		         if(vit(i,j,k)<0.5.or.pt(i,j,k,6)<0.0) cycle
#ifdef scav_moore08						#ifdef scav_moore08
!for ug/kg*m/s 							!for ug/kg*m/s 
        IF(FE_FLUX_DATA) THEN					        IF(FE_FLUX_DATA) THEN
        SCAL=55.847						        SCAL=55.847
        ELSE							        ELSE
        SCAL=1							        SCAL=1
        ENDIF							        ENDIF
        scb=Feb*(r_cp*a2_b(i,j,k)*6.0*12.01+c2_b(i,j,k)*100.0	        scb=Feb*(r_cp*a2_b(i,j,k)*6.0*12.01+c2_b(i,j,k)*100.0
!for umol/kg*m/s						!for umol/kg*m/s
!         scb=Feb*(a2_b(i,j,k)*6.0+c2_b(i,j,k)+dust_out(i,j,K	!         scb=Feb*(a2_b(i,j,k)*6.0+c2_b(i,j,k)+dust_out(i,j,K
         if(pt(i,j,k,6)>0.6*1.0E-3) then			         if(pt(i,j,k,6)>0.6*1.0E-3) then
         sc=scb+(pt(i,j,k,6)-0.6*1.0E-3)*0.00904		         sc=scb+(pt(i,j,k,6)-0.6*1.0E-3)*0.00904
!         else if(pt(i,j,k,6)<0.0005) then			!         else if(pt(i,j,k,6)<0.0005) then
!         sc=scb*(pt(i,j,k,6)/0.0005)				!         sc=scb*(pt(i,j,k,6)/0.0005)
         else							         else
         sc=scb							         sc=scb
         endif							         endif
         Fe_scav(i,j,k)=sc*pt(i,j,k,6)     			         Fe_scav(i,j,k)=sc*pt(i,j,k,6)     
#else								#else
         Fe_free=0.0						         Fe_free=0.0
         Fe_b=(1.0E-3+3.33E-6)/1.025-pt(i,j,k,6)		         Fe_b=(1.0E-3+3.33E-6)/1.025-pt(i,j,k,6)
         Fe_c=-3.33E-6/1.025*pt(i,j,k,6)			         Fe_c=-3.33E-6/1.025*pt(i,j,k,6)
         sqfe=Fe_b**2-4*Fe_c					         sqfe=Fe_b**2-4*Fe_c
         if(sqfe<0.0) then					         if(sqfe<0.0) then
          print*,'i,j,k', i,j_global(j),k,'sqfe is error',sqf	          print*,'i,j,k', i,j_global(j),k,'sqfe is error',sqf
          stop							          stop
         endif 							         endif 
         if(Fe_b<0.0) then 					         if(Fe_b<0.0) then 
          Fe_free=0.5*(-Fe_b+sqrt(sqfe))			          Fe_free=0.5*(-Fe_b+sqrt(sqfe))
         else							         else
          Fe_free=2.0*Fe_c/(-Fe_b-sqrt(sqfe))			          Fe_free=2.0*Fe_c/(-Fe_b-sqrt(sqfe))
         endif							         endif
         if(isnan(Fe_free)) then				         if(isnan(Fe_free)) then
          print*,'i,j,k',II, i_global(i),j_global(j),k,'Fe_fr	          print*,'i,j,k',II, i_global(i),j_global(j),k,'Fe_fr
          stop							          stop
         endif 							         endif 
         Fe_scav(i,j,k)=Fe_scav_prof(k)*Fe_free			         Fe_scav(i,j,k)=Fe_scav_prof(k)*Fe_free
#endif								#endif
         if(isnan(Fe_scav(i,j,k))) then				         if(isnan(Fe_scav(i,j,k))) then
          print*,'i,j,k', i,j_global(j),k,'Fe_scav is error',	          print*,'i,j,k', i,j_global(j),k,'Fe_scav is error',
          stop							          stop
         endif 							         endif 
        enddo							        enddo
       enddo							       enddo
     enddo							     enddo

!     TFe_scav=0.0						!     TFe_scav=0.0
!     do j=jsm,jem						!     do j=jsm,jem
!       do i=2,imm						!       do i=2,imm
!       TFe_scav(i,j,1)=Fe_scav(i,j,1)*dzp(1)			!       TFe_scav(i,j,1)=Fe_scav(i,j,1)*dzp(1)
!       enddo							!       enddo
!     enddo							!     enddo
!								!
!     do k=2,km							!     do k=2,km
!        do j=jsm,jem						!        do j=jsm,jem
!          do i=2,imm						!          do i=2,imm
!          TFe_scav(i,j,k)=TFe_scav(i,j,k-1)+Fe_scav(i,j,k)*d	!          TFe_scav(i,j,k)=TFe_scav(i,j,k-1)+Fe_scav(i,j,k)*d
!          enddo						!          enddo
!        enddo							!        enddo
!     enddo							!     enddo
!------------------------------------------------------     	!------------------------------------------------------     
     Fe_source=0.0						     Fe_source=0.0
     do k=1,kmmix						     do k=1,kmmix
      do j=jsm,jem						      do j=jsm,jem
       do i=2,imm						       do i=2,imm
        if(vit(i,j,k)<0.5) cycle				        if(vit(i,j,k)<0.5) cycle
         Fe_source(i,j,k)=-r_fep(i,j)*a1_b(i,j,k)-Fe_scav(i,j	         Fe_source(i,j,k)=-r_fep(i,j)*a1_b(i,j,k)-Fe_scav(i,j
       enddo							       enddo
      enddo							      enddo
     enddo							     enddo
     do k=2,kmmix+1						     do k=2,kmmix+1
      do j=jsm,jem						      do j=jsm,jem
       do i=2,imm						       do i=2,imm
         P_fe(i,j,k)=P_fe(i,j,k-1)+(R_FeP(i,j)*(1.0-sigma_b)*	         P_fe(i,j,k)=P_fe(i,j,k-1)+(R_FeP(i,j)*(1.0-sigma_b)*
       enddo							       enddo
      enddo							      enddo
      enddo							      enddo
     do k=kmmix+1,km						     do k=kmmix+1,km
       do j=jsm,jem						       do j=jsm,jem
        do i=2,imm						        do i=2,imm
        if(vit(i,j,k)<0.5) cycle				        if(vit(i,j,k)<0.5) cycle
        Fe_source(i,j,k)=-r_fec(i,j)*b0_b(i,j,k)+P_fe(i,j,k)*	        Fe_source(i,j,k)=-r_fec(i,j)*b0_b(i,j,k)+P_fe(i,j,k)*
        P_Fe(i,j,k+1)=P_Fe(i,j,k)-P_Fe(i,j,k)*ReFe(k)+dzp(k)*	        P_Fe(i,j,k+1)=P_Fe(i,j,k)-P_Fe(i,j,k)*ReFe(k)+dzp(k)*
        enddo							        enddo
       enddo							       enddo
     enddo     							     enddo     
      if(ii==nss.and.mytid==50) then				      if(ii==nss.and.mytid==50) then
       print *,'fe_source for b0_b,flux,scav,dust_in:',imt/2,	       print *,'fe_source for b0_b,flux,scav,dust_in:',imt/2,
     endif							     endif
     								     
     do k=kb0,km						     do k=kb0,km
       do j=jsm,jem						       do j=jsm,jem
         do i=2,imm						         do i=2,imm
        if(vit(i,j,k)<0.5) cycle				        if(vit(i,j,k)<0.5) cycle
        Fe_source(i,j,k)=Fe_source(i,j,k)+r_feP(i,j)*deltaa0-	        Fe_source(i,j,k)=Fe_source(i,j,k)+r_feP(i,j)*deltaa0-
        enddo							        enddo
       enddo							       enddo
     enddo							     enddo

!      call exchange_3d(Fe_source,km)				!      call exchange_3d(Fe_source,km)

!-------add the dust_bio to fe-source------------		!-------add the dust_bio to fe-source------------
!dust remin gDust=0.035/55.847*1.0e6->mmolfe			!dust remin gDust=0.035/55.847*1.0e6->mmolfe
!0.035  dust iron content is 3.5% iron by weight (Moore et al	!0.035  dust iron content is 3.5% iron by weight (Moore et al
!55.847 g/mol fe						!55.847 g/mol fe
!1.0e6  mol->mmol						!1.0e6  mol->mmol
IF(DUST_DATA) THEN						IF(DUST_DATA) THEN
    SCAL=0.035/55.847 !						    SCAL=0.035/55.847 !
ELSE								ELSE
    SCAL=1							    SCAL=1
ENDIF								ENDIF
    dust_in =0.0  !for just csm1_bgc				    dust_in =0.0  !for just csm1_bgc
     do k=1,km							     do k=1,km
        do j=1,jmt						        do j=1,jmt
          do i=2,imm						          do i=2,imm
          Fe_source(i,j,k)=Fe_source(i,j,k)+dust_in(i,j,k)*SC	          Fe_source(i,j,k)=Fe_source(i,j,k)+dust_in(i,j,k)*SC
          enddo							          enddo
        enddo							        enddo
      enddo							      enddo
!----source from sediments-----------------------------------	!----source from sediments-----------------------------------
     do j=1,jmt							     do j=1,jmt
       do i=2,imm						       do i=2,imm
        if(kmt(i,j)>1.and.kmt(i,j)<=22)then			        if(kmt(i,j)>1.and.kmt(i,j)<=22)then
         k=kmt(i,j)						         k=kmt(i,j)
         Fe_source(i,j,k)=Fe_source(i,j,k)+2.0/86400.0/1.0E+3	         Fe_source(i,j,k)=Fe_source(i,j,k)+2.0/86400.0/1.0E+3
         endif							         endif
       enddo							       enddo
      enddo							      enddo
!lyc---------------------------------------------------------	!lyc---------------------------------------------------------
! for diagnostic						! for diagnostic
!------------------------------------------------------------	!------------------------------------------------------------
    if(ii==nss) then						    if(ii==nss) then
									
      va0sum=0.0						      va0sum=0.0
      do k=1,km							      do k=1,km
        do j=2,jem						        do j=2,jem
          do  i=2,imm						          do  i=2,imm
            if(vit(i,j,k)<0.5) cycle				            if(vit(i,j,k)<0.5) cycle
            va0sum=va0sum+a0_b(i,j,k)*dxdyt(j)*dzp(k)		            va0sum=va0sum+a0_b(i,j,k)*dxdyt(j)*dzp(k)
          enddo							          enddo
        enddo							        enddo
      enddo							      enddo
       call mpi_barrier(mpi_comm_ocn,ierr)			       call mpi_barrier(mpi_comm_ocn,ierr)
       call mpi_reduce(va0sum,va0tmp,1,mpi_real8,mpi_sum,0,mp	       call mpi_reduce(va0sum,va0tmp,1,mpi_real8,mpi_sum,0,mp
!lyc--------------------------					!lyc--------------------------
      vb0sum=0.0						      vb0sum=0.0
      do k=1,km							      do k=1,km
        do j=2,jem						        do j=2,jem
          do  i=2,imm						          do  i=2,imm
            if(vit(i,j,k)<0.5) cycle				            if(vit(i,j,k)<0.5) cycle
            vb0sum=vb0sum+b0_b(i,j,k)*dxdyt(j)*dzp(k)		            vb0sum=vb0sum+b0_b(i,j,k)*dxdyt(j)*dzp(k)
          enddo							          enddo
        enddo							        enddo
      enddo							      enddo
       call mpi_barrier(mpi_comm_ocn,ierr)			       call mpi_barrier(mpi_comm_ocn,ierr)
       call mpi_reduce(vb0sum,vb0tmp,1,mpi_real8,mpi_sum,0,mp	       call mpi_reduce(vb0sum,vb0tmp,1,mpi_real8,mpi_sum,0,mp

!lyc--------------------------					!lyc--------------------------
      vcsum=0.0							      vcsum=0.0
      do k=1,km							      do k=1,km
        do j=2,jem						        do j=2,jem
          do  i=2,imm						          do  i=2,imm
            if(vit(i,j,k)<0.5) cycle				            if(vit(i,j,k)<0.5) cycle
            vcsum=vcsum+c_b(i,j,k)*dxdyt(j)*dzp(k)		            vcsum=vcsum+c_b(i,j,k)*dxdyt(j)*dzp(k)
          enddo							          enddo
        enddo							        enddo
      enddo							      enddo
       call mpi_barrier(mpi_comm_ocn,ierr)			       call mpi_barrier(mpi_comm_ocn,ierr)
       call mpi_reduce(vcsum,vctmp,1,mpi_real8,mpi_sum,0,mpi_	       call mpi_reduce(vcsum,vctmp,1,mpi_real8,mpi_sum,0,mpi_
       if(mytid==0) print *,month,iday, 'the total va0',va0tm	       if(mytid==0) print *,month,iday, 'the total va0',va0tm
	   								   
     endif	   						     endif	   
!lyc----------------------					!lyc----------------------
! cumulate caco3 and a0						! cumulate caco3 and a0
      do k=1,km							      do k=1,km
        do j=1,jmt						        do j=1,jmt
          do i=2,imm						          do i=2,imm
          tocaco3(i,j,k)=tocaco3(i,j,k)+c_b(i,j,k)*dtts*vit(i	          tocaco3(i,j,k)=tocaco3(i,j,k)+c_b(i,j,k)*dtts*vit(i
          toa0(i,j,k)   =toa0   (i,j,k)+a0_b(i,j,k)*dtts*vit(	          toa0(i,j,k)   =toa0   (i,j,k)+a0_b(i,j,k)*dtts*vit(
          enddo							          enddo
        enddo							        enddo
      enddo							      enddo

#ifdef SPMD							#ifdef SPMD
      call exch_boundary(tocaco3(1,1,1),km)			      call exch_boundary(tocaco3(1,1,1),km)
      call exch_boundary(toa0(1,1,1),km)			      call exch_boundary(toa0(1,1,1),km)
#endif								#endif
          							          
#ifdef carbonDebug 						#ifdef carbonDebug 
#ifdef SPMD							#ifdef SPMD
      print*, '----------------------------------------------	      print*, '----------------------------------------------
      print*,'i,j,1,c,10,c',imt/2,jmt/2,c_b(imt/2,jmt/2,1),c_	      print*,'i,j,1,c,10,c',imt/2,jmt/2,c_b(imt/2,jmt/2,1),c_
#else								#else
      print*, '----------------------------------------------	      print*, '----------------------------------------------
      print*,'i,j,1,c,10,c',imt/2,jmt/2,c_b(imt/2,jmt/2,1),c_	      print*,'i,j,1,c,10,c',imt/2,jmt/2,c_b(imt/2,jmt/2,1),c_
#endif								#endif
#endif								#endif
#endif								#endif
!      								!      
      deallocate(c2_b,inta1)					      deallocate(c2_b,inta1)

      RETURN							      RETURN
      END SUBROUTINE READYBIO					      END SUBROUTINE READYBIO


! CVS: $Id: sgec.F90,v 2.1 2004/06/10 07:45:17 cvsroot Exp $	! CVS: $Id: sgec.F90,v 2.1 2004/06/10 07:45:17 cvsroot Exp $
  SUBROUTINE SGEC						  SUBROUTINE SGEC
!========================					!========================
! SGEC								! SGEC
!------------------------------------------------------------	!------------------------------------------------------------
!								!
! purpose: calculate transport velocity of carbon		! purpose: calculate transport velocity of carbon
!								!
! author: Zhao Liang@lapc 2004/03/03 (original author: Xu Y F	! author: Zhao Liang@lapc 2004/03/03 (original author: Xu Y F
!								!
!------------------------------------------------------------	!------------------------------------------------------------
#include <def-undef.h>       					#include <def-undef.h>       
!								!
      USE param_mod						      USE param_mod
      USE pconst_mod						      USE pconst_mod
      USE carbon_mod						      USE carbon_mod
      USE tracer_mod						      USE tracer_mod
      USE cforce_mod						      USE cforce_mod
#ifdef SPMD      						#ifdef SPMD      
      USE msg_mod,only:mpi_comm_ocn				      USE msg_mod,only:mpi_comm_ocn
#endif      							#endif      
!								!
!------------------------------------------------------------	!------------------------------------------------------------
      IMPLICIT NONE						      IMPLICIT NONE
#include <netcdf.inc>      					#include <netcdf.inc>      
!#ifdef SPMD      						!#ifdef SPMD      
!#include <mpif.h>						!#include <mpif.h>
!#endif      							!#endif      
!      								!      
      REAL tssw(IMT,JMT),sssw(IMT,JMT)				      REAL tssw(IMT,JMT),sssw(IMT,JMT)
      REAL factsg,secyr,rho00					      REAL factsg,secyr,rho00

      REAL tv(IMT,JMT),sch(IMT,JMT),arphs(IMT,JMT)		      REAL tv(IMT,JMT),sch(IMT,JMT),arphs(IMT,JMT)
      REAL TSEA,SALT,dw,unitsg					      REAL TSEA,SALT,dw,unitsg
!------------------------------------------------------------	!------------------------------------------------------------
!     factsg    =1.0E-4/3.1536E7				!     factsg    =1.0E-4/3.1536E7
!     sge       =0.05 in units of mol/m^2/yr/ppm		!     sge       =0.05 in units of mol/m^2/yr/ppm
!     factsg    for units of umol/dm^2/s (x10, for converting	!     factsg    for units of umol/dm^2/s (x10, for converting
!     dz        in units of cm					!     dz        in units of cm
!     sgbrok    in units of mol/m^2/yr/ppm			!     sgbrok    in units of mol/m^2/yr/ppm
!------------------------------------------------------------	!------------------------------------------------------------
!     sge       in units of cm/s * umol/kg/ppm after factsg	!     sge       in units of cm/s * umol/kg/ppm after factsg
!------------------------------------------------------------	!------------------------------------------------------------
!     factsg    =1.0E4/secyr*10.				!     factsg    =1.0E4/secyr*10.
!------------------------------------------------------------	!------------------------------------------------------------
!								!
      rho00=1025.0						      rho00=1025.0
      secyr=365.0*86400.0					      secyr=365.0*86400.0
      factsg=1.0E8/rho00/secyr					      factsg=1.0E8/rho00/secyr
!        							!        
!$OMP PARALLEL DO PRIVATE (I,J)        				!$OMP PARALLEL DO PRIVATE (I,J)        
      DO J=1,JMT						      DO J=1,JMT
        DO I=1,IMT						        DO I=1,IMT
          tssw(I,J)=AT(I,J,1,1)					          tssw(I,J)=AT(I,J,1,1)
          IF(AT(I,J,1,1).gt.40.0.and.AT(I,J,1,1).lt.999.) the	          IF(AT(I,J,1,1).gt.40.0.and.AT(I,J,1,1).lt.999.) the
            tssw(I,J)=40.0					            tssw(I,J)=40.0
#ifdef SPMD							#ifdef SPMD
            PRINT*, 'mytid=',mytid,'notice: temperature great	            PRINT*, 'mytid=',mytid,'notice: temperature great
                     I,J,AT(I,J,1,1),ITICE(I,J),"SGEC"       	                     I,J,AT(I,J,1,1),ITICE(I,J),"SGEC"       
#else                    					#else                    
            PRINT*, 'notice: temperature greater than 40.0', 	            PRINT*, 'notice: temperature greater than 40.0', 
                     I,J,AT(I,J,1,1),ITICE(I,J),"SGEC"       	                     I,J,AT(I,J,1,1),ITICE(I,J),"SGEC"       
#endif								#endif
          ENDIF    						          ENDIF    
          sssw(I,J)=AT(I,J,1,2)*1000.0+35.0			          sssw(I,J)=AT(I,J,1,2)*1000.0+35.0
        ENDDO							        ENDDO
      ENDDO							      ENDDO
!------------------------------------------------------------	!------------------------------------------------------------
!     if(w22np(i,j) .le. 2.0) then				!     if(w22np(i,j) .le. 2.0) then
!       sge(i,j)=0.0						!       sge(i,j)=0.0
!     else							!     else
!       sge(i,j)=sgbrok(w22np(i,j))*factsg			!       sge(i,j)=sgbrok(w22np(i,j))*factsg
!     end if							!     end if
!     sgea(j)=0.05						!     sgea(j)=0.05
!     sgep(j)=0.05						!     sgep(j)=0.05
!------------------------------------------------------------	!------------------------------------------------------------
!     CALCULATION OF TRANSFER VELOCITY ACCORDING TO Wanninkho	!     CALCULATION OF TRANSFER VELOCITY ACCORDING TO Wanninkho
!     The values of parameters are refer to the references	!     The values of parameters are refer to the references
!------------------------------------------------------------	!------------------------------------------------------------
      dw=1.027e3						      dw=1.027e3
      unitsg=24.0*365.E-8					      unitsg=24.0*365.E-8
!								!
!$OMP PARALLEL DO PRIVATE (I,J,TSEA,SALT) 			!$OMP PARALLEL DO PRIVATE (I,J,TSEA,SALT) 
      DO J=1,JMT						      DO J=1,JMT
        DO I=1,IMT						        DO I=1,IMT
          TSEA=tssw(I,J)+273.15					          TSEA=tssw(I,J)+273.15
          SALT=sssw(I,J)					          SALT=sssw(I,J)
          sge(I,J)=0.0						          sge(I,J)=0.0
!------------------------------------------------------------	!------------------------------------------------------------
!     Schmit number at seawater					!     Schmit number at seawater
!------------------------------------------------------------	!------------------------------------------------------------
          IF(SALT.LE.0.1.OR.VIT(I,J,1).EQ.0) CYCLE		          IF(SALT.LE.0.1.OR.VIT(I,J,1).EQ.0) CYCLE
          sch(I,J)=2073.1-125.62*tssw(I,J)+3.6276*tssw(I,J)**	          sch(I,J)=2073.1-125.62*tssw(I,J)+3.6276*tssw(I,J)**
                         -0.043219*tssw(I,J)**3			                         -0.043219*tssw(I,J)**3
#ifdef SPMD							#ifdef SPMD
          IF(sch(I,J).LE.0.0) THEN 				          IF(sch(I,J).LE.0.0) THEN 
            PRINT*, 'mytid=',mytid,'notice: SCH less than 0',	            PRINT*, 'mytid=',mytid,'notice: SCH less than 0',
                     i,j,sch(i,j),tssw(i,j),SALT,itice(i,j),"	                     i,j,sch(i,j),tssw(i,j),SALT,itice(i,j),"
          ENDIF							          ENDIF
#else          							#else          
          IF(sch(I,J).LE.0.0) THEN 				          IF(sch(I,J).LE.0.0) THEN 
            PRINT*, 'notice: SCH less than 0', &		            PRINT*, 'notice: SCH less than 0', &
                     i,j,sch(i,j),tssw(i,j),SALT,itice(i,j),"	                     i,j,sch(i,j),tssw(i,j),SALT,itice(i,j),"
          ENDIF							          ENDIF
#endif								#endif
          arphs(I,J)=EXP(-60.2409+9345.17/TSEA            &	          arphs(I,J)=EXP(-60.2409+9345.17/TSEA            &
                         +23.3585*LOG(TSEA/100.)+SALT     &	                         +23.3585*LOG(TSEA/100.)+SALT     &
                         *(0.023517-0.023656*(TSEA/100.)  &	                         *(0.023517-0.023656*(TSEA/100.)  &
                         +0.0047036*(TSEA/100.)**2))		                         +0.0047036*(TSEA/100.)**2))
!------------------------------------------------------------	!------------------------------------------------------------
!     TV from Wanninkhof's equation in units of cm/h		!     TV from Wanninkhof's equation in units of cm/h
!     Sge is an exchange coefficient for CO2 in units of mol/	!     Sge is an exchange coefficient for CO2 in units of mol/
!------------------------------------------------------------	!------------------------------------------------------------
!     for steady or instant wind,7.946				!     for steady or instant wind,7.946
!     for climatological wind, 10.0				!     for climatological wind, 10.0
!------------------------------------------------------------	!------------------------------------------------------------
!          tv(I,J)=7.946*w22np(I,J)*w22np(I,J)/SQRT(sch(I,J))	!          tv(I,J)=7.946*w22np(I,J)*w22np(I,J)/SQRT(sch(I,J))
          tv(I,J)=10.0*w22np(I,J)*w22np(I,J)/SQRT(sch(I,J))	          tv(I,J)=10.0*w22np(I,J)*w22np(I,J)/SQRT(sch(I,J))
          sge(I,J)=tv(I,J)*arphs(I,J)*dw*unitsg			          sge(I,J)=tv(I,J)*arphs(I,J)*dw*unitsg
        ENDDO							        ENDDO
      ENDDO							      ENDDO
!------------------------------------------------------------	!------------------------------------------------------------
!$OMP PARALLEL DO PRIVATE (J,I)					!$OMP PARALLEL DO PRIVATE (J,I)
      DO J=1,JMT						      DO J=1,JMT
        DO I=1,IMT						        DO I=1,IMT
!------------------------------------------------------------	!------------------------------------------------------------
! devided by 100.0 to transform the unit from cm/s to m/s    	! devided by 100.0 to transform the unit from cm/s to m/s    
!------------------------------------------------------------	!------------------------------------------------------------
          sge(I,J)=sge(I,J)*factsg/100.0			          sge(I,J)=sge(I,J)*factsg/100.0
        ENDDO							        ENDDO
      ENDDO							      ENDDO
      call exch_boundary(sge(1,1),1)				      call exch_boundary(sge(1,1),1)
!      								!      
      RETURN							      RETURN
      END SUBROUTINE SGEC					      END SUBROUTINE SGEC


! CVS: $Id: isoflux_pt.F90,v 2.1 2004/06/10 07:45:17 cvsroot 	! CVS: $Id: isoflux_pt.F90,v 2.1 2004/06/10 07:45:17 cvsroot 
#include <def-undef.h>						#include <def-undef.h>
 								 
#if (defined ISO)						#if (defined ISO)
!     ==============================				!     ==============================
      SUBROUTINE ISOFLUX_PT (TF2,MTRACE)			      SUBROUTINE ISOFLUX_PT (TF2,MTRACE)
!     ==============================				!     ==============================
 								 
!     isopycnal diffusive tracer fluxes are computed.		!     isopycnal diffusive tracer fluxes are computed.
use param_mod							use param_mod
use pconst_mod							use pconst_mod
use carbon_mod							use carbon_mod
use isopyc_mod							use isopyc_mod
use work_mod							use work_mod
#ifdef SPMD							#ifdef SPMD
use msg_mod,only:mpi_comm_ocn					use msg_mod,only:mpi_comm_ocn
#endif								#endif
 								 
      IMPLICIT NONE						      IMPLICIT NONE
!#ifdef SPMD							!#ifdef SPMD
!#include <mpif.h>						!#include <mpif.h>
!#endif								!#endif
 								 
      INTEGER :: mtrace						      INTEGER :: mtrace
      REAL    :: p5,p25,c1,c0,fxa,fxb,fxc,fxe			      REAL    :: p5,p25,c1,c0,fxa,fxb,fxc,fxe
      REAL,DIMENSION(imt,jmt,km)::TF2				      REAL,DIMENSION(imt,jmt,km)::TF2
 								 
      allocate (work_1(imt,jmt,km),work_2(imt,jmt,km),work_3(	      allocate (work_1(imt,jmt,km),work_2(imt,jmt,km),work_3(
      allocate (temp(imt,jmt,km))				      allocate (temp(imt,jmt,km))
!------------------------------------------------------------	!------------------------------------------------------------
!     set local constants					!     set local constants
!------------------------------------------------------------	!------------------------------------------------------------
      p5 = 0.5							      p5 = 0.5
 								 
      c0 = 0.0							      c0 = 0.0
      c1 = 1.0							      c1 = 1.0
      p25 = 0.25						      p25 = 0.25
 								 
      m = mtrace						      m = mtrace
 								 
!------------------------------------------------------------	!------------------------------------------------------------
!     first compute the vertical tracer flux "temp" at the no	!     first compute the vertical tracer flux "temp" at the no
!     face of "t" cells.					!     face of "t" cells.
!------------------------------------------------------------	!------------------------------------------------------------
 								 
!$OMP PARALLEL DO PRIVATE (k,j,i)				!$OMP PARALLEL DO PRIVATE (k,j,i)
      DO k = 2,km -1						      DO k = 2,km -1
         DO j = 2,jmm						         DO j = 2,jmm
            DO i = 1,imt					            DO i = 1,imt
               temp (i,j,k)= p25* dzr (k)* (ptb (i,j +1,k -1,	               temp (i,j,k)= p25* dzr (k)* (ptb (i,j +1,k -1,
                  i,j +1,k +1,m) &				                  i,j +1,k +1,m) &
                   + ptb (i,j,k -1,m) - ptb (i,j, k +1,m))   	                   + ptb (i,j,k -1,m) - ptb (i,j, k +1,m))   
            END DO						            END DO
         END DO							         END DO
      END DO							      END DO
 								 
 								 
!------------------------------------------------------------	!------------------------------------------------------------
!     now consider the top level, assuming that the surface t	!     now consider the top level, assuming that the surface t
!     values are the same as the ones at "k"=1			!     values are the same as the ones at "k"=1
!------------------------------------------------------------	!------------------------------------------------------------
 								 
      k = 1							      k = 1
!$OMP PARALLEL DO PRIVATE (j,i)					!$OMP PARALLEL DO PRIVATE (j,i)
      DO j = 2,jmm						      DO j = 2,jmm
         DO i = 1,imt						         DO i = 1,imt
            temp (i,j,k) = 0.25* dzr (k)* (ptb (i,j +1,k,m) -	            temp (i,j,k) = 0.25* dzr (k)* (ptb (i,j +1,k,m) -
                          j +1,k +1,m)+ptb (i,j,k,m) - ptb (i	                          j +1,k +1,m)+ptb (i,j,k,m) - ptb (i
         END DO							         END DO
      END DO							      END DO
 								 
 								 
!------------------------------------------------------------	!------------------------------------------------------------
!     finally, consider the bottom level. the extrapolative e	!     finally, consider the bottom level. the extrapolative e
!     is used to compute the tracer values at the ocean botto	!     is used to compute the tracer values at the ocean botto
!------------------------------------------------------------	!------------------------------------------------------------
 								 
!$OMP PARALLEL DO PRIVATE (j,i)					!$OMP PARALLEL DO PRIVATE (j,i)
      DO j = 1,jmt						      DO j = 1,jmt
         DO i = 1,imt						         DO i = 1,imt
            temp (i,j,km)= 0.0					            temp (i,j,km)= 0.0
         END DO							         END DO
      END DO							      END DO
 								 
 								 
!$OMP PARALLEL DO PRIVATE (j,i,k,fxa,fxb,fxc,fxe)		!$OMP PARALLEL DO PRIVATE (j,i,k,fxa,fxb,fxc,fxe)
      DO j = 2,jmm						      DO j = 2,jmm
         DO i = 1,imt						         DO i = 1,imt
            k = min (ITNU (i,j),ITNU (i,j +1))			            k = min (ITNU (i,j),ITNU (i,j +1))
            IF (k /= 0) THEN					            IF (k /= 0) THEN
               fxe = dzw (k -1) + dzw (k)			               fxe = dzw (k -1) + dzw (k)
               fxa = 0.5* (ptb (i,j +1,k -1,m) + ptb (i,j,k -	               fxa = 0.5* (ptb (i,j +1,k -1,m) + ptb (i,j,k -
               fxb = 0.5* (ptb (i,j +1,k,m) + ptb (i,j,k,m))	               fxb = 0.5* (ptb (i,j +1,k,m) + ptb (i,j,k,m))
               fxc = dzwr (k -1)* (fxb * fxe- fxa * dzw (k))	               fxc = dzwr (k -1)* (fxb * fxe- fxa * dzw (k))
               temp (i,j,k) = dzr (k)* (0.5* (fxa + fxb) - fx	               temp (i,j,k) = dzr (k)* (0.5* (fxa + fxb) - fx
            END IF						            END IF
         END DO							         END DO
      END DO							      END DO
 								 
 								 
!------------------------------------------------------------	!------------------------------------------------------------
!     computation of meridional tracer flux			!     computation of meridional tracer flux
!     first calculate the effects of purely horizontal diffus	!     first calculate the effects of purely horizontal diffus
!     isopycnal, the background horizontal diffusion has been	!     isopycnal, the background horizontal diffusion has been
!     before called this subroutine. (jxz)			!     before called this subroutine. (jxz)
!     add in the effects of the along isopycnal diffusion com	!     add in the effects of the along isopycnal diffusion com
!     using "K2" component of the tensor and apply land/sea m	!     using "K2" component of the tensor and apply land/sea m
!------------------------------------------------------------	!------------------------------------------------------------
 								 
!$OMP PARALLEL DO PRIVATE (j,i)					!$OMP PARALLEL DO PRIVATE (j,i)
      DO k = 1,km						      DO k = 1,km
         DO i = 1,imt						         DO i = 1,imt
            work_1 (i,1,k)= 0.0					            work_1 (i,1,k)= 0.0
         END DO							         END DO
      END DO							      END DO
 								 
 								 
!$OMP PARALLEL DO PRIVATE (k,j,i)				!$OMP PARALLEL DO PRIVATE (k,j,i)
      DO k = 1,km						      DO k = 1,km
         DO j = 2,jmm						         DO j = 2,jmm
            DO i = 1,imt					            DO i = 1,imt
               work_1 (i,j,k)= ( ahisop * dyur (j)* (ptb (i,j	               work_1 (i,j,k)= ( ahisop * dyur (j)* (ptb (i,j
                              - ptb (i,j,k,m)) + &		                              - ptb (i,j,k,m)) + &
               ahisop * K2 (i,k,j,3)* temp (i,j,k) )* &		               ahisop * K2 (i,k,j,3)* temp (i,j,k) )* &
               SINU (j)* vit (i,j,k)* vit (i,j +1,k) 		               SINU (j)* vit (i,j,k)* vit (i,j +1,k) 
            END DO						            END DO
         END DO							         END DO
      END DO							      END DO
#ifdef SPMD							#ifdef SPMD
      call exch_boundary(work_1,km)				      call exch_boundary(work_1,km)
#endif								#endif
 								 
 								 
!------------------------------------------------------------	!------------------------------------------------------------
!     compute the vertical tracer flux "temp" at the eastern	!     compute the vertical tracer flux "temp" at the eastern
!     face of "t" cells.					!     face of "t" cells.
!------------------------------------------------------------	!------------------------------------------------------------
 								 
!$OMP PARALLEL DO PRIVATE (k,j,i)				!$OMP PARALLEL DO PRIVATE (k,j,i)
      DO k = 2,km -1						      DO k = 2,km -1
         DO j = 2,jmm						         DO j = 2,jmm
            DO i = 1,imm					            DO i = 1,imm
               temp (i,j,k)= p25* dzr (k)* (ptb (i +1,j,k -1,	               temp (i,j,k)= p25* dzr (k)* (ptb (i +1,j,k -1,
                             i+1,j,k+1,m)+ptb(i,j,k-1,m)-ptb(	                             i+1,j,k+1,m)+ptb(i,j,k-1,m)-ptb(
            END DO						            END DO
         END DO							         END DO
      END DO							      END DO
 								 
 								 
!------------------------------------------------------------	!------------------------------------------------------------
!     now consider the top level, assuming that the surface t	!     now consider the top level, assuming that the surface t
!     values are the same as the ones at "k"=1			!     values are the same as the ones at "k"=1
!------------------------------------------------------------	!------------------------------------------------------------
 								 
      k = 1							      k = 1
!$OMP PARALLEL DO PRIVATE (j,i)					!$OMP PARALLEL DO PRIVATE (j,i)
      DO j = 2,jmm						      DO j = 2,jmm
         DO i = 1,imm						         DO i = 1,imm
            temp (i,j,k)= p25* dzr (k)* (ptb (i +1,j,k,m) - p	            temp (i,j,k)= p25* dzr (k)* (ptb (i +1,j,k,m) - p
               k +1,m) + ptb (i,j,k,m) - ptb (i,j,k +1,m))  	               k +1,m) + ptb (i,j,k,m) - ptb (i,j,k +1,m))  
         END DO							         END DO
      END DO							      END DO
 								 
 								 
!------------------------------------------------------------	!------------------------------------------------------------
!     finally, consider the bottom level. the extrapolative e	!     finally, consider the bottom level. the extrapolative e
!     is used to compute the tracer values at the ocean botto	!     is used to compute the tracer values at the ocean botto
!------------------------------------------------------------	!------------------------------------------------------------
 								 
!$OMP PARALLEL DO PRIVATE (j,i)					!$OMP PARALLEL DO PRIVATE (j,i)
      DO j = 2,jmm						      DO j = 2,jmm
         DO i = 1,imm						         DO i = 1,imm
            temp (i,j,km) = 0.0					            temp (i,j,km) = 0.0
         END DO							         END DO
      END DO							      END DO
 								 
 								 
!$OMP PARALLEL DO PRIVATE (j,i,k,fxa,fxb,fxc,fxe)		!$OMP PARALLEL DO PRIVATE (j,i,k,fxa,fxb,fxc,fxe)
      DO j = 2,jmm						      DO j = 2,jmm
         DO i = 1,imm						         DO i = 1,imm
            k = min (ITNU (i,j),ITNU (i +1,j))			            k = min (ITNU (i,j),ITNU (i +1,j))
            IF (k /= 0) THEN					            IF (k /= 0) THEN
               fxe = dzw (k -1) + dzw (k)			               fxe = dzw (k -1) + dzw (k)
               fxa = p5* (ptb (i,j,k -1,m) + ptb (i +1,j,k -1	               fxa = p5* (ptb (i,j,k -1,m) + ptb (i +1,j,k -1
               fxb = p5* (ptb (i,j,k,m) + ptb (i +1,j,k,m))	               fxb = p5* (ptb (i,j,k,m) + ptb (i +1,j,k,m))
               fxc = dzwr (k -1)* (fxb * fxe- fxa * dzw (k))	               fxc = dzwr (k -1)* (fxb * fxe- fxa * dzw (k))
               temp (i,j,k) = dzr (k)* (p5* (fxa + fxb) - fxc	               temp (i,j,k) = dzr (k)* (p5* (fxa + fxb) - fxc
            END IF						            END IF
         END DO							         END DO
      END DO							      END DO
 								 
 								 
!------------------------------------------------------------	!------------------------------------------------------------
!     computtation of zonal tracer flux				!     computtation of zonal tracer flux
!     first calculate the effects of purely horizontal diffus	!     first calculate the effects of purely horizontal diffus
!     isopycnal, the background horizontal diffusion has been	!     isopycnal, the background horizontal diffusion has been
!     before called this subroutine. (jxz)			!     before called this subroutine. (jxz)
!     add in the effects of the along isopycnal diffusion com	!     add in the effects of the along isopycnal diffusion com
!     using "K1" component of the tensor and apply land/sea m	!     using "K1" component of the tensor and apply land/sea m
!------------------------------------------------------------	!------------------------------------------------------------
 								 
!$OMP PARALLEL DO PRIVATE (k,j,i)				!$OMP PARALLEL DO PRIVATE (k,j,i)
      DO k = 1,km						      DO k = 1,km
         DO j = 2,jmm						         DO j = 2,jmm
            DO i = 1,imm					            DO i = 1,imm
               work_2 (i,j,k)= ( ahisop * OTX (j)* (ptb (i +1	               work_2 (i,j,k)= ( ahisop * OTX (j)* (ptb (i +1
                              - ptb (i,j,k,m)) + &		                              - ptb (i,j,k,m)) + &
               ahisop*K1(i,k,j,3)*temp(i,j,k) )*vit(i+1,j,k)*	               ahisop*K1(i,k,j,3)*temp(i,j,k) )*vit(i+1,j,k)*
            END DO						            END DO
         END DO							         END DO
      END DO							      END DO
 								 
 								 
!------------------------------------------------------------	!------------------------------------------------------------
!     compute the vertical tracer flux "work_3" containing th	!     compute the vertical tracer flux "work_3" containing th
!     and K32 components which are to be solved explicitly. T	!     and K32 components which are to be solved explicitly. T
!     component will be treated semi-implicitly			!     component will be treated semi-implicitly
!------------------------------------------------------------	!------------------------------------------------------------
 								 
!$OMP PARALLEL DO PRIVATE (k,j,i)				!$OMP PARALLEL DO PRIVATE (k,j,i)
      DO k = 2,km						      DO k = 2,km
         DO j = 2,jmm						         DO j = 2,jmm
            DO i = 2,imm					            DO i = 2,imm
               work_3 (i,j,k -1) = ahisop * p25* vit (i,j,k)*	               work_3 (i,j,k -1) = ahisop * p25* vit (i,j,k)*
               OTX (j)* K3 (i,k -1,j,1)* &			               OTX (j)* K3 (i,k -1,j,1)* &
               (vit (i -1,j,k )* (ptb (i,j,k,m) - ptb (i -1,j	               (vit (i -1,j,k )* (ptb (i,j,k,m) - ptb (i -1,j
               + vit (i -1,j,k -1)* (ptb (i,j,k -1,m) - ptb (	               + vit (i -1,j,k -1)* (ptb (i,j,k -1,m) - ptb (
               + vit (i +1,j,k )* (ptb (i +1,j,k,m) - ptb (i,	               + vit (i +1,j,k )* (ptb (i +1,j,k,m) - ptb (i,
               + vit (i +1,j,k -1)* (ptb (i +1,j,k -1,m) - pt	               + vit (i +1,j,k -1)* (ptb (i +1,j,k -1,m) - pt
                                  k -1,m))) + &			                                  k -1,m))) + &
               dytr (j)* K3 (i,k -1,j,2)* &			               dytr (j)* K3 (i,k -1,j,2)* &
               (vit (i,j -1,k )* (ptb (i,j,k,m) - ptb (i,j -1	               (vit (i,j -1,k )* (ptb (i,j,k,m) - ptb (i,j -1
               + vit (i,j -1,k -1)* (ptb (i,j,k -1,m) - ptb (	               + vit (i,j -1,k -1)* (ptb (i,j,k -1,m) - ptb (
               + vit (i,j +1,k )* (ptb (i,j +1,k,m) - ptb (i,	               + vit (i,j +1,k )* (ptb (i,j +1,k,m) - ptb (i,
                                   + vit (i,j +1,k -1)* (ptb 	                                   + vit (i,j +1,k -1)* (ptb 
                                    k -1,m) - ptb (i,j,k -1,m	                                    k -1,m) - ptb (i,j,k -1,m
            END DO						            END DO
         END DO							         END DO
      END DO							      END DO
 								 
 								 
!------------------------------------------------------------	!------------------------------------------------------------
!     at ocean surface the flux is set to zero to reflect the	!     at ocean surface the flux is set to zero to reflect the
!     flux condition. Same condition is also imposed at ocean	!     flux condition. Same condition is also imposed at ocean
!------------------------------------------------------------	!------------------------------------------------------------
 								 
!$OMP PARALLEL DO PRIVATE (j,i)					!$OMP PARALLEL DO PRIVATE (j,i)
      DO j = 2,jmm						      DO j = 2,jmm
         DO i = 2,imm						         DO i = 2,imm
            work_3 (i,j, 0)= 0.0				            work_3 (i,j, 0)= 0.0
            work_3 (i,j,km)= 0.0				            work_3 (i,j,km)= 0.0
         END DO							         END DO
      END DO							      END DO
 								 
 								 
!$OMP PARALLEL DO PRIVATE (k,j,i)				!$OMP PARALLEL DO PRIVATE (k,j,i)
      DO k = 1,km						      DO k = 1,km
         DO j = 2,jmm						         DO j = 2,jmm
            DO i = 2,imm					            DO i = 2,imm
               tf2 (i,j,k) = tf2 (i,j,k) &			               tf2 (i,j,k) = tf2 (i,j,k) &
               + cstrdytr (j)* (work_1 (i,j,k) - work_1 (i,j 	               + cstrdytr (j)* (work_1 (i,j,k) - work_1 (i,j 
               + OTX (j) * (work_2 (i,j,k) - work_2 (i -1,j,k	               + OTX (j) * (work_2 (i,j,k) - work_2 (i -1,j,k
                            + dzr (k) * (work_3 (i,j,k -1) - 	                            + dzr (k) * (work_3 (i,j,k -1) - 
            END DO						            END DO
         END DO							         END DO
      END DO							      END DO
 								 
 								 
!------------------------------------------------------------	!------------------------------------------------------------
!     compute the meridional component of the isopycnal veloc	!     compute the meridional component of the isopycnal veloc
!------------------------------------------------------------	!------------------------------------------------------------
 								 
!$OMP PARALLEL DO PRIVATE (k,j,i)				!$OMP PARALLEL DO PRIVATE (k,j,i)
      DO k = 1,km						      DO k = 1,km
         DO j = 2,jmm						         DO j = 2,jmm
            DO i = 2,imm					            DO i = 2,imm
               work_1 (i,j,k) = adv_vntiso (i,k,j)* (ptb (i,j	               work_1 (i,j,k) = adv_vntiso (i,k,j)* (ptb (i,j
                                + ptb (i,j,k,m))		                                + ptb (i,j,k,m))
            END DO						            END DO
         END DO							         END DO
      END DO							      END DO
 								 
#ifdef SPMD 							#ifdef SPMD 
!      if (mytid==0) then					!      if (mytid==0) then
!!$OMP PARALLEL DO PRIVATE (k,i)				!!$OMP PARALLEL DO PRIVATE (k,i)
 !     DO k = 1,km						 !     DO k = 1,km
 !        DO i = 2,imm						 !        DO i = 2,imm
 !           work_1 (i,1,k) = 0.0				 !           work_1 (i,1,k) = 0.0
 !        END DO						 !        END DO
 !     END DO							 !     END DO
 !     end if							 !     end if

!      call exchange_3d(work_1,km)				!      call exchange_3d(work_1,km)
       call exch_boundary(work_1,km)				       call exch_boundary(work_1,km)
#else								#else
!$OMP PARALLEL DO PRIVATE (k,i)					!$OMP PARALLEL DO PRIVATE (k,i)
      DO k = 1,km						      DO k = 1,km
         DO i = 2,imm						         DO i = 2,imm
            work_1 (i,1,k) = 0.0				            work_1 (i,1,k) = 0.0
         END DO							         END DO
      END DO							      END DO
#endif								#endif
 								 
 								 
!------------------------------------------------------------	!------------------------------------------------------------
!     compute the meridional component of the isopycnal veloc	!     compute the meridional component of the isopycnal veloc
!------------------------------------------------------------	!------------------------------------------------------------
 								 
!$OMP PARALLEL DO PRIVATE (k,j,i)				!$OMP PARALLEL DO PRIVATE (k,j,i)
      DO k = 1,km						      DO k = 1,km
         DO j = 2,jmm						         DO j = 2,jmm
            DO i = 1,imm					            DO i = 1,imm
               work_2 (i,j,k) = adv_vetiso (i,k,j)* (ptb (i +	               work_2 (i,j,k) = adv_vetiso (i,k,j)* (ptb (i +
                                + ptb (i,j,k,m))		                                + ptb (i,j,k,m))
            END DO						            END DO
         END DO							         END DO
      END DO							      END DO
 								 
 							      <
!------------------------------------------------------------	!------------------------------------------------------------
!     compute the vertical component of the isopycnal velocit	!     compute the vertical component of the isopycnal velocit
!------------------------------------------------------------	!------------------------------------------------------------
 								 
!$OMP PARALLEL DO PRIVATE (j,i)					!$OMP PARALLEL DO PRIVATE (j,i)
      DO j = 2,jmm						      DO j = 2,jmm
         DO i = 2,imm						         DO i = 2,imm
            work_3 (i,j, 0)= 0.0				            work_3 (i,j, 0)= 0.0
            work_3 (i,j,km)= 0.0				            work_3 (i,j,km)= 0.0
         END DO							         END DO
      END DO							      END DO
 								 
 								 
!$OMP PARALLEL DO PRIVATE (k,j,i)				!$OMP PARALLEL DO PRIVATE (k,j,i)
      DO k = 2,km						      DO k = 2,km
         DO j = 2,jmm						         DO j = 2,jmm
            DO i = 2,imm					            DO i = 2,imm
               work_3 (i,j,k -1)= adv_vbtiso (i,k -1,j)* (ptb	               work_3 (i,j,k -1)= adv_vbtiso (i,k -1,j)* (ptb
                                + ptb (i,j,k -1,m))		                                + ptb (i,j,k -1,m))
            END DO						            END DO
         END DO							         END DO
      END DO							      END DO
 								 
 								 
!$OMP PARALLEL DO PRIVATE (k,j,i)				!$OMP PARALLEL DO PRIVATE (k,j,i)
      DO k = 1,km						      DO k = 1,km
         DO j = 2,jmm						         DO j = 2,jmm
            DO i = 2,imm					            DO i = 2,imm
               tf2(i,j,k) = tf2(i,j,k) &			               tf2(i,j,k) = tf2(i,j,k) &
               - p5* cstrdytr (j)* (work_1 (i,j,k) - work_1 (	               - p5* cstrdytr (j)* (work_1 (i,j,k) - work_1 (
               - p5* OTX (j) * (work_2 (i,j,k) - work_2 (i -1	               - p5* OTX (j) * (work_2 (i,j,k) - work_2 (i -1
                            - p5* dzr (k) * (work_3 (i,j,k -1	                            - p5* dzr (k) * (work_3 (i,j,k -1
                              - work_3 (i,j,k)) 		                              - work_3 (i,j,k)) 
            END DO						            END DO
         END DO							         END DO
      END DO							      END DO

      deallocate (work_1,work_2,work_3,temp)			      deallocate (work_1,work_2,work_3,temp)
 								 
      RETURN							      RETURN
      END SUBROUTINE ISOFLUX_PT					      END SUBROUTINE ISOFLUX_PT
 								 
 								 
#else								#else
      SUBROUTINE ISOFLUX_PT ()					      SUBROUTINE ISOFLUX_PT ()
      RETURN							      RETURN
      END SUBROUTINE ISOFLUX_PT					      END SUBROUTINE ISOFLUX_PT
#endif 								#endif 


! CVS: $Id: intfor_pt.F90,v 2.1 2004/06/10 07:45:17 cvsroot E	! CVS: $Id: intfor_pt.F90,v 2.1 2004/06/10 07:45:17 cvsroot E
  SUBROUTINE INTFOR_PT						  SUBROUTINE INTFOR_PT
!========================					!========================
! INTFOR_PT							! INTFOR_PT
!------------------------------------------------------------	!------------------------------------------------------------
!								!
! purpose: interpolate the observed yely data to certain day	! purpose: interpolate the observed yely data to certain day
!								!
!lyc 2013,07							!lyc 2013,07
!------------------------------------------------------------	!------------------------------------------------------------
#include <def-undef.h>       					#include <def-undef.h>       
!								!
      USE param_mod						      USE param_mod
      USE pconst_mod, ONLY: nmonth,mon0,iday,vit,j_global	      USE pconst_mod, ONLY: nmonth,mon0,iday,vit,j_global
      USE carbon_mod						      USE carbon_mod
      USE cforce_mod						      USE cforce_mod
      USE forc_mod						      USE forc_mod
!								!
!------------------------------------------------------------	!------------------------------------------------------------
      IMPLICIT NONE						      IMPLICIT NONE
!      								!      
      INTEGER::nn						      INTEGER::nn
      REAL::days						      REAL::days

      INTEGER::ipt1,ipt2					      INTEGER::ipt1,ipt2
      REAL::factor						      REAL::factor
     								     
      if(mytid==0) print*,' entering intfor_pt'			      if(mytid==0) print*,' entering intfor_pt'

      days=REAL(iday)						      days=REAL(iday)
      DO i=1,mon0-1						      DO i=1,mon0-1
        days=days+REAL(nmonth(i))				        days=days+REAL(nmonth(i))
      ENDDO							      ENDDO

      IF(iday<=15) THEN						      IF(iday<=15) THEN
        ipt1=mon0-1						        ipt1=mon0-1
        IF(ipt1==0) ipt1=12					        IF(ipt1==0) ipt1=12
        ipt2=mon0						        ipt2=mon0
        factor=REAL(iday-15)/REAL(nmonth(ipt1))+1		        factor=REAL(iday-15)/REAL(nmonth(ipt1))+1
      ELSE							      ELSE
        ipt1=mon0						        ipt1=mon0
        ipt2=MOD(mon0,12)+1					        ipt2=MOD(mon0,12)+1
        factor=REAL(iday-15)/REAL(nmonth(ipt1))			        factor=REAL(iday-15)/REAL(nmonth(ipt1))
      ENDIF							      ENDIF

!lyc 2014.07.01							!lyc 2014.07.01
       do j=1,jmt						       do j=1,jmt
        do i=1,imt						        do i=1,imt
          w22np(i,j)=sqrt(wspdu3(i,j,1)**2+wspdv3(i,j,1)**2)	          w22np(i,j)=sqrt(wspdu3(i,j,1)**2+wspdv3(i,j,1)**2)
          pressureday(i,j)=psa3(i,j,1)/1.01325*1.0E-5		          pressureday(i,j)=psa3(i,j,1)/1.01325*1.0E-5
        enddo							        enddo
       enddo							       enddo
!								!
!!$OMP PARALLEL DO PRIVATE(j,i)					!!$OMP PARALLEL DO PRIVATE(j,i)
!      DO j=1,jmt						!      DO j=1,jmt
!        DO i=1,imt						!        DO i=1,imt
!          w22np(i,j)=(winds(i,j,ipt2)-winds(i,j,ipt1))*facto	!          w22np(i,j)=(winds(i,j,ipt2)-winds(i,j,ipt1))*facto
!!cm090330----------------------------------------		!!cm090330----------------------------------------
!          pressureday(i,j)=(pressure(i,j,ipt2)-pressure(i,j,	!          pressureday(i,j)=(pressure(i,j,ipt2)-pressure(i,j,
!!cm090330----------------------------------------		!!cm090330----------------------------------------
!        ENDDO							!        ENDDO
!      ENDDO							!      ENDDO
!#endif								!#endif

#ifdef carbonBio						#ifdef carbonBio
#ifdef murnane1999						#ifdef murnane1999
!$OMP PARALLEL DO PRIVATE(k,j,i)				!$OMP PARALLEL DO PRIVATE(k,j,i)
      DO k=1,kmmix						      DO k=1,kmmix
        DO j=1,jmt						        DO j=1,jmt
          DO i=1,imt						          DO i=1,imt
            po4force(i,j,k)=(po4obs(i,j,k,ipt2)-po4obs(i,j,k,	            po4force(i,j,k)=(po4obs(i,j,k,ipt2)-po4obs(i,j,k,
          ENDDO							          ENDDO
        ENDDO							        ENDDO
      ENDDO							      ENDDO
#endif								#endif
!								!
#ifdef progca							#ifdef progca
!$OMP PARALLEL DO PRIVATE(k,j,i)				!$OMP PARALLEL DO PRIVATE(k,j,i)
      DO k=1,km							      DO k=1,km
        taforce(k)=(taobs(k,ipt2)-taobs(k,ipt1))*factor+taobs	        taforce(k)=(taobs(k,ipt2)-taobs(k,ipt1))*factor+taobs
!								!
      ENDDO							      ENDDO
#endif     							#endif     
!------------------------------------------------------------	!------------------------------------------------------------
! for iron flux							! for iron flux
! Whenever FE_FLUX_DATA AND DUST_DATA are true or false, fe_f	! Whenever FE_FLUX_DATA AND DUST_DATA are true or false, fe_f
! If FE_FLUX_DATA is true, dust_f is the iron  which is relea	! If FE_FLUX_DATA is true, dust_f is the iron  which is relea
! If DUST_DATA is true, dust_f is the dust which sinks in the	! If DUST_DATA is true, dust_f is the dust which sinks in the
!------------------------------------------------------------	!------------------------------------------------------------
!$OMP PARALLEL DO PRIVATE(j,i)					!$OMP PARALLEL DO PRIVATE(j,i)
        DO j=1,jmt						        DO j=1,jmt
          DO i=1,imt						          DO i=1,imt
           fe_f(i,j)=((fe_flux(i,j,ipt2)-fe_flux(i,j,ipt1))*f	           fe_f(i,j)=((fe_flux(i,j,ipt2)-fe_flux(i,j,ipt1))*f
           dust_f(i,j)=((dust_flux(i,j,ipt2)-dust_flux(i,j,ip	           dust_f(i,j)=((dust_flux(i,j,ipt2)-dust_flux(i,j,ip
           if(isnan(fe_f(i,j)).or.fe_f(i,j)>1.0) then		           if(isnan(fe_f(i,j)).or.fe_f(i,j)>1.0) then
           print*, 'fe flux is error',fe_f(i,j),ipt1,fe_flux(	           print*, 'fe flux is error',fe_f(i,j),ipt1,fe_flux(
           stop							           stop
           endif						           endif
          ENDDO							          ENDDO
        ENDDO							        ENDDO
!       if(mytid==1) then					!       if(mytid==1) then
!        print *, 'fe_f,fe_flux',fe_f(91,jmt/2),fe_flux(91,jm	!        print *, 'fe_f,fe_flux',fe_f(91,jmt/2),fe_flux(91,jm
!       endif							!       endif
#endif								#endif

#if (defined carbonC) || (defined carbonBio) ||(defined carbo	#if (defined carbonC) || (defined carbonBio) ||(defined carbo
#ifdef preindustrial						#ifdef preindustrial
      pco2dry=280.776						      pco2dry=280.776
#else								#else
!cm080415							!cm080415
!      nn=INT(days/365.0*2.0)+2*(yearR+yearStart-yearData)-1	!      nn=INT(days/365.0*2.0)+2*(yearR+yearStart-yearData)-1
      nn=INT(days/365.0*2.0)+2*(yearR+yearStart-yearData-1)-1	      nn=INT(days/365.0*2.0)+2*(yearR+yearStart-yearData-1)-1
      if(days<=182.5) then					      if(days<=182.5) then
          pco2dry=(csg(nn+1)-csg(nn))*days/365.0*2.0+csg(nn)	          pco2dry=(csg(nn+1)-csg(nn))*days/365.0*2.0+csg(nn)
      else							      else
         pco2dry=(csg(nn+1)-csg(nn))*(days/365.0*2.0-1)+csg(n	         pco2dry=(csg(nn+1)-csg(nn))*(days/365.0*2.0-1)+csg(n
      endif							      endif
!cm080415							!cm080415
#endif								#endif
#endif								#endif
!								!
!lyc								!lyc
#ifdef cfc							#ifdef cfc
!cm080415							!cm080415
!    nn=yearR+(yearStart-yearData)				!    nn=yearR+(yearStart-yearData)
    nn=yearR+(yearStart-yearData-1)				    nn=yearR+(yearStart-yearData-1)
!cm080415							!cm080415
     cfcatm(1)=(bomn(nn+1)-bomn(nn))*days/365.0+bomn(nn)	     cfcatm(1)=(bomn(nn+1)-bomn(nn))*days/365.0+bomn(nn)
     cfcatm(2)=(boms(nn+1)-boms(nn))*days/365.0+boms(nn)	     cfcatm(2)=(boms(nn+1)-boms(nn))*days/365.0+boms(nn)
#endif 								#endif 

#ifdef carbonC14						#ifdef carbonC14
#ifdef preindustrial						#ifdef preindustrial
     catm(1)= 100.0						     catm(1)= 100.0
     catm(2)= 100.0						     catm(2)= 100.0
     catm(3)= 100.0						     catm(3)= 100.0
#else								#else
!cm080415							!cm080415
!      nn=yearR+(yearStart-yearData)				!      nn=yearR+(yearStart-yearData)
      nn=yearR+(yearStart-yearData-1)				      nn=yearR+(yearStart-yearData-1)
!cm080415							!cm080415
!     interpolate the carbon concentrations to a given day	!     interpolate the carbon concentrations to a given day
      catm(1)=(boml(nn+1)-boml(nn))*days/365.0+boml(nn)		      catm(1)=(boml(nn+1)-boml(nn))*days/365.0+boml(nn)
      catm(2)=(bomm(nn+1)-bomm(nn))*days/365.0+bomm(nn)		      catm(2)=(bomm(nn+1)-bomm(nn))*days/365.0+bomm(nn)
      catm(3)=(bomh(nn+1)-bomh(nn))*days/365.0+bomh(nn)		      catm(3)=(bomh(nn+1)-bomh(nn))*days/365.0+bomh(nn)
#endif								#endif
#endif      							#endif      
      if(mytid==0) print*,' intfor_pt is ok'			      if(mytid==0) print*,' intfor_pt is ok'

      Return							      Return

      END SUBROUTINE INTFOR_PT					      END SUBROUTINE INTFOR_PT

! CVS: $Id: ssave_pt.F90,v 2.1 2004/06/10 07:45:18 cvsroot Ex	! CVS: $Id: ssave_pt.F90,v 2.1 2004/06/10 07:45:18 cvsroot Ex
  SUBROUTINE SSAVE_PT						  SUBROUTINE SSAVE_PT
!========================					!========================
! SSAVE_PT							! SSAVE_PT
!------------------------------------------------------------	!------------------------------------------------------------
!								!
! purpose: save, smooth and reset some array for CARBON model	! purpose: save, smooth and reset some array for CARBON model
!								!
! author: Zhao Liang@lapc 2004/03/04				! author: Zhao Liang@lapc 2004/03/04
!								!
!------------------------------------------------------------	!------------------------------------------------------------
#include <def-undef.h>       					#include <def-undef.h>       
!								!
      USE param_mod						      USE param_mod
      USE pconst_mod						      USE pconst_mod
      USE carbon_mod						      USE carbon_mod
      USE cforce_mod						      USE cforce_mod
      USE coutput_mod						      USE coutput_mod
      USE cdf_mod						      USE cdf_mod
#ifdef SPMD      						#ifdef SPMD      
      USE msg_mod,only:mpi_comm_ocn				      USE msg_mod,only:mpi_comm_ocn
#endif      							#endif      
#ifdef COUP							#ifdef COUP
      use buf_mod,only:pco2ups					      use buf_mod,only:pco2ups
#endif								#endif
!								!
!------------------------------------------------------------	!------------------------------------------------------------
      IMPLICIT NONE						      IMPLICIT NONE
#include <netcdf.inc>      					#include <netcdf.inc>      
!#ifdef SPMD      						!#ifdef SPMD      
!#include <mpif.h>						!#include <mpif.h>
!#endif      							!#endif      
!!      							!!      
      CHARACTER ( LEN =   4 ) :: ftail				      CHARACTER ( LEN =   4 ) :: ftail
      CHARACTER ( LEN =  15 ) :: fname				      CHARACTER ( LEN =  15 ) :: fname
      CHARACTER ( LEN =  24 ) :: fname32			      CHARACTER ( LEN =  24 ) :: fname32
      LOGICAL :: hist_output,rest_output			      LOGICAL :: hist_output,rest_output
      INTEGER :: nwmf,nday1,np,t0_cdf_pt			      INTEGER :: nwmf,nday1,np,t0_cdf_pt
      REAL    :: overd						      REAL    :: overd
      integer lon_len,lat_len,lev_len,lev1_len,time_len	      |	      integer lon_len,lat_len,lev_len,lev1_len,time_len ! jua
							      >
#if (!defined NORMAL)						#if (!defined NORMAL)
!       integer,dimension(3)::start3,count3 			!       integer,dimension(3)::start3,count3 
!       integer,dimension(4)::start4,count4			!       integer,dimension(4)::start4,count4
!       character::iret,ncid					!       character::iret,ncid
        real(kind=4),dimension(imt_global,jmt_global)::cc2	        real(kind=4),dimension(imt_global,jmt_global)::cc2
        real(kind=4),dimension(imt_global,jmt_global,km)::cc3	        real(kind=4),dimension(imt_global,jmt_global,km)::cc3
        real(kind=4),parameter::spvalc=1.0E+35			        real(kind=4),parameter::spvalc=1.0E+35
        integer,dimension(3)::totup_dims,tpco2o_dims,tdpco2_d	        integer,dimension(3)::totup_dims,tpco2o_dims,tdpco2_d
        integer,dimension(4)::cc_dims,po4_dims,ldoc_dims,ta_d	        integer,dimension(4)::cc_dims,po4_dims,ldoc_dims,ta_d
        integer::totup_id,tpco2o_id,tdpco2_id,cc_id,po4_id,ld	        integer::totup_id,tpco2o_id,tdpco2_id,cc_id,po4_id,ld
        character(len=10)::dd,tt				        character(len=10)::dd,tt
        character(len=5)::zz					        character(len=5)::zz
        integer*4::vv(8)					        integer*4::vv(8)
#endif 								#endif 
 								 
 								 
!------------------------------------------------------------	!------------------------------------------------------------
!     output monthly results					!     output monthly results
!------------------------------------------------------------	!------------------------------------------------------------
      nday1  = nmonth(mon0)					      nday1  = nmonth(mon0)
      overd = 1.0/REAL(nday1)					      overd = 1.0/REAL(nday1)
      lon_len=imt_global				      <
      lat_len=jmt_global				      <
      lev_len=km					      <
      lev1_len=km+1					      <
      time_len=1					      <

      DO k=1,klv						      DO k=1,klv
        DO j=1,jmt						        DO j=1,jmt
          DO i=1,imt						          DO i=1,imt
            IF(VIT(i,j,k)>0.0) THEN				            IF(VIT(i,j,k)>0.0) THEN
              CCMON(i,j,k)     = CCMON(i,j,k)*overd		              CCMON(i,j,k)     = CCMON(i,j,k)*overd
#ifdef carbonBio						#ifdef carbonBio
              po4mon(i,j,k)    = po4mon(i,j,k)*overd		              po4mon(i,j,k)    = po4mon(i,j,k)*overd
              ldocmon(i,j,k)   = ldocmon(i,j,k)*overd		              ldocmon(i,j,k)   = ldocmon(i,j,k)*overd
              tamon(i,j,k)     = tamon(i,j,k)*overd		              tamon(i,j,k)     = tamon(i,j,k)*overd
              o2mon(i,j,k)     = o2mon(i,j,k)*overd		              o2mon(i,j,k)     = o2mon(i,j,k)*overd
!lyc 2013,07							!lyc 2013,07
              femon(i,j,k)     = femon(i,j,k)*overd		              femon(i,j,k)     = femon(i,j,k)*overd
              prodmon (i,j,k)  = prodmon(i,j,k)*overd		              prodmon (i,j,k)  = prodmon(i,j,k)*overd
              fpopmon (i,j,k)  = fpopmon(i,j,k)*overd		              fpopmon (i,j,k)  = fpopmon(i,j,k)*overd
              pldocmon (i,j,k) = pldocmon(i,j,k)*overd		              pldocmon (i,j,k) = pldocmon(i,j,k)*overd
              remimon (i,j,k)  = remimon(i,j,k)*overd		              remimon (i,j,k)  = remimon(i,j,k)*overd
              jpopmon (i,j,k)  = jpopmon(i,j,k)*overd		              jpopmon (i,j,k)  = jpopmon(i,j,k)*overd
              caco3mon (i,j,k) = caco3mon(i,j,k)*overd		              caco3mon (i,j,k) = caco3mon(i,j,k)*overd
#endif								#endif
            ELSE						            ELSE
              CCMON(i,j,k)     = 0.0				              CCMON(i,j,k)     = 0.0
#ifdef carbonBio						#ifdef carbonBio
              po4mon(i,j,k)    = 0.0				              po4mon(i,j,k)    = 0.0
              ldocmon(i,j,k)   = 0.0				              ldocmon(i,j,k)   = 0.0
              tamon(i,j,k)     = 0.0				              tamon(i,j,k)     = 0.0
!lyc 2013,07							!lyc 2013,07
              o2mon(i,j,k)     = 0.0				              o2mon(i,j,k)     = 0.0
              femon(i,j,k)     = 0.0				              femon(i,j,k)     = 0.0
              prodmon (i,j,k)  = 0.0				              prodmon (i,j,k)  = 0.0
              fpopmon (i,j,k)  = 0.0				              fpopmon (i,j,k)  = 0.0
              pldocmon (i,j,k) = 0.0				              pldocmon (i,j,k) = 0.0
              remimon (i,j,k)  = 0.0				              remimon (i,j,k)  = 0.0
              jpopmon (i,j,k)  = 0.0				              jpopmon (i,j,k)  = 0.0
              caco3mon (i,j,k) = 0.0				              caco3mon (i,j,k) = 0.0
#endif								#endif
            ENDIF						            ENDIF
          ENDDO							          ENDDO
        ENDDO							        ENDDO
      ENDDO							      ENDDO
!------------------------------------------------------------	!------------------------------------------------------------
!     file name							!     file name
#ifdef COUP							#ifdef COUP
      nwmf= iyfm						      nwmf= iyfm
#else								#else
!lyc20121024      nwmf = yearStart + yearR - 1			!lyc20121024      nwmf = yearStart + yearR - 1
      nwmf = yearStart + yearR					      nwmf = yearStart + yearR
#endif								#endif
      WRITE (ftail,'(i4.4)') nwmf				      WRITE (ftail,'(i4.4)') nwmf

      fname(1:5)='CCMON'					      fname(1:5)='CCMON'
      fname(6:9)=ftail						      fname(6:9)=ftail
      fname(10:12)=abmon(mon0)					      fname(10:12)=abmon(mon0)
 								 
      IF (nwmf >= yearStore .and. mod (nwmf,IO_out)==0 ) THEN	      IF (nwmf >= yearStore .and. mod (nwmf,IO_out)==0 ) THEN
        hist_output=.true.					        hist_output=.true.
      ELSE							      ELSE
        hist_output=.false.					        hist_output=.false.
      ENDIF							      ENDIF
!								!
      IF (mod ((monthR-1),io_rest)==0 ) THEN			      IF (mod ((monthR-1),io_rest)==0 ) THEN
        rest_output=.true.					        rest_output=.true.
      ELSE							      ELSE
        rest_output=.false.					        rest_output=.false.
      ENDIF							      ENDIF
!								!
#ifdef SPMD							#ifdef SPMD
#ifdef printcall						#ifdef printcall
#ifdef SPMD							#ifdef SPMD
      print*, "call local to global in ssave_pt, mytid=",myti	      print*, "call local to global in ssave_pt, mytid=",myti
#else								#else
      print*, "call local to global in ssave_pt"		      print*, "call local to global in ssave_pt"
#endif								#endif
#endif								#endif
!      								!      
      CALL local_to_global_pt(hist_output,rest_output)		      CALL local_to_global_pt(hist_output,rest_output)
!								!
#if (defined carbonC14)||(defined cfc)				#if (defined carbonC14)||(defined cfc)
      call local_to_global_4d_double(totup,totup_io,1,1)	      call local_to_global_4d_double(totup,totup_io,1,1)
#endif      							#endif      
      IF (hist_output.AND.mytid==0) THEN			      IF (hist_output.AND.mytid==0) THEN
#else								#else
      IF (hist_output) THEN					      IF (hist_output) THEN
#endif 								#endif 
!************************************************************	!************************************************************
#if (defined NORMAL) || (defined ALL)				#if (defined NORMAL) || (defined ALL)
 								 
         OPEN (87,FILE = FNAME(1:12),FORM ='UNFORMATTED',STAT	         OPEN (87,FILE = FNAME(1:12),FORM ='UNFORMATTED',STAT
 								 
         WRITE (87) nwmf,monthR -1				         WRITE (87) nwmf,monthR -1
#if (defined carbonC14)||(defined cfc)				#if (defined carbonC14)||(defined cfc)
#ifdef SPMD							#ifdef SPMD
	  write(87) ((totup_io(i,j),i=1,imt_global),j=1,jmt_g		  write(87) ((totup_io(i,j),i=1,imt_global),j=1,jmt_g
#else								#else
	  write(87) ((totup(i,j),i=1,imt),j=1,jmt)			  write(87) ((totup(i,j),i=1,imt),j=1,jmt)
#endif								#endif
#endif								#endif
#ifdef SPMD							#ifdef SPMD
         DO k = 1,km						         DO k = 1,km
           WRITE (87) ( (ccmon_io   (i,j,k),i = 1,imt_global)	           WRITE (87) ( (ccmon_io   (i,j,k),i = 1,imt_global)
#ifdef carbonBio						#ifdef carbonBio
           WRITE (87) ( (po4mon_io  (i,j,k),i = 1,imt_global)	           WRITE (87) ( (po4mon_io  (i,j,k),i = 1,imt_global)
           WRITE (87) ( (ldocmon_io (i,j,k),i = 1,imt_global)	           WRITE (87) ( (ldocmon_io (i,j,k),i = 1,imt_global)
           WRITE (87) ( (tamon_io   (i,j,k),i = 1,imt_global)	           WRITE (87) ( (tamon_io   (i,j,k),i = 1,imt_global)
           WRITE (87) ( (o2mon_io   (i,j,k),i = 1,imt_global)	           WRITE (87) ( (o2mon_io   (i,j,k),i = 1,imt_global)
!lyc 2013,07							!lyc 2013,07
           WRITE (87) ( (femon_io   (i,j,k),i = 1,imt_global)	           WRITE (87) ( (femon_io   (i,j,k),i = 1,imt_global)
           WRITE (87) ( (prodmon_io (i,j,k),i = 1,imt_global)	           WRITE (87) ( (prodmon_io (i,j,k),i = 1,imt_global)
           WRITE (87) ( (fpopmon_io (i,j,k),i = 1,imt_global)	           WRITE (87) ( (fpopmon_io (i,j,k),i = 1,imt_global)
           WRITE (87) ( (pldocmon_io(i,j,k),i = 1,imt_global)	           WRITE (87) ( (pldocmon_io(i,j,k),i = 1,imt_global)
           WRITE (87) ( (remimon_io (i,j,k),i = 1,imt_global)	           WRITE (87) ( (remimon_io (i,j,k),i = 1,imt_global)
           WRITE (87) ( (jpopmon_io (i,j,k),i = 1,imt_global)	           WRITE (87) ( (jpopmon_io (i,j,k),i = 1,imt_global)
           WRITE (87) ( (caco3mon_io(i,j,k),i = 1,imt_global)	           WRITE (87) ( (caco3mon_io(i,j,k),i = 1,imt_global)
#endif								#endif
         ENDDO							         ENDDO
#else								#else
         DO k = 1,km						         DO k = 1,km
           WRITE (87) ( (ccmon   (i,j,k),i = 1,imt),j = 1,jmt	           WRITE (87) ( (ccmon   (i,j,k),i = 1,imt),j = 1,jmt
#ifdef carbonBio						#ifdef carbonBio
           WRITE (87) ( (po4mon  (i,j,k),i = 1,imt),j = 1,jmt	           WRITE (87) ( (po4mon  (i,j,k),i = 1,imt),j = 1,jmt
           WRITE (87) ( (ldocmon (i,j,k),i = 1,imt),j = 1,jmt	           WRITE (87) ( (ldocmon (i,j,k),i = 1,imt),j = 1,jmt
           WRITE (87) ( (tamon   (i,j,k),i = 1,imt),j = 1,jmt	           WRITE (87) ( (tamon   (i,j,k),i = 1,imt),j = 1,jmt
           WRITE (87) ( (o2mon   (i,j,k),i = 1,imt),j = 1,jmt	           WRITE (87) ( (o2mon   (i,j,k),i = 1,imt),j = 1,jmt
!lyc 2013,07							!lyc 2013,07
           WRITE (87) ( (femon   (i,j,k),i = 1,imt),j = 1,jmt	           WRITE (87) ( (femon   (i,j,k),i = 1,imt),j = 1,jmt
           WRITE (87) ( (prodmon (i,j,k),i = 1,imt),j = 1,jmt	           WRITE (87) ( (prodmon (i,j,k),i = 1,imt),j = 1,jmt
           WRITE (87) ( (fpopmon (i,j,k),i = 1,imt),j = 1,jmt	           WRITE (87) ( (fpopmon (i,j,k),i = 1,imt),j = 1,jmt
           WRITE (87) ( (pldocmon(i,j,k),i = 1,imt),j = 1,jmt	           WRITE (87) ( (pldocmon(i,j,k),i = 1,imt),j = 1,jmt
           WRITE (87) ( (remimon (i,j,k),i = 1,imt),j = 1,jmt	           WRITE (87) ( (remimon (i,j,k),i = 1,imt),j = 1,jmt
           WRITE (87) ( (jpopmon (i,j,k),i = 1,imt),j = 1,jmt	           WRITE (87) ( (jpopmon (i,j,k),i = 1,imt),j = 1,jmt
           WRITE (87) ( (caco3mon(i,j,k),i = 1,imt),j = 1,jmt	           WRITE (87) ( (caco3mon(i,j,k),i = 1,imt),j = 1,jmt
#endif								#endif
         ENDDO							         ENDDO
#endif								#endif
 								 
         CLOSE (87)						         CLOSE (87)
!								!
#if (defined carbonC) || (defined carbonBio) 			#if (defined carbonC) || (defined carbonBio) 
         FNAME='Ctime'//ftail//abmon(mon0)			         FNAME='Ctime'//ftail//abmon(mon0)
         OPEN (97,FILE = FNAME(1:12),FORM ='UNFORMATTED',STAT	         OPEN (97,FILE = FNAME(1:12),FORM ='UNFORMATTED',STAT
!								!
#ifdef carbonC 							#ifdef carbonC 
#ifdef SPMD							#ifdef SPMD
         WRITE (97) totup_io,tpco2o_io,tdpco2o_io,nwmf,monthR	         WRITE (97) totup_io,tpco2o_io,tdpco2o_io,nwmf,monthR
#else								#else
         WRITE (97) totup,tpco2o,tdpco2o,nwmf,monthR-1		         WRITE (97) totup,tpco2o,tdpco2o,nwmf,monthR-1
#endif								#endif
#endif								#endif
!								!
#ifdef carbonBio 						#ifdef carbonBio 
#ifdef SPMD							#ifdef SPMD
         WRITE (97) totup_io,tpco2o_io,tdpco2o_io,tocaco3_io,	         WRITE (97) totup_io,tpco2o_io,tdpco2o_io,tocaco3_io,
#else								#else
         WRITE (97) totup,tpco2o,tdpco2o,tocao3,toa0,nwmf,mon	         WRITE (97) totup,tpco2o,tdpco2o,tocao3,toa0,nwmf,mon
#endif								#endif
#endif								#endif
         CLOSE (97)						         CLOSE (97)
#endif								#endif
!************************************************************	!************************************************************
#else								#else
#ifdef carbonBio						#ifdef carbonBio
         fname(13:15)='.nc'					         fname(13:15)='.nc'
! output option (netcdf)					! output option (netcdf)
        ! enter define mode					        ! enter define mode
         iret = nf_create (fname, NF_CLOBBER, ncid)		         iret = nf_create (fname, NF_CLOBBER, ncid)
         CALL check_err (iret)					         CALL check_err (iret)
! define dimensions						! define dimensions
         iret = nf_def_dim (ncid, 'lat', lat_len, lat_dim)	         iret = nf_def_dim (ncid, 'lat', lat_len, lat_dim)
         CALL check_err (iret)					         CALL check_err (iret)
         iret = nf_def_dim (ncid, 'lon', lon_len, lon_dim)	         iret = nf_def_dim (ncid, 'lon', lon_len, lon_dim)
         CALL check_err (iret)					         CALL check_err (iret)

      IF (mon0 == 12) THEN					      IF (mon0 == 12) THEN
          iret = nf_def_dim (ncid, 'lev', lev_len, lev_dim)	          iret = nf_def_dim (ncid, 'lev', lev_len, lev_dim)
          CALL check_err (iret)					          CALL check_err (iret)
      ELSE							      ELSE
          iret = nf_def_dim (ncid, 'lev', klv, lev_dim)		          iret = nf_def_dim (ncid, 'lev', klv, lev_dim)
          CALL check_err (iret)					          CALL check_err (iret)
      END IF							      END IF
       iret = nf_def_dim (ncid, 'time', NF_UNLIMITED, time_di	       iret = nf_def_dim (ncid, 'time', NF_UNLIMITED, time_di
!      iret = nf_def_dim(ncid, 'time', time_len, time_dim)	!      iret = nf_def_dim(ncid, 'time', time_len, time_dim)
         CALL check_err (iret)					         CALL check_err (iret)

! define variables						! define variables

        lat_dims (1) = lat_dim					        lat_dims (1) = lat_dim
         iret = nf_def_var (ncid, 'lat', NF_REAL, lat_rank, l	         iret = nf_def_var (ncid, 'lat', NF_REAL, lat_rank, l
         CALL check_err (iret)					         CALL check_err (iret)
!								!
         lon_dims (1) = lon_dim					         lon_dims (1) = lon_dim
         iret = nf_def_var (ncid, 'lon', NF_REAL, lon_rank, l	         iret = nf_def_var (ncid, 'lon', NF_REAL, lon_rank, l
         CALL check_err (iret)					         CALL check_err (iret)
!								!
         lev_dims (1) = lev_dim					         lev_dims (1) = lev_dim
         iret = nf_def_var (ncid, 'lev', NF_REAL, lev_rank, l	         iret = nf_def_var (ncid, 'lev', NF_REAL, lev_rank, l
         CALL check_err (iret)					         CALL check_err (iret)
         time_dims (1) = time_dim				         time_dims (1) = time_dim
         iret = nf_def_var (ncid, 'time', NF_DOUBLE, time_ran	         iret = nf_def_var (ncid, 'time', NF_DOUBLE, time_ran
         CALL check_err (iret)					         CALL check_err (iret)

         totup_dims (3) = time_dim				         totup_dims (3) = time_dim
         totup_dims (2) = lat_dim				         totup_dims (2) = lat_dim
         totup_dims (1) = lon_dim				         totup_dims (1) = lon_dim
         iret = nf_def_var (ncid, 'totup', NF_REAL,3 , totup_	         iret = nf_def_var (ncid, 'totup', NF_REAL,3 , totup_
         CALL check_err (iret)					         CALL check_err (iret)
         tpco2o_dims (3) = time_dim				         tpco2o_dims (3) = time_dim
         tpco2o_dims (2) = lat_dim				         tpco2o_dims (2) = lat_dim
         tpco2o_dims (1) = lon_dim				         tpco2o_dims (1) = lon_dim
         iret = nf_def_var (ncid, 'tpco2o', NF_REAL,3 , tpco2	         iret = nf_def_var (ncid, 'tpco2o', NF_REAL,3 , tpco2
         CALL check_err (iret)					         CALL check_err (iret)
         tdpco2_dims (3) = time_dim				         tdpco2_dims (3) = time_dim
         tdpco2_dims (2) = lat_dim				         tdpco2_dims (2) = lat_dim
         tdpco2_dims (1) = lon_dim				         tdpco2_dims (1) = lon_dim
         iret = nf_def_var (ncid, 'tdpco2', NF_REAL,3 , tdpco	         iret = nf_def_var (ncid, 'tdpco2', NF_REAL,3 , tdpco
         CALL check_err (iret)					         CALL check_err (iret)
         cc_dims (4) = time_dim					         cc_dims (4) = time_dim
         cc_dims (3) = lev_dim					         cc_dims (3) = lev_dim
         cc_dims (2) = lat_dim					         cc_dims (2) = lat_dim
         cc_dims (1) = lon_dim					         cc_dims (1) = lon_dim
         iret = nf_def_var (ncid, 'tc', NF_REAL,4 , cc_dims, 	         iret = nf_def_var (ncid, 'tc', NF_REAL,4 , cc_dims, 
         CALL check_err (iret)					         CALL check_err (iret)
         po4_dims (4) = time_dim				         po4_dims (4) = time_dim
         po4_dims (3) = lev_dim					         po4_dims (3) = lev_dim
         po4_dims (2) = lat_dim					         po4_dims (2) = lat_dim
         po4_dims (1) = lon_dim					         po4_dims (1) = lon_dim
         iret = nf_def_var (ncid, 'po4', NF_REAL,4 , po4_dims	         iret = nf_def_var (ncid, 'po4', NF_REAL,4 , po4_dims
         CALL check_err (iret)					         CALL check_err (iret)
         ldoc_dims (4) = time_dim				         ldoc_dims (4) = time_dim
         ldoc_dims (3) = lev_dim				         ldoc_dims (3) = lev_dim
         ldoc_dims (2) = lat_dim				         ldoc_dims (2) = lat_dim
         ldoc_dims (1) = lon_dim				         ldoc_dims (1) = lon_dim
         iret = nf_def_var (ncid, 'ldoc', NF_REAL,4 , ldoc_di	         iret = nf_def_var (ncid, 'ldoc', NF_REAL,4 , ldoc_di
         CALL check_err (iret)					         CALL check_err (iret)
         ta_dims (4) = time_dim					         ta_dims (4) = time_dim
         ta_dims (3) = lev_dim					         ta_dims (3) = lev_dim
         ta_dims (2) = lat_dim					         ta_dims (2) = lat_dim
         ta_dims (1) = lon_dim					         ta_dims (1) = lon_dim
         iret = nf_def_var (ncid, 'ta', NF_REAL,4 , ta_dims, 	         iret = nf_def_var (ncid, 'ta', NF_REAL,4 , ta_dims, 
         CALL check_err (iret)					         CALL check_err (iret)
         o2_dims (4) = time_dim					         o2_dims (4) = time_dim
         o2_dims (3) = lev_dim					         o2_dims (3) = lev_dim
         o2_dims (2) = lat_dim					         o2_dims (2) = lat_dim
         o2_dims (1) = lon_dim					         o2_dims (1) = lon_dim
         iret = nf_def_var (ncid, 'o2', NF_REAL,4 , o2_dims, 	         iret = nf_def_var (ncid, 'o2', NF_REAL,4 , o2_dims, 
         CALL check_err (iret)					         CALL check_err (iret)
         fe_dims (4) = time_dim					         fe_dims (4) = time_dim
         fe_dims (3) = lev_dim					         fe_dims (3) = lev_dim
         fe_dims (2) = lat_dim					         fe_dims (2) = lat_dim
         fe_dims (1) = lon_dim					         fe_dims (1) = lon_dim
         iret = nf_def_var (ncid, 'Fe', NF_REAL,4 , fe_dims, 	         iret = nf_def_var (ncid, 'Fe', NF_REAL,4 , fe_dims, 
         CALL check_err (iret)					         CALL check_err (iret)
         prod_dims (4) = time_dim				         prod_dims (4) = time_dim
         prod_dims (3) = lev_dim				         prod_dims (3) = lev_dim
         prod_dims (2) = lat_dim				         prod_dims (2) = lat_dim
         prod_dims (1) = lon_dim				         prod_dims (1) = lon_dim
         iret = nf_def_var (ncid, 'prod', NF_REAL,4 , prod_di	         iret = nf_def_var (ncid, 'prod', NF_REAL,4 , prod_di
         CALL check_err (iret)					         CALL check_err (iret)
         fpop_dims (4) = time_dim				         fpop_dims (4) = time_dim
         fpop_dims (3) = lev_dim				         fpop_dims (3) = lev_dim
         fpop_dims (2) = lat_dim				         fpop_dims (2) = lat_dim
         fpop_dims (1) = lon_dim				         fpop_dims (1) = lon_dim
         iret = nf_def_var (ncid, 'fpop', NF_REAL,4 , fpop_di	         iret = nf_def_var (ncid, 'fpop', NF_REAL,4 , fpop_di
         CALL check_err (iret)					         CALL check_err (iret)
         pldoc_dims (4) = time_dim				         pldoc_dims (4) = time_dim
         pldoc_dims (3) = lev_dim				         pldoc_dims (3) = lev_dim
         pldoc_dims (2) = lat_dim				         pldoc_dims (2) = lat_dim
         pldoc_dims (1) = lon_dim				         pldoc_dims (1) = lon_dim
         iret = nf_def_var (ncid, 'pldoc', NF_REAL,4 , pldoc_	         iret = nf_def_var (ncid, 'pldoc', NF_REAL,4 , pldoc_
         CALL check_err (iret)					         CALL check_err (iret)
         remi_dims (4) = time_dim				         remi_dims (4) = time_dim
         remi_dims (3) = lev_dim				         remi_dims (3) = lev_dim
         remi_dims (2) = lat_dim				         remi_dims (2) = lat_dim
         remi_dims (1) = lon_dim				         remi_dims (1) = lon_dim
         iret = nf_def_var (ncid, 'remi', NF_REAL,4 , remi_di	         iret = nf_def_var (ncid, 'remi', NF_REAL,4 , remi_di
         CALL check_err (iret)					         CALL check_err (iret)
!         jpop_dims (4) = time_dim				!         jpop_dims (4) = time_dim
!         jpop_dims (3) = lev_dim				!         jpop_dims (3) = lev_dim
!         jpop_dims (2) = lat_dim				!         jpop_dims (2) = lat_dim
!         jpop_dims (1) = lon_dim				!         jpop_dims (1) = lon_dim
!         iret = nf_def_var (ncid, 'jpop', NF_REAL,4 , jpop_d	!         iret = nf_def_var (ncid, 'jpop', NF_REAL,4 , jpop_d
!         CALL check_err (iret)					!         CALL check_err (iret)
         caco3_dims (4) = time_dim				         caco3_dims (4) = time_dim
         caco3_dims (3) = lev_dim				         caco3_dims (3) = lev_dim
         caco3_dims (2) = lat_dim				         caco3_dims (2) = lat_dim
         caco3_dims (1) = lon_dim				         caco3_dims (1) = lon_dim
         iret = nf_def_var (ncid, 'pcaco3', NF_REAL,4 , caco3	         iret = nf_def_var (ncid, 'pcaco3', NF_REAL,4 , caco3
         CALL check_err (iret)					         CALL check_err (iret)
! assign attributes						! assign attributes
         iret = nf_put_att_text (ncid, lat_id, 'long_name', 2	         iret = nf_put_att_text (ncid, lat_id, 'long_name', 2
         CALL check_err (iret)					         CALL check_err (iret)
         iret = nf_put_att_text (ncid, lat_id, 'units', 13, '	         iret = nf_put_att_text (ncid, lat_id, 'units', 13, '
         CALL check_err (iret)					         CALL check_err (iret)
         iret = nf_put_att_text (ncid, lon_id, 'long_name', 2	         iret = nf_put_att_text (ncid, lon_id, 'long_name', 2
         CALL check_err (iret)					         CALL check_err (iret)
         iret = nf_put_att_text (ncid, lon_id, 'units', 12, '	         iret = nf_put_att_text (ncid, lon_id, 'units', 12, '
         CALL check_err (iret)					         CALL check_err (iret)
         iret = nf_put_att_text (ncid, lev_id, 'long_name', 1	         iret = nf_put_att_text (ncid, lev_id, 'long_name', 1
         CALL check_err (iret)					         CALL check_err (iret)
         iret = nf_put_att_text (ncid, lev_id, 'units', 5, 'm	         iret = nf_put_att_text (ncid, lev_id, 'units', 5, 'm
         CALL check_err (iret)					         CALL check_err (iret)
         iret = nf_put_att_text (ncid, time_id, 'long_name', 	         iret = nf_put_att_text (ncid, time_id, 'long_name', 
         CALL check_err (iret)					         CALL check_err (iret)
         iret = nf_put_att_text (ncid, time_id, 'units', 23, 	         iret = nf_put_att_text (ncid, time_id, 'units', 23, 
         CALL check_err (iret)					         CALL check_err (iret)

         iret = nf_put_att_text (ncid, totup_id, 'long_name',	         iret = nf_put_att_text (ncid, totup_id, 'long_name',
         CALL check_err (iret)					         CALL check_err (iret)
         iret = nf_put_att_text (ncid, totup_id, 'units', 3, 	         iret = nf_put_att_text (ncid, totup_id, 'units', 3, 
         CALL check_err (iret)					         CALL check_err (iret)
         iret = nf_put_att_real (ncid, totup_id, 'missing_val	         iret = nf_put_att_real (ncid, totup_id, 'missing_val
         CALL check_err (iret)					         CALL check_err (iret)

         iret = nf_put_att_text (ncid, tpco2o_id, 'long_name'	         iret = nf_put_att_text (ncid, tpco2o_id, 'long_name'
         CALL check_err (iret)					         CALL check_err (iret)
         iret = nf_put_att_text (ncid, tpco2o_id, 'units', 4,	         iret = nf_put_att_text (ncid, tpco2o_id, 'units', 4,
         CALL check_err (iret)					         CALL check_err (iret)
         iret = nf_put_att_real (ncid, tpco2o_id, 'missing_va	         iret = nf_put_att_real (ncid, tpco2o_id, 'missing_va
         CALL check_err (iret)					         CALL check_err (iret)

         iret = nf_put_att_text (ncid, tdpco2_id, 'long_name'	         iret = nf_put_att_text (ncid, tdpco2_id, 'long_name'
         CALL check_err (iret)					         CALL check_err (iret)
         iret = nf_put_att_text (ncid, tdpco2_id, 'units', 4,	         iret = nf_put_att_text (ncid, tdpco2_id, 'units', 4,
         CALL check_err (iret)					         CALL check_err (iret)
         iret = nf_put_att_real (ncid, tdpco2_id, 'missing_va	         iret = nf_put_att_real (ncid, tdpco2_id, 'missing_va
         CALL check_err (iret)					         CALL check_err (iret)

         iret = nf_put_att_text (ncid, cc_id, 'long_name', 9,	         iret = nf_put_att_text (ncid, cc_id, 'long_name', 9,
         CALL check_err (iret)					         CALL check_err (iret)
         iret = nf_put_att_text (ncid, cc_id, 'units', 7, 'um	         iret = nf_put_att_text (ncid, cc_id, 'units', 7, 'um
         CALL check_err (iret)					         CALL check_err (iret)
         iret = nf_put_att_real (ncid, cc_id, 'missing_value'	         iret = nf_put_att_real (ncid, cc_id, 'missing_value'
         CALL check_err (iret)					         CALL check_err (iret)

         iret = nf_put_att_text (ncid, po4_id, 'long_name', 3	         iret = nf_put_att_text (ncid, po4_id, 'long_name', 3
         CALL check_err (iret)					         CALL check_err (iret)
         iret = nf_put_att_text (ncid, po4_id, 'units', 7, 'u	         iret = nf_put_att_text (ncid, po4_id, 'units', 7, 'u
         CALL check_err (iret)					         CALL check_err (iret)
         iret = nf_put_att_real (ncid, po4_id, 'missing_value	         iret = nf_put_att_real (ncid, po4_id, 'missing_value
         CALL check_err (iret)					         CALL check_err (iret)

         iret = nf_put_att_text (ncid, ldoc_id, 'long_name', 	         iret = nf_put_att_text (ncid, ldoc_id, 'long_name', 
         CALL check_err (iret)					         CALL check_err (iret)
         iret = nf_put_att_text (ncid, ldoc_id, 'units', 7, '	         iret = nf_put_att_text (ncid, ldoc_id, 'units', 7, '
         CALL check_err (iret)					         CALL check_err (iret)
         iret = nf_put_att_real (ncid, ldoc_id, 'missing_valu	         iret = nf_put_att_real (ncid, ldoc_id, 'missing_valu
         CALL check_err (iret)					         CALL check_err (iret)

         iret = nf_put_att_text (ncid, ta_id, 'long_name', 16	         iret = nf_put_att_text (ncid, ta_id, 'long_name', 16
         CALL check_err (iret)					         CALL check_err (iret)
         iret = nf_put_att_text (ncid, ta_id, 'units', 7, 'um	         iret = nf_put_att_text (ncid, ta_id, 'units', 7, 'um
         CALL check_err (iret)					         CALL check_err (iret)
         iret = nf_put_att_real (ncid, ta_id, 'missing_value'	         iret = nf_put_att_real (ncid, ta_id, 'missing_value'
         CALL check_err (iret)					         CALL check_err (iret)

         iret = nf_put_att_text (ncid, o2_id, 'long_name', 16	         iret = nf_put_att_text (ncid, o2_id, 'long_name', 16
         CALL check_err (iret)					         CALL check_err (iret)
         iret = nf_put_att_text (ncid, o2_id, 'units', 7, 'um	         iret = nf_put_att_text (ncid, o2_id, 'units', 7, 'um
         CALL check_err (iret)					         CALL check_err (iret)
         iret = nf_put_att_real (ncid, o2_id, 'missing_value'	         iret = nf_put_att_real (ncid, o2_id, 'missing_value'
         CALL check_err (iret)					         CALL check_err (iret)

         iret = nf_put_att_text (ncid, fe_id, 'long_name', 14	         iret = nf_put_att_text (ncid, fe_id, 'long_name', 14
         CALL check_err (iret)					         CALL check_err (iret)
         iret = nf_put_att_text (ncid, fe_id, 'units', 7, 'um	         iret = nf_put_att_text (ncid, fe_id, 'units', 7, 'um
         CALL check_err (iret)					         CALL check_err (iret)
         iret = nf_put_att_real (ncid, fe_id, 'missing_value'	         iret = nf_put_att_real (ncid, fe_id, 'missing_value'
         CALL check_err (iret)					         CALL check_err (iret)

         iret = nf_put_att_text (ncid, prod_id, 'long_name', 	         iret = nf_put_att_text (ncid, prod_id, 'long_name', 
         CALL check_err (iret)					         CALL check_err (iret)
         iret = nf_put_att_text (ncid, prod_id, 'units', 9, '	         iret = nf_put_att_text (ncid, prod_id, 'units', 9, '
         CALL check_err (iret)					         CALL check_err (iret)
         iret = nf_put_att_real (ncid, prod_id, 'missing_valu	         iret = nf_put_att_real (ncid, prod_id, 'missing_valu
         CALL check_err (iret)					         CALL check_err (iret)

         iret = nf_put_att_text (ncid, fpop_id, 'long_name', 	         iret = nf_put_att_text (ncid, fpop_id, 'long_name', 
         CALL check_err (iret)					         CALL check_err (iret)
         iret = nf_put_att_text (ncid, fpop_id, 'units', 9, '	         iret = nf_put_att_text (ncid, fpop_id, 'units', 9, '
         CALL check_err (iret)					         CALL check_err (iret)
         iret = nf_put_att_real (ncid, fpop_id, 'missing_valu	         iret = nf_put_att_real (ncid, fpop_id, 'missing_valu
         CALL check_err (iret)					         CALL check_err (iret)

         iret = nf_put_att_text (ncid, pldoc_id, 'long_name',	         iret = nf_put_att_text (ncid, pldoc_id, 'long_name',
         CALL check_err (iret)					         CALL check_err (iret)
         iret = nf_put_att_text (ncid, pldoc_id, 'units', 11,	         iret = nf_put_att_text (ncid, pldoc_id, 'units', 11,
         CALL check_err (iret)					         CALL check_err (iret)
         iret = nf_put_att_real (ncid, pldoc_id, 'missing_val	         iret = nf_put_att_real (ncid, pldoc_id, 'missing_val
         CALL check_err (iret)					         CALL check_err (iret)

         iret = nf_put_att_text (ncid, remi_id, 'long_name', 	         iret = nf_put_att_text (ncid, remi_id, 'long_name', 
         CALL check_err (iret)					         CALL check_err (iret)
         iret = nf_put_att_text (ncid, remi_id, 'units', 9, '	         iret = nf_put_att_text (ncid, remi_id, 'units', 9, '
         CALL check_err (iret)					         CALL check_err (iret)
         iret = nf_put_att_real (ncid, remi_id, 'missing_valu	         iret = nf_put_att_real (ncid, remi_id, 'missing_valu
         CALL check_err (iret)					         CALL check_err (iret)

         iret = nf_put_att_text (ncid, caco3_id, 'long_name',	         iret = nf_put_att_text (ncid, caco3_id, 'long_name',
         CALL check_err (iret)					         CALL check_err (iret)
         iret = nf_put_att_text (ncid, caco3_id, 'units', 9, 	         iret = nf_put_att_text (ncid, caco3_id, 'units', 9, 
         CALL check_err (iret)					         CALL check_err (iret)
         iret = nf_put_att_real (ncid, caco3_id, 'missing_val	         iret = nf_put_att_real (ncid, caco3_id, 'missing_val
         CALL check_err (iret)					         CALL check_err (iret)
!   define global attribute					!   define global attribute
         CALL date_and_time (dd,tt,zz,vv)			         CALL date_and_time (dd,tt,zz,vv)

         iret = NF_PUT_ATT_TEXT (NCID, NF_GLOBAL, 'title', 4,	         iret = NF_PUT_ATT_TEXT (NCID, NF_GLOBAL, 'title', 4,
         CALL check_err (iret)					         CALL check_err (iret)
         iret = NF_PUT_ATT_TEXT (NCID, NF_GLOBAL, 'history', 	         iret = NF_PUT_ATT_TEXT (NCID, NF_GLOBAL, 'history', 
         CALL check_err (iret)					         CALL check_err (iret)
         iret = NF_PUT_ATT_TEXT (NCID, NF_GLOBAL, 'source', 1	         iret = NF_PUT_ATT_TEXT (NCID, NF_GLOBAL, 'source', 1
         CALL check_err (iret)					         CALL check_err (iret)
! leave define mode						! leave define mode
         iret = nf_enddef (ncid)				         iret = nf_enddef (ncid)
         CALL check_err (iret)					         CALL check_err (iret)

!      t0_cdf=nday1						!      t0_cdf=nday1
         t0_cdf_pt = monthR -1					         t0_cdf_pt = monthR -1
!      t0_cdf=month-1+12000					!      t0_cdf=month-1+12000

         iret = nf_put_var_real (ncid, lon_id, real(lon,kind=	         iret = nf_put_var_real (ncid, lon_id, real(lon,kind=
         CALL check_err (iret)					         CALL check_err (iret)
         iret = nf_put_var_real (ncid, lat_id, real(lat,kind=	         iret = nf_put_var_real (ncid, lat_id, real(lat,kind=
         CALL check_err (iret)					         CALL check_err (iret)
         iret = nf_put_var_real (ncid, lev_id, real(lev,kind=	         iret = nf_put_var_real (ncid, lev_id, real(lev,kind=
         CALL check_err (iret)					         CALL check_err (iret)
         start1 (1)= 1						         start1 (1)= 1
         count1 (1)= time_len					         count1 (1)= time_len
         iret = nf_put_vara_double (ncid, time_id,start1,coun	         iret = nf_put_vara_double (ncid, time_id,start1,coun
         CALL check_err (iret)					         CALL check_err (iret)
! store variables						! store variables
         start3 (1)= 1						         start3 (1)= 1
         start3 (2)= 1						         start3 (2)= 1
         start3 (3)= 1						         start3 (3)= 1
         count3 (1)= lon_len					         count3 (1)= lon_len
         count3 (2)= lat_len					         count3 (2)= lat_len
         count3 (3)= time_len					         count3 (3)= time_len
         cc2=real(totup_io,kind=4)				         cc2=real(totup_io,kind=4)
             do j=1,jmt_global					             do j=1,jmt_global
               do i=1,imt_global				               do i=1,imt_global
               if(vit_global(i,j,1)<0.5) then			               if(vit_global(i,j,1)<0.5) then
               cc2(i,j)=spvalc					               cc2(i,j)=spvalc
               endif						               endif
               enddo						               enddo
             enddo						             enddo
         iret = nf_put_vara_real (ncid,totup_id,start3, count	         iret = nf_put_vara_real (ncid,totup_id,start3, count
         CALL check_err (iret)					         CALL check_err (iret)
         cc2=real(tpco2o_io,kind=4)				         cc2=real(tpco2o_io,kind=4)
             do j=1,jmt_global					             do j=1,jmt_global
               do i=1,imt_global				               do i=1,imt_global
               if(vit_global(i,j,1)<0.5) then			               if(vit_global(i,j,1)<0.5) then
               cc2(i,j)=spvalc					               cc2(i,j)=spvalc
               endif						               endif
               enddo						               enddo
             enddo						             enddo
         iret = nf_put_vara_real (ncid,tpco2o_id,start3, coun	         iret = nf_put_vara_real (ncid,tpco2o_id,start3, coun
         CALL check_err (iret)					         CALL check_err (iret)
         cc2=real(tdpco2o_io,kind=4)				         cc2=real(tdpco2o_io,kind=4)
             do j=1,jmt_global					             do j=1,jmt_global
               do i=1,imt_global				               do i=1,imt_global
               if(vit_global(i,j,1)<0.5) then			               if(vit_global(i,j,1)<0.5) then
               cc2(i,j)=spvalc					               cc2(i,j)=spvalc
               endif						               endif
               enddo						               enddo
             enddo						             enddo
         iret = nf_put_vara_real (ncid,tdpco2_id,start3, coun	         iret = nf_put_vara_real (ncid,tdpco2_id,start3, coun
         CALL check_err (iret)					         CALL check_err (iret)
         cc3=real(ccmon_io,kind=4)				         cc3=real(ccmon_io,kind=4)
         start4(1)=1						         start4(1)=1
         start4(2)=1						         start4(2)=1
         start4(3)=1						         start4(3)=1
         start4(4)=1						         start4(4)=1
         count4(1)=lon_len					         count4(1)=lon_len
         count4(2)=lat_len					         count4(2)=lat_len
         count4(3)=lev_len					         count4(3)=lev_len
         count4(4)=time_len					         count4(4)=time_len
         do k=1,lev_len						         do k=1,lev_len
             do j=1,jmt_global					             do j=1,jmt_global
               do i=1,imt_global				               do i=1,imt_global
               if(vit_global(i,j,k)<0.5) then			               if(vit_global(i,j,k)<0.5) then
               cc3(i,j,k)=spvalc				               cc3(i,j,k)=spvalc
               endif						               endif
               enddo						               enddo
             enddo						             enddo
         enddo							         enddo
         iret = nf_put_vara_real (ncid,cc_id,start4, count4, 	         iret = nf_put_vara_real (ncid,cc_id,start4, count4, 
         CALL check_err (iret)					         CALL check_err (iret)
         cc3=real(po4mon_io,kind=4)				         cc3=real(po4mon_io,kind=4)
         do k=1,lev_len						         do k=1,lev_len
             do j=1,jmt_global					             do j=1,jmt_global
               do i=1,imt_global				               do i=1,imt_global
               if(vit_global(i,j,k)<0.5) then			               if(vit_global(i,j,k)<0.5) then
               cc3(i,j,k)=spvalc				               cc3(i,j,k)=spvalc
               endif						               endif
               enddo						               enddo
             enddo						             enddo
         enddo							         enddo
         iret = nf_put_vara_real (ncid,po4_id,start4, count4,	         iret = nf_put_vara_real (ncid,po4_id,start4, count4,
         CALL check_err (iret)					         CALL check_err (iret)
         cc3=real(ldocmon_io,kind=4)				         cc3=real(ldocmon_io,kind=4)
         do k=1,lev_len						         do k=1,lev_len
             do j=1,jmt_global					             do j=1,jmt_global
               do i=1,imt_global				               do i=1,imt_global
               if(vit_global(i,j,k)<0.5) then			               if(vit_global(i,j,k)<0.5) then
               cc3(i,j,k)=spvalc				               cc3(i,j,k)=spvalc
               endif						               endif
               enddo						               enddo
             enddo						             enddo
         enddo							         enddo
         iret = nf_put_vara_real (ncid,ldoc_id,start4, count4	         iret = nf_put_vara_real (ncid,ldoc_id,start4, count4
         CALL check_err (iret)					         CALL check_err (iret)
         cc3=real(tamon_io,kind=4)				         cc3=real(tamon_io,kind=4)
         do k=1,lev_len						         do k=1,lev_len
             do j=1,jmt_global					             do j=1,jmt_global
               do i=1,imt_global				               do i=1,imt_global
               if(vit_global(i,j,k)<0.5) then			               if(vit_global(i,j,k)<0.5) then
               cc3(i,j,k)=spvalc				               cc3(i,j,k)=spvalc
               endif						               endif
               enddo						               enddo
             enddo						             enddo
         enddo							         enddo
         iret = nf_put_vara_real (ncid,ta_id,start4, count4, 	         iret = nf_put_vara_real (ncid,ta_id,start4, count4, 
         CALL check_err (iret)					         CALL check_err (iret)
         cc3=real(o2mon_io,kind=4)				         cc3=real(o2mon_io,kind=4)
         do k=1,lev_len						         do k=1,lev_len
             do j=1,jmt_global					             do j=1,jmt_global
               do i=1,imt_global				               do i=1,imt_global
               if(vit_global(i,j,k)<0.5) then			               if(vit_global(i,j,k)<0.5) then
               cc3(i,j,k)=spvalc				               cc3(i,j,k)=spvalc
               endif						               endif
               enddo						               enddo
             enddo						             enddo
         enddo							         enddo
         iret = nf_put_vara_real (ncid,o2_id,start4, count4, 	         iret = nf_put_vara_real (ncid,o2_id,start4, count4, 
         CALL check_err (iret)					         CALL check_err (iret)
!lyc 2013,07							!lyc 2013,07
         cc3=real(femon_io,kind=4)				         cc3=real(femon_io,kind=4)
         do k=1,lev_len						         do k=1,lev_len
             do j=1,jmt_global					             do j=1,jmt_global
               do i=1,imt_global				               do i=1,imt_global
               if(vit_global(i,j,k)<0.5) then			               if(vit_global(i,j,k)<0.5) then
               cc3(i,j,k)=spvalc				               cc3(i,j,k)=spvalc
               endif						               endif
               enddo						               enddo
             enddo						             enddo
         enddo							         enddo
         iret = nf_put_vara_real (ncid,fe_id,start4, count4, 	         iret = nf_put_vara_real (ncid,fe_id,start4, count4, 
         CALL check_err (iret)					         CALL check_err (iret)

         cc3=real(prodmon_io,kind=4)				         cc3=real(prodmon_io,kind=4)
         do k=1,lev_len						         do k=1,lev_len
             do j=1,jmt_global					             do j=1,jmt_global
               do i=1,imt_global				               do i=1,imt_global
               if(vit_global(i,j,k)<0.5) then			               if(vit_global(i,j,k)<0.5) then
               cc3(i,j,k)=spvalc				               cc3(i,j,k)=spvalc
               endif						               endif
               enddo						               enddo
             enddo						             enddo
         enddo							         enddo
         iret = nf_put_vara_real (ncid,prod_id,start4, count4	         iret = nf_put_vara_real (ncid,prod_id,start4, count4
         CALL check_err (iret)					         CALL check_err (iret)
         cc3=real(fpopmon_io,kind=4)				         cc3=real(fpopmon_io,kind=4)
         do k=1,lev_len						         do k=1,lev_len
             do j=1,jmt_global					             do j=1,jmt_global
               do i=1,imt_global				               do i=1,imt_global
               if(vit_global(i,j,k)<0.5) then			               if(vit_global(i,j,k)<0.5) then
               cc3(i,j,k)=spvalc				               cc3(i,j,k)=spvalc
               endif						               endif
               enddo						               enddo
             enddo						             enddo
         enddo							         enddo
         iret = nf_put_vara_real (ncid,fpop_id,start4, count4	         iret = nf_put_vara_real (ncid,fpop_id,start4, count4
         CALL check_err (iret)					         CALL check_err (iret)
         cc3=real(pldocmon_io,kind=4)				         cc3=real(pldocmon_io,kind=4)
         do k=1,lev_len						         do k=1,lev_len
             do j=1,jmt_global					             do j=1,jmt_global
               do i=1,imt_global				               do i=1,imt_global
               if(vit_global(i,j,k)<0.5) then			               if(vit_global(i,j,k)<0.5) then
               cc3(i,j,k)=spvalc				               cc3(i,j,k)=spvalc
               endif						               endif
               enddo						               enddo
             enddo						             enddo
         enddo							         enddo
         iret = nf_put_vara_real (ncid,pldoc_id,start4, count	         iret = nf_put_vara_real (ncid,pldoc_id,start4, count
         CALL check_err (iret)					         CALL check_err (iret)
         cc3=real(remimon_io,kind=4)				         cc3=real(remimon_io,kind=4)
         do k=1,lev_len						         do k=1,lev_len
             do j=1,jmt_global					             do j=1,jmt_global
               do i=1,imt_global				               do i=1,imt_global
               if(vit_global(i,j,k)<0.5) then			               if(vit_global(i,j,k)<0.5) then
               cc3(i,j,k)=spvalc				               cc3(i,j,k)=spvalc
               endif						               endif
               enddo						               enddo
             enddo						             enddo
         enddo							         enddo
         iret = nf_put_vara_real (ncid,remi_id,start4, count4	         iret = nf_put_vara_real (ncid,remi_id,start4, count4
         CALL check_err (iret)					         CALL check_err (iret)
         cc3=real(caco3mon_io,kind=4)				         cc3=real(caco3mon_io,kind=4)
         do k=1,lev_len						         do k=1,lev_len
             do j=1,jmt_global					             do j=1,jmt_global
               do i=1,imt_global				               do i=1,imt_global
               if(vit_global(i,j,k)<0.5) then			               if(vit_global(i,j,k)<0.5) then
               cc3(i,j,k)=spvalc				               cc3(i,j,k)=spvalc
               endif						               endif
               enddo						               enddo
             enddo						             enddo
         enddo							         enddo
         iret = nf_put_vara_real (ncid,caco3_id,start4, count	         iret = nf_put_vara_real (ncid,caco3_id,start4, count
         CALL check_err (iret)					         CALL check_err (iret)

          iret = nf_CLOSE (ncid)				          iret = nf_CLOSE (ncid)
         CALL check_err (iret)					         CALL check_err (iret)
#endif								#endif
!******************************************			!******************************************
#endif								#endif
 								 
      ENDIF							      ENDIF
!------------------------------------------------------------	!------------------------------------------------------------
! set zore at the end of the month				! set zore at the end of the month
!$OMP PARALLEL DO PRIVATE(k,j,i)				!$OMP PARALLEL DO PRIVATE(k,j,i)
      DO k=1,klv						      DO k=1,klv
        DO j=1,jmt						        DO j=1,jmt
          DO i=1,imt						          DO i=1,imt
            ccmon(i,j,k)     = 0.0				            ccmon(i,j,k)     = 0.0
#ifdef carbonBio						#ifdef carbonBio
            po4mon(i,j,k)    = 0.0				            po4mon(i,j,k)    = 0.0
            ldocmon(i,j,k)   = 0.0				            ldocmon(i,j,k)   = 0.0
            tamon(i,j,k)     = 0.0				            tamon(i,j,k)     = 0.0
            o2mon(i,j,k)     = 0.0				            o2mon(i,j,k)     = 0.0
            femon(i,j,k)     = 0.0				            femon(i,j,k)     = 0.0
            prodmon (i,j,k)  = 0.0				            prodmon (i,j,k)  = 0.0
            fpopmon (i,j,k)  = 0.0				            fpopmon (i,j,k)  = 0.0
            pldocmon (i,j,k) = 0.0				            pldocmon (i,j,k) = 0.0
            remimon (i,j,k)  = 0.0				            remimon (i,j,k)  = 0.0
            jpopmon (i,j,k)  = 0.0				            jpopmon (i,j,k)  = 0.0
            caco3mon (i,j,k) = 0.0				            caco3mon (i,j,k) = 0.0
#endif								#endif
          ENDDO							          ENDDO
        ENDDO							        ENDDO
      ENDDO							      ENDDO

!------------------------------------------------------------	!------------------------------------------------------------
! set zore at the end of the year				! set zore at the end of the year
      IF (MOD ( (monthR -1),12) == 0) THEN			      IF (MOD ( (monthR -1),12) == 0) THEN
!$OMP PARALLEL DO PRIVATE(k,j,i)				!$OMP PARALLEL DO PRIVATE(k,j,i)
      DO k=1,km							      DO k=1,km
        DO j=1,jmt						        DO j=1,jmt
          DO i=1,imt						          DO i=1,imt
            ccmon(i,j,k)     = 0.0				            ccmon(i,j,k)     = 0.0
#ifdef carbonBio						#ifdef carbonBio
            po4mon(i,j,k)    = 0.0				            po4mon(i,j,k)    = 0.0
            ldocmon(i,j,k)   = 0.0				            ldocmon(i,j,k)   = 0.0
            tamon(i,j,k)     = 0.0				            tamon(i,j,k)     = 0.0
            o2mon(i,j,k)     = 0.0				            o2mon(i,j,k)     = 0.0
            femon(i,j,k)     = 0.0				            femon(i,j,k)     = 0.0
            prodmon (i,j,k)  = 0.0				            prodmon (i,j,k)  = 0.0
            fpopmon (i,j,k)  = 0.0				            fpopmon (i,j,k)  = 0.0
            pldocmon (i,j,k) = 0.0				            pldocmon (i,j,k) = 0.0
            remimon (i,j,k)  = 0.0				            remimon (i,j,k)  = 0.0
            jpopmon (i,j,k)  = 0.0				            jpopmon (i,j,k)  = 0.0
            caco3mon (i,j,k) = 0.0				            caco3mon (i,j,k) = 0.0
#endif								#endif
          ENDDO							          ENDDO
        ENDDO							        ENDDO
      ENDDO							      ENDDO
      ENDIF							      ENDIF
!								!

      IF (rest_output) THEN					      IF (rest_output) THEN
#ifdef SPMD							#ifdef SPMD
#if (defined carbonC14)||(defined cfc)				#if (defined carbonC14)||(defined cfc)
      call local_to_global_4d_double(totup,totup_io,1,1)	      call local_to_global_4d_double(totup,totup_io,1,1)
#endif      							#endif      
      IF(mytid==0) THEN						      IF(mytid==0) THEN
        fname32(1:8)='fort.32.'					        fname32(1:8)='fort.32.'
        fname32(9:12)=ftail					        fname32(9:12)=ftail
#ifdef COUP							#ifdef COUP
        fname32(13:13)='-'					        fname32(13:13)='-'
        if(mon0<12) then					        if(mon0<12) then
        write(fname32(14:15),'(i2.2)')mon0+1			        write(fname32(14:15),'(i2.2)')mon0+1
        else							        else
        write(fname32(14:15),'(i2.2)')mon0-11			        write(fname32(14:15),'(i2.2)')mon0-11
        write(fname32(9:12),'(i4.4)')nwmf+1			        write(fname32(9:12),'(i4.4)')nwmf+1
        endif							        endif
        fname32(16:24)='-01-00000'				        fname32(16:24)='-01-00000'
#else								#else
        fname32(13:15)=abmon(mon0)				        fname32(13:15)=abmon(mon0)
#endif								#endif
        OPEN (90,FILE = fname32,FORM ='unformatted',STATUS ='	        OPEN (90,FILE = fname32,FORM ='unformatted',STATUS ='
#if (defined carbonC14)||(defined cfc)        			#if (defined carbonC14)||(defined cfc)        
        WRITE (90) pt_io,totup_io,monthR			        WRITE (90) pt_io,totup_io,monthR
#endif        							#endif        
!								!
#ifdef carbonC        						#ifdef carbonC        
        WRITE (90) pt_io,totup_io,tpco2o_io,tdpco2o_io,monthR	        WRITE (90) pt_io,totup_io,tpco2o_io,tdpco2o_io,monthR
#endif        							#endif        
!								!
#ifdef carbonBio        					#ifdef carbonBio        
#ifdef COUP							#ifdef COUP
        WRITE (90) pt_io,totup_io,tpco2o_io,tdpco2o_io,tocaco	        WRITE (90) pt_io,totup_io,tpco2o_io,tdpco2o_io,tocaco
#else								#else
        WRITE (90) pt_io,totup_io,tpco2o_io,tdpco2o_io,tocaco	        WRITE (90) pt_io,totup_io,tpco2o_io,tdpco2o_io,tocaco
#endif								#endif
#endif        							#endif        
        CLOSE (90)						        CLOSE (90)
      ENDIF							      ENDIF
#else								#else
        fname32(1:8)='fort.32.'					        fname32(1:8)='fort.32.'
        fname32(9:12)=ftail					        fname32(9:12)=ftail
        fname32(13:13)='-'					        fname32(13:13)='-'
#ifdef COUP							#ifdef COUP
        if(mon0<12) then					        if(mon0<12) then
        write(fname32(14:15),'(i2.2)')mon0+1			        write(fname32(14:15),'(i2.2)')mon0+1
        else							        else
        write(fname32(14:15),'(i2.2)')mon0-11			        write(fname32(14:15),'(i2.2)')mon0-11
        write(fname32(9:12),'(i4.4)')nwmf+1			        write(fname32(9:12),'(i4.4)')nwmf+1
        endif							        endif
        fname32(16:24)='-01-00000'				        fname32(16:24)='-01-00000'
#else  								#else  
        fname32(13:15)=abmon(mon0)				        fname32(13:15)=abmon(mon0)
#endif								#endif
        OPEN (90,FILE = fname32,FORM ='unformatted',STATUS ='	        OPEN (90,FILE = fname32,FORM ='unformatted',STATUS ='
#if (defined carbonC14)||(defined cfc)        			#if (defined carbonC14)||(defined cfc)        
        WRITE (90) pt,totup,monthR				        WRITE (90) pt,totup,monthR
#endif        							#endif        
!								!
#ifdef carbonC        						#ifdef carbonC        
        WRITE (90) pt,totup,tpco2o,tdpco2o,monthR		        WRITE (90) pt,totup,tpco2o,tdpco2o,monthR
#endif        							#endif        
!								!
#ifdef carbonBio        					#ifdef carbonBio        
#ifdef COUP							#ifdef COUP
        WRITE (90) pt,totup,tpco2o,tdpco2o,tocaco3,toa0,pco2u	        WRITE (90) pt,totup,tpco2o,tdpco2o,tocaco3,toa0,pco2u
#else								#else
        WRITE (90) pt,totup,tpco2o,tdpco2o,tocaco3,toa0,month	        WRITE (90) pt,totup,tpco2o,tdpco2o,tocaco3,toa0,month
#endif								#endif
      								      
#endif        							#endif        
        CLOSE (90)						        CLOSE (90)
#endif								#endif
      ENDIF							      ENDIF
 								 
#ifdef SPMD							#ifdef SPMD
#if (defined carbonC14)||(defined cfc)				#if (defined carbonC14)||(defined cfc)
      call local_to_global_4d_double(totup,totup_io,1,1)	      call local_to_global_4d_double(totup,totup_io,1,1)
#endif      							#endif      
      IF(mytid==0) THEN						      IF(mytid==0) THEN
        OPEN(32,FILE='fort.32',FORM='unformatted')		        OPEN(32,FILE='fort.32',FORM='unformatted')
!								!
#if (defined carbonC14)||(defined cfc)        			#if (defined carbonC14)||(defined cfc)        
        WRITE (32) pt_io,totup_io,monthR			        WRITE (32) pt_io,totup_io,monthR
#endif        							#endif        
#ifdef carbonC        						#ifdef carbonC        
        WRITE (32) pt_io,totup_io,tpco2o_io,tdpco2o_io,monthR	        WRITE (32) pt_io,totup_io,tpco2o_io,tdpco2o_io,monthR
#endif        							#endif        
!								!
#ifdef carbonBio        					#ifdef carbonBio        
#ifdef COUP							#ifdef COUP
        WRITE (32) pt_io,totup_io,tpco2o_io,tdpco2o_io,tocaco	        WRITE (32) pt_io,totup_io,tpco2o_io,tdpco2o_io,tocaco
#else								#else
        WRITE (32) pt_io,totup_io,tpco2o_io,tdpco2o_io,tocaco	        WRITE (32) pt_io,totup_io,tpco2o_io,tdpco2o_io,tocaco
#endif								#endif
#endif        							#endif        
        CLOSE (32)						        CLOSE (32)
      ENDIF							      ENDIF
#else								#else
      REWIND 32							      REWIND 32
#if (defined carbonC14)||(defined cfc)        			#if (defined carbonC14)||(defined cfc)        
        WRITE (32) pt,totup,monthR				        WRITE (32) pt,totup,monthR
#endif        							#endif        
!								!
#ifdef carbonC        						#ifdef carbonC        
        WRITE (32) pt,totup,tpco2o,tdpco2o,monthR		        WRITE (32) pt,totup,tpco2o,tdpco2o,monthR
#endif        							#endif        
!								!
#ifdef carbonBio        					#ifdef carbonBio        
        WRITE (32) pt_io,totup,tpco2o,tdpco2o,tocaco3,toa0,mo	        WRITE (32) pt_io,totup,tpco2o,tdpco2o,tocaco3,toa0,mo
#endif        							#endif        
      CLOSE(32)							      CLOSE(32)
#endif								#endif

   								   
!------------------------------------------------------------	!------------------------------------------------------------
!     reset some arrays						!     reset some arrays
!------------------------------------------------------------	!------------------------------------------------------------
      DO m = 1,nptra						      DO m = 1,nptra
!$OMP PARALLEL DO PRIVATE (k,j,i)				!$OMP PARALLEL DO PRIVATE (k,j,i)
      DO k = 1,km						      DO k = 1,km
        DO j = 1,jmt						        DO j = 1,jmt
          DO i = 1,imt						          DO i = 1,imt
            ptb (i,j,k,m) = pt (i,j,k,m) * vit(i,j,k)		            ptb (i,j,k,m) = pt (i,j,k,m) * vit(i,j,k)
          ENDDO							          ENDDO
        ENDDO							        ENDDO
      ENDDO							      ENDDO
      ENDDO							      ENDDO

!lyc 2014.06							!lyc 2014.06
      MONTHR=MONTHR+1						      MONTHR=MONTHR+1
							      >	      if(mytid==0 ) print *,'monthR=',monthR
      								      
      RETURN							      RETURN
      END SUBROUTINE SSAVE_PT					      END SUBROUTINE SSAVE_PT

!  CVS: $Id: upwell.F90,v 1.5 2003/08/12 09:06:39 lhl Exp $	!  CVS: $Id: upwell.F90,v 1.5 2003/08/12 09:06:39 lhl Exp $
!     ===============================				!     ===============================
      SUBROUTINE UPWELL_PT (UWK,VWK,UTL2,WKD2,WKB2,wst)		      SUBROUTINE UPWELL_PT (UWK,VWK,UTL2,WKD2,WKB2,wst)
!     ===============================				!     ===============================
 								 
#include <def-undef.h>						#include <def-undef.h>
use param_mod							use param_mod
use pconst_mod							use pconst_mod
use dyn_mod							use dyn_mod
use work_mod							use work_mod
use carbon_mod							use carbon_mod
 								 
      IMPLICIT NONE						      IMPLICIT NONE
      REAL    :: UWK (IMT,JMT,KM),VWK (IMT,JMT,KM),H0WK (IMT,	      REAL    :: UWK (IMT,JMT,KM),VWK (IMT,JMT,KM),H0WK (IMT,
      real    :: hb_x1,hb_x2,hb_x,hb_y				      real    :: hb_x1,hb_x2,hb_x,hb_y
      REAL,DIMENSION(imt,jmt,km)::wkb2,wkd2,utl2		      REAL,DIMENSION(imt,jmt,km)::wkb2,wkd2,utl2
      REAL,DIMENSION(imt,jmt,kmp1)::wst				      REAL,DIMENSION(imt,jmt,kmp1)::wst
!      REAL,DIMENSION(imt,jmt_global,kmp1)::wst_io		!      REAL,DIMENSION(imt,jmt_global,kmp1)::wst_io
      integer :: a						      integer :: a
      								      
!      allocate(UTL2 (IMT,JMT,KM),WKD2 (IMT,JMT,KM),WKB2 (IMT	!      allocate(UTL2 (IMT,JMT,KM),WKD2 (IMT,JMT,KM),WKB2 (IMT
 								 
!------------------------------------------------------------	!------------------------------------------------------------
!     INITIALIZE WORK ARRAYS					!     INITIALIZE WORK ARRAYS
!------------------------------------------------------------	!------------------------------------------------------------
 								 
      allocate(uk(imt,jmt,km),vk(imt,jmt,km))			      allocate(uk(imt,jmt,km),vk(imt,jmt,km))
      DO J = JST,JET						      DO J = JST,JET
         DO I = 1,IMT						         DO I = 1,IMT
            WORK (I,J) = 0.0					            WORK (I,J) = 0.0
         END DO							         END DO
      END DO							      END DO
 								 
!$OMP PARALLEL DO PRIVATE (K,J,I)				!$OMP PARALLEL DO PRIVATE (K,J,I)
      DO K = 1,KM						      DO K = 1,KM
         DO J = JST,JET						         DO J = JST,JET
            DO I = 1,IMT					            DO I = 1,IMT
               WKA (I,J,K)= 0.0					               WKA (I,J,K)= 0.0
            END DO						            END DO
         END DO							         END DO
      END DO							      END DO

   wst(:,:,1:kmp1)=0.0						   wst(:,:,1:kmp1)=0.0
 								 
 								 
!!$OMP PARALLEL DO PRIVATE (J,I)				!!$OMP PARALLEL DO PRIVATE (J,I)
!      DO J = JSM,JEM						!      DO J = JSM,JEM
!         DO I = 2,IMT						!         DO I = 2,IMT
!            WORK (I,J)= 0.25* (H0WK (I,J) + H0WK (I -1,J) + 	!            WORK (I,J)= 0.25* (H0WK (I,J) + H0WK (I -1,J) + 
!                        J +1) + H0WK (I -1,J +1))		!                        J +1) + H0WK (I -1,J +1))
!         END DO						!         END DO
!         WORK (1,J)= WORK (IMM,J)				!         WORK (1,J)= WORK (IMM,J)
!      END DO							!      END DO

! the topography of bottom					! the topography of bottom
!$OMP PARALLEL DO PRIVATE (J,I)					!$OMP PARALLEL DO PRIVATE (J,I)
      DO J = JSM,JEM						      DO J = JSM,JEM
         DO I = 2,IMT						         DO I = 2,IMT
           if(ohbt(i,j)>0.0) then				           if(ohbt(i,j)>0.0) then
            WORK (I,J)= 1/OHBT(I,J)				            WORK (I,J)= 1/OHBT(I,J)
           else							           else
            WORK (I,J)= 0.0					            WORK (I,J)= 0.0
           endif						           endif
         END DO							         END DO
         WORK (1,J)= WORK (IMM,J)				         WORK (1,J)= WORK (IMM,J)
      END DO							      END DO
#ifdef SPMD							#ifdef SPMD
      call exchange_2d(work,1,1)				      call exchange_2d(work,1,1)
#endif								#endif
!$OMP PARALLEL DO PRIVATE (K,J,I)				!$OMP PARALLEL DO PRIVATE (K,J,I)
      DO K = 1,KM						      DO K = 1,KM
         DO J = JST,JET						         DO J = JST,JET
            DO I = 1,IMT					            DO I = 1,IMT
               UK (I,J,K)=  UWK (I,J,K)				               UK (I,J,K)=  UWK (I,J,K)
               VK (I,J,K)=  VWK (I,J,K)				               VK (I,J,K)=  VWK (I,J,K)
            END DO						            END DO
         END DO							         END DO
      END DO							      END DO
! -----------------------------					! -----------------------------
!    the partial(u)/partial(x) + partial(v)/partial(y)		!    the partial(u)/partial(x) + partial(v)/partial(y)
!------------------------------					!------------------------------
!$OMP PARALLEL DO PRIVATE (K,J,I)				!$OMP PARALLEL DO PRIVATE (K,J,I)
      DO K = 1,KM						      DO K = 1,KM
         DO J = JSM,JEM						         DO J = JSM,JEM
            DO I = 2,IMM					            DO I = 2,IMM
               WKA (I,J,K)= 0.5* OTX (J)* ( (UK (I +1,J,K) + 	               WKA (I,J,K)= 0.5* OTX (J)* ( (UK (I +1,J,K) + 
                           J -1,K)) &				                           J -1,K)) &
               - (UK (I,J,K) + UK (I,J -1,K))) &		               - (UK (I,J,K) + UK (I,J -1,K))) &
               + R2A (J)*2.0* (VK (I,J,K) + VK (I +1,J,K)) &	               + R2A (J)*2.0* (VK (I,J,K) + VK (I +1,J,K)) &
               - R2B (J)*2.0* (VK (I,J -1,K) + VK (I +1,J -1,	               - R2B (J)*2.0* (VK (I,J -1,K) + VK (I +1,J -1,
            END DO						            END DO
         END DO							         END DO
      END DO							      END DO
    a =0							    a =0
    IF (a==1) then						    IF (a==1) then
!calculate the ws of the last level 				!calculate the ws of the last level 
         DO J=JSM,JEM						         DO J=JSM,JEM
           DO I=2,IMM						           DO I=2,IMM
!            if(vit(i,j,km)<0.5) cycle				!            if(vit(i,j,km)<0.5) cycle
!            HB_x1=(WORK (I  ,J) - WORK (I-1,J))* UTL2 (I,J,K	!            HB_x1=(WORK (I  ,J) - WORK (I-1,J))* UTL2 (I,J,K
!            HB_x2=(WORK (I+1,J) - WORK (I  ,J))* UTL2 (I+1,J	!            HB_x2=(WORK (I+1,J) - WORK (I  ,J))* UTL2 (I+1,J
!            HB_x = HB_x2+HB_x1					!            HB_x = HB_x2+HB_x1
!            HB_y=WKD2(I,J,KM)*(WORK(I,J+1)-WORK(I,J))+WKB2(I	!            HB_y=WKD2(I,J,KM)*(WORK(I,J+1)-WORK(I,J))+WKB2(I
!            WSt(I,J,KMP1)=(HB_X+HB_Y)*vit(i,j,km)		!            WSt(I,J,KMP1)=(HB_X+HB_Y)*vit(i,j,km)
             WST(I,J,KMP1)=0.0					             WST(I,J,KMP1)=0.0
           ENDDO						           ENDDO
         ENDDO							         ENDDO
!!$OMP PARALLEL DO PRIVATE (J,I,HB_x,HB_x1,HB_x2,HB_y)       	!!$OMP PARALLEL DO PRIVATE (J,I,HB_x,HB_x1,HB_x2,HB_y)       
         DO J=JSM,JEM						         DO J=JSM,JEM
           DO I=2,IMM						           DO I=2,IMM
           do k=km,1,-1						           do k=km,1,-1
           if(vit(i,j,k)<0.5) cycle				           if(vit(i,j,k)<0.5) cycle
! calculate ws  in the bottom           			! calculate ws  in the bottom           
           IF(k==ITNU(i,j)) THEN				           IF(k==ITNU(i,j)) THEN
            WST(I,J,K+1)=0.0					            WST(I,J,K+1)=0.0
            HB_x1=(WORK (I  ,J) - WORK (I-1,J))* UTL2 (I,J,K)	            HB_x1=(WORK (I  ,J) - WORK (I-1,J))* UTL2 (I,J,K)
            HB_x2=(WORK (I+1,J) - WORK (I  ,J))* UTL2 (I+1,J,	            HB_x2=(WORK (I+1,J) - WORK (I  ,J))* UTL2 (I+1,J,
            HB_x = HB_x2+HB_x1					            HB_x = HB_x2+HB_x1
            HB_y=WKD2(I,J,K)*(WORK(I,J+1)-WORK(I,J))+WKB2(I,J	            HB_y=WKD2(I,J,K)*(WORK(I,J+1)-WORK(I,J))+WKB2(I,J
            WSt(I,J,K)=-(HB_X+HB_Y)*vit(i,j,k)			            WSt(I,J,K)=-(HB_X+HB_Y)*vit(i,j,k)
           ELSE  						           ELSE  
 ! if vit(i,j,k) and vit(i,j,k+1) ==1				 ! if vit(i,j,k) and vit(i,j,k+1) ==1
              							              
            WST(I,J,K)= VIT (I,J,K)* (WST (I,J,K+1 )- &		            WST(I,J,K)= VIT (I,J,K)* (WST (I,J,K+1 )- &
                             DZP(K)* WKA(I,J,K))		                             DZP(K)* WKA(I,J,K))
          END IF						          END IF
          							          
          enddo							          enddo
! calculate the ws of the first level          			! calculate the ws of the first level          
              WST(I,J,1)=vit(i,j,1)*(WST(I,J,2)-DZP(1)*WKA(I,	              WST(I,J,1)=vit(i,j,1)*(WST(I,J,2)-DZP(1)*WKA(I,
         END DO							         END DO
      END DO							      END DO
 								 
  ELSE								  ELSE
!      wst(:,:,1)=0.0						!      wst(:,:,1)=0.0
      DO K=2,km							      DO K=2,km
        DO J=JSM,JEM						        DO J=JSM,JEM
           DO I=2,IMM						           DO I=2,IMM
           WST(I,J,K)=VIT (I,J,K)* (WST (I,J,K-1 )+ &		           WST(I,J,K)=VIT (I,J,K)* (WST (I,J,K-1 )+ &
                             DZP(K-1)* WKA(I,J,K-1))		                             DZP(K-1)* WKA(I,J,K-1))
           END DO						           END DO
        END DO							        END DO
      END DO							      END DO
  ENDIF      							  ENDIF      
 								 
!$OMP PARALLEL DO PRIVATE (K,J,I)				!$OMP PARALLEL DO PRIVATE (K,J,I)
     DO K = 1,KM						     DO K = 1,KM
        DO J = JSM,JEM						        DO J = JSM,JEM
           DO I = 2,IMM						           DO I = 2,IMM
              WST (I,J,K)= WST (I,J,K)* VIT (I,J,K)		              WST (I,J,K)= WST (I,J,K)* VIT (I,J,K)
!              if(wst(i,j,k)>0.001) then 			!              if(wst(i,j,k)>0.001) then 
!            print *,'wst ',i,j,'k',k,wst(i,j,k),'mytid=',myt	!            print *,'wst ',i,j,'k',k,wst(i,j,k),'mytid=',myt
!              endif						!              endif
           END DO						           END DO
        END DO							        END DO
!            print *,'wka','wka',k,wka(imt/2,jem/2,k),'mytid=	!            print *,'wka','wka',k,wka(imt/2,jem/2,k),'mytid=
     END DO							     END DO
 								 
 								 
!$OMP PARALLEL DO PRIVATE (K,J,I)				!$OMP PARALLEL DO PRIVATE (K,J,I)
      if(nx_proc==1) then					      if(nx_proc==1) then
      DO K = 1,KM+1						      DO K = 1,KM+1
         DO J = JSM,JEM						         DO J = JSM,JEM
            WST (1,J,K) = WST (IMM,J,K)				            WST (1,J,K) = WST (IMM,J,K)
            WST (IMT,J,K) = WST (2,J,K)				            WST (IMT,J,K) = WST (2,J,K)
         END DO							         END DO
      END DO							      END DO
      endif							      endif

#ifdef SPMD							#ifdef SPMD
      call exch_boundary(wst,kmp1)				      call exch_boundary(wst,kmp1)
#endif								#endif
!      call local_to_global_4d_double(wst,wst_io,kmp1,1)	!      call local_to_global_4d_double(wst,wst_io,kmp1,1)
!      if(mytid==0) then					!      if(mytid==0) then
!          do k=1,km						!          do k=1,km
!            do j=1,jmt_global					!            do j=1,jmt_global
!              do i=1,imt					!              do i=1,imt
!         wstmon(i,j,k)=wstmon(i,j,k)+wst_io(i,j,k)/nss		!         wstmon(i,j,k)=wstmon(i,j,k)+wst_io(i,j,k)/nss
!              enddo						!              enddo
!            enddo						!            enddo
!          enddo						!          enddo
!       endif							!       endif
!          open (99,file='ws0.dat',form='unformatted')		!          open (99,file='ws0.dat',form='unformatted')
!          write(99) wst_io(:,:,1:km)				!          write(99) wst_io(:,:,1:km)
!          close(99)						!          close(99)
      deallocate(uk,vk)						      deallocate(uk,vk)

      RETURN							      RETURN
      END SUBROUTINE UPWELL_PT					      END SUBROUTINE UPWELL_PT


! CVS: $Id: accumm_pt.F90,v 2.1 2004/06/10 07:45:17 cvsroot E	! CVS: $Id: accumm_pt.F90,v 2.1 2004/06/10 07:45:17 cvsroot E
!========================					!========================
  SUBROUTINE ACCUMM_PT						  SUBROUTINE ACCUMM_PT
!========================					!========================
! ACCUMM_PT							! ACCUMM_PT
!------------------------------------------------------------	!------------------------------------------------------------
!								!
! purpose: sum up some variables used in CARBON model		! purpose: sum up some variables used in CARBON model
!								!
! author: Zhao Liang@lapc 2004/03/04				! author: Zhao Liang@lapc 2004/03/04
!								!
!------------------------------------------------------------	!------------------------------------------------------------
#include <def-undef.h>       					#include <def-undef.h>       
!								!
      USE param_mod						      USE param_mod
      USE carbon_mod						      USE carbon_mod
      USE coutput_mod						      USE coutput_mod
#ifdef SPMD      						#ifdef SPMD      
      USE msg_mod,only:mpi_comm_ocn				      USE msg_mod,only:mpi_comm_ocn
#endif      							#endif      
!								!
!------------------------------------------------------------	!------------------------------------------------------------
      IMPLICIT NONE						      IMPLICIT NONE
!#include <netcdf.inc>      					!#include <netcdf.inc>      
!#ifdef SPMD      						!#ifdef SPMD      
!#include <mpif.h>						!#include <mpif.h>
!#endif      							!#endif      
!      								!      
!$OMP PARALLEL DO PRIVATE (K,J,I)				!$OMP PARALLEL DO PRIVATE (K,J,I)
      DO K = 1,KM						      DO K = 1,KM
         DO J = 1,JMT						         DO J = 1,JMT
            DO I = 1,IMT					            DO I = 1,IMT
               CCMON (I,J,K)= CCMON (I,J,K) + PT (I,J,K,1)	               CCMON (I,J,K)= CCMON (I,J,K) + PT (I,J,K,1)
#ifdef carbonC14						#ifdef carbonC14
#endif								#endif
!								!
#ifdef carbonC							#ifdef carbonC
#endif								#endif
!								!
#ifdef carbonBio						#ifdef carbonBio
               po4mon (I,J,K)   = po4mon (I,J,K) + PT (I,J,K,	               po4mon (I,J,K)   = po4mon (I,J,K) + PT (I,J,K,
               ldocmon (I,J,K)  = ldocmon (I,J,K) + PT (I,J,K	               ldocmon (I,J,K)  = ldocmon (I,J,K) + PT (I,J,K
               tamon (I,J,K)    = tamon (I,J,K) + PT (I,J,K,4	               tamon (I,J,K)    = tamon (I,J,K) + PT (I,J,K,4
               prodmon (I,J,K)  = prodmon (I,J,K) + a1_b (I,J	               prodmon (I,J,K)  = prodmon (I,J,K) + a1_b (I,J
               fpopmon (I,J,K)  = fpopmon (I,J,K) + a2_b (I,J	               fpopmon (I,J,K)  = fpopmon (I,J,K) + a2_b (I,J
               pldocmon (I,J,K) = pldocmon (I,J,K) + b1_b (I,	               pldocmon (I,J,K) = pldocmon (I,J,K) + b1_b (I,
               remimon (I,J,K)  = remimon (I,J,K) + b2_b (I,J	               remimon (I,J,K)  = remimon (I,J,K) + b2_b (I,J
               jpopmon (I,J,K)  = jpopmon (I,J,K) + a0_b (I,J	               jpopmon (I,J,K)  = jpopmon (I,J,K) + a0_b (I,J
               caco3mon (I,J,K) = caco3mon (I,J,K) + c_b (I,J	               caco3mon (I,J,K) = caco3mon (I,J,K) + c_b (I,J
               o2mon (I,J,K)   = o2mon (I,J,K) + PT (I,J,K,5)	               o2mon (I,J,K)   = o2mon (I,J,K) + PT (I,J,K,5)
               femon (I,J,K)   = femon (I,J,K) + PT (I,J,K,6)	               femon (I,J,K)   = femon (I,J,K) + PT (I,J,K,6)
              							              
#endif								#endif
            END DO						            END DO
         END DO							         END DO
      END DO							      END DO
!lyc								!lyc
#if (defined cfc)||(defined carbonC14)				#if (defined cfc)||(defined carbonC14)
!$OMP PARALLEL DO PRIVATE (J,I)					!$OMP PARALLEL DO PRIVATE (J,I)
         DO J = 1,JMT						         DO J = 1,JMT
           DO I= 1,IMT						           DO I= 1,IMT
           ssfcmon(i,j)=ssfcmon(i,j)+ssfc(i,j)			           ssfcmon(i,j)=ssfcmon(i,j)+ssfc(i,j)
           ENDDO						           ENDDO
         ENDDO							         ENDDO
#endif         							#endif         
      RETURN							      RETURN
      END SUBROUTINE ACCUMM_PT					      END SUBROUTINE ACCUMM_PT
 								 
! CVS: $Id: local_to_global_pt.F90,v 2.2 2004/06/13 12:14:56 	! CVS: $Id: local_to_global_pt.F90,v 2.2 2004/06/13 12:14:56 
!----------------------------------------------------------	!----------------------------------------------------------
  SUBROUTINE LOCAL_TO_GLOBAL_PT(hist_output,rest_output)	  SUBROUTINE LOCAL_TO_GLOBAL_PT(hist_output,rest_output)
!========================					!========================
! LOCAL_TO_GLOBAL_PT						! LOCAL_TO_GLOBAL_PT
!------------------------------------------------------------	!------------------------------------------------------------
!								!
! purpose: collect variables from local to global in CARBON m	! purpose: collect variables from local to global in CARBON m
!								!
! author: Zhao Liang@lapc 2004/03/04; lyc 2012.10.10		! author: Zhao Liang@lapc 2004/03/04; lyc 2012.10.10
!								!
!------------------------------------------------------------	!------------------------------------------------------------
#include <def-undef.h>       					#include <def-undef.h>       
!								!
      USE param_mod						      USE param_mod
      USE pconst_mod						      USE pconst_mod
      USE work_mod						      USE work_mod
      USE carbon_mod						      USE carbon_mod
      USE cforce_mod						      USE cforce_mod
      USE coutput_mod						      USE coutput_mod
#ifdef SPMD      						#ifdef SPMD      
      USE msg_mod,only:mpi_comm_ocn				      USE msg_mod,only:mpi_comm_ocn
#endif      							#endif      
!								!
!------------------------------------------------------------	!------------------------------------------------------------
      IMPLICIT NONE						      IMPLICIT NONE
!#include <netcdf.inc>      					!#include <netcdf.inc>      
!      								!      
!111-------------------						!111-------------------
#ifdef SPMD							#ifdef SPMD
      INTEGER :: itag						      INTEGER :: itag
      LOGICAL :: hist_output,rest_output 			      LOGICAL :: hist_output,rest_output 
!								!
!      INTEGER,PARAMETER :: nptram1=nptra-1 			!      INTEGER,PARAMETER :: nptram1=nptra-1 
! number of variables for output				! number of variables for output

!restart data							!restart data
      IF (rest_output) THEN					      IF (rest_output) THEN
! lyc------------------------------				! lyc------------------------------
! add the collection for c_b and a0				! add the collection for c_b and a0

#ifdef carbonBio            					#ifdef carbonBio            
      call local_to_global_4d_double(tocaco3,tocaco3_io,km,1)	      call local_to_global_4d_double(tocaco3,tocaco3_io,km,1)
      call local_to_global_4d_double(toa0,toa0_io,km,1)		      call local_to_global_4d_double(toa0,toa0_io,km,1)
#endif         							#endif         
! lyc -------------------------------------------------------	! lyc -------------------------------------------------------
#if (defined carbonC) || (defined carbonBio) || (defined carb	#if (defined carbonC) || (defined carbonBio) || (defined carb
      call local_to_global_4d_double(totup,totup_io,1,1)	      call local_to_global_4d_double(totup,totup_io,1,1)
      call local_to_global_4d_double(tpco2o,tpco2o_io,1,1)	      call local_to_global_4d_double(tpco2o,tpco2o_io,1,1)
      call local_to_global_4d_double(tdpco2o,tdpco2o_io,1,1)	      call local_to_global_4d_double(tdpco2o,tdpco2o_io,1,1)
#endif								#endif
      call local_to_global_4d_double(pt,pt_io,km,nptra)		      call local_to_global_4d_double(pt,pt_io,km,nptra)
      endif							      endif


!------------------------------------------------------------	!------------------------------------------------------------
! output data     						! output data     
!------------------------------ 				!------------------------------ 
      IF (hist_output) THEN					      IF (hist_output) THEN
! lyc------------------------------				! lyc------------------------------
! add the collection for c_b and a0				! add the collection for c_b and a0

#ifdef carbonBio            					#ifdef carbonBio            
     call local_to_global_4d_double(tocaco3,tocaco3_io,km,1)	     call local_to_global_4d_double(tocaco3,tocaco3_io,km,1)
     call local_to_global_4d_double(toa0,toa0_io,km,1)		     call local_to_global_4d_double(toa0,toa0_io,km,1)
#endif         							#endif         
! lyc ----------------------------				! lyc ----------------------------
#if (defined carbonC) || (defined carbonBio)|| (defined carbo	#if (defined carbonC) || (defined carbonBio)|| (defined carbo
      call local_to_global_4d_double(totup,totup_io,1,1)	      call local_to_global_4d_double(totup,totup_io,1,1)
      call local_to_global_4d_double(tpco2o,tpco2o_io,1,1)	      call local_to_global_4d_double(tpco2o,tpco2o_io,1,1)
      call local_to_global_4d_double(tdpco2o,tdpco2o_io,1,1)	      call local_to_global_4d_double(tdpco2o,tdpco2o_io,1,1)
#endif								#endif
     call local_to_global_4d_double(ccmon,ccmon_io,km,1)	     call local_to_global_4d_double(ccmon,ccmon_io,km,1)

#ifdef carbonBio            					#ifdef carbonBio            
      call local_to_global_4d_double(po4mon,po4mon_io,km,1)	      call local_to_global_4d_double(po4mon,po4mon_io,km,1)
      call local_to_global_4d_double(ldocmon,ldocmon_io,km,1)	      call local_to_global_4d_double(ldocmon,ldocmon_io,km,1)
      call local_to_global_4d_double(tamon,tamon_io,km,1)	      call local_to_global_4d_double(tamon,tamon_io,km,1)
      call local_to_global_4d_double(o2mon,o2mon_io,km,1)	      call local_to_global_4d_double(o2mon,o2mon_io,km,1)
      call local_to_global_4d_double(femon,femon_io,km,1)	      call local_to_global_4d_double(femon,femon_io,km,1)
      call local_to_global_4d_double(prodmon,prodmon_io,km,1)	      call local_to_global_4d_double(prodmon,prodmon_io,km,1)
      call local_to_global_4d_double(fpopmon,fpopmon_io,km,1)	      call local_to_global_4d_double(fpopmon,fpopmon_io,km,1)
      call local_to_global_4d_double(pldocmon,pldocmon_io,km,	      call local_to_global_4d_double(pldocmon,pldocmon_io,km,
      call local_to_global_4d_double(remimon,remimon_io,km,1)	      call local_to_global_4d_double(remimon,remimon_io,km,1)
      call local_to_global_4d_double(jpopmon,jpopmon_io,km,1)	      call local_to_global_4d_double(jpopmon,jpopmon_io,km,1)
      call local_to_global_4d_double(caco3mon,caco3mon_io,km,	      call local_to_global_4d_double(caco3mon,caco3mon_io,km,
#endif         							#endif         
      endif 							      endif 
!-------------------------------------------------		!-------------------------------------------------
!111***************						!111***************
#endif								#endif
!-------------------						!-------------------
      RETURN							      RETURN
      END SUBROUTINE LOCAL_TO_GLOBAL_PT				      END SUBROUTINE LOCAL_TO_GLOBAL_PT
 								 
! CVS: $Id: deallocate_pt.F90,v 2.1 2004/06/10 07:45:17 cvsro	! CVS: $Id: deallocate_pt.F90,v 2.1 2004/06/10 07:45:17 cvsro
  SUBROUTINE DEALLOCATE_PT					  SUBROUTINE DEALLOCATE_PT
!========================					!========================
! DEALLOCATE_PT							! DEALLOCATE_PT
!------------------------------------------------------------	!------------------------------------------------------------
!								!
! purpose: deallocate temporary variables used in CARBON mode	! purpose: deallocate temporary variables used in CARBON mode
!								!
! author: Zhao Liang@lapc 2004/03/02				! author: Zhao Liang@lapc 2004/03/02
!								!
!------------------------------------------------------------	!------------------------------------------------------------
#include <def-undef.h>       					#include <def-undef.h>       
!								!
      USE param_mod						      USE param_mod
      USE cforce_mod						      USE cforce_mod
#ifdef SPMD							#ifdef SPMD
      USE msg_mod,only:mpi_comm_ocn				      USE msg_mod,only:mpi_comm_ocn
#endif      							#endif      
!								!
!------------------------------------------------------------	!------------------------------------------------------------
      IMPLICIT NONE						      IMPLICIT NONE
!      								!      
#ifdef SPMD							#ifdef SPMD
      IF(mytid==0) THEN						      IF(mytid==0) THEN
#endif      							#endif      
      WRITE(6,*) 'Begining------DEALLOCATE_PT'			      WRITE(6,*) 'Begining------DEALLOCATE_PT'
#ifdef SPMD							#ifdef SPMD
      ENDIF							      ENDIF
#endif								#endif
      								      
#ifdef carbonC14						#ifdef carbonC14
      DEALLOCATE(kyear,boml,bomm,bomh)				      DEALLOCATE(kyear,boml,bomm,bomh)
#endif								#endif
!      								!      
#if (defined carbonC)|| (defined carbonBio)			#if (defined carbonC)|| (defined carbonBio)
      DEALLOCATE(csgn,csg,csgx)					      DEALLOCATE(csgn,csg,csgx)
#endif      							#endif      
!  								!  
#ifdef carbonBio						#ifdef carbonBio

#endif								#endif
!								!
#ifdef SPMD							#ifdef SPMD
      IF(mytid==0) THEN						      IF(mytid==0) THEN
#endif      							#endif      
      WRITE(6,*) 'END-----------DEALLOCATE_PT'			      WRITE(6,*) 'END-----------DEALLOCATE_PT'
#ifdef SPMD							#ifdef SPMD
      ENDIF							      ENDIF
#endif								#endif

  END SUBROUTINE DEALLOCATE_PT					  END SUBROUTINE DEALLOCATE_PT
							      >
