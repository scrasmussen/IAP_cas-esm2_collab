diff iap/copy_grid_dp.F90 /work1/jjr/wangty/CAS_ESM_ColM/models/atm/cam/src/dynamics/iap/copy_grid_dp.F90
137,143c137,143
< !        DO K = beglev, endlev
< !           DO I = 1, plon
< !              q3  (I, K,1,Jp, n3) = Q(I+EX,K,Jd)
< !              q3  (I, K,2,Jp, n3) = Qliq(I+EX,K,Jd)
< !              q3  (I, K,3,Jp, n3) = Qice(I+EX,K,Jd)
< !           END DO
< !        END DO
---
> !!      DO K = beglev, endlev
> !!         DO I = 1, plon
> !!            q3  (I, K,1,Jp, n3) = Q(I+EX,K,Jd)
> !!            q3  (I, K,2,Jp, n3) = Qliq(I+EX,K,Jd)
> !!            q3  (I, K,3,Jp, n3) = Qice(I+EX,K,Jd)
> !!         END DO
> !!      END DO
diff iap/dp_coupling.F90 /work1/jjr/wangty/CAS_ESM_ColM/models/atm/cam/src/dynamics/iap/dp_coupling.F90
7d6
< !           He Juanxiong, 2013-09-25, for nudging and two-way coupling
23,26d21
< !wangty modify
< #ifdef wrf
<    use wv_saturation, only: aqsat ! juanxiong he
< #endif
39c34
<    use spmd_utils,   only: masterproc,iam
---
>    use spmd_utils,   only: masterproc
75,77c70,72
<     real(r8) :: buf1(1), buf2(1)     ! transpose buffers
<     integer  :: buf1win, buf2win     ! MPI-2 window ids
<     integer  :: spmdbuf_siz = 0
---
> !    real(r8) :: buf1(1), buf2(1)     ! transpose buffers
> !    integer  :: buf1win, buf2win     ! MPI-2 window ids
> !    integer  :: spmdbuf_siz = 0
341,343c336,338
<     real(r8) :: buf1(1), buf2(1)     ! transpose buffers
<     integer  :: buf1win, buf2win     ! MPI-2 window ids
<     integer  :: spmdbuf_siz = 0
---
> !    real(r8) :: buf1(1), buf2(1)     ! transpose buffers
> !    integer  :: buf1win, buf2win     ! MPI-2 window ids
> !    integer  :: spmdbuf_siz = 0
586,1295d580
< !wangty modify
< #ifdef wrf
< !-----------------------------------------------------------------------
< ! juanxiong he
< !-----------------------------------------------------------------------
< 
<   subroutine wrf_to_dynamics_tend(phys_state, phys_tend, t2, fu, fv)
< !------------------------------------------------------------------------------
< ! Coupler for converting physics output variables into dynamics input variables
< !------------------------------Arguments--------------------------------
<     use constituents, only: cnst_get_type_byind
< 
<     type(physics_state),intent(in), dimension(begchunk:endchunk) :: phys_state
<     type(physics_tend), intent(in), dimension(begchunk:endchunk) :: phys_tend
< 
<     real(r8), intent(inout) :: t2(plon, beglev:endlev, beglat:endlat)        ! temp tendency
<     real(r8), intent(inout) :: fu(plon, beglev:endlev, beglat:endlat)        ! u wind tendency
<     real(r8), intent(inout) :: fv(plon, beglev:endlev, beglat:endlat)        ! v wind tendency
< 
< !---------------------------Local workspace-----------------------------
<     real(r8) :: t2xy(beglonxy:endlonxy, plev, beglatxy:endlatxy)        ! temp tendency
<     real(r8) :: fuxy(beglonxy:endlonxy, plev, beglatxy:endlatxy)        ! u wind  tendency
<     real(r8) :: fvxy(beglonxy:endlonxy, plev, beglatxy:endlatxy)        ! v ind tendency
<     real(r8) :: t2temp(plon, beglev:endlev, beglat:endlat)        ! temp tendency
<     real(r8) :: futemp(plon, beglev:endlev, beglat:endlat)        ! u wind tendency
<     real(r8) :: fvtemp(plon, beglev:endlev, beglat:endlat)        ! v wind tendency
< 
< !
< #if (! defined SPMD)
<     real(r8) :: buf1(1), buf2(1)     ! transpose buffers
<     integer  :: buf1win, buf2win     ! MPI-2 window ids
<     integer  :: spmdbuf_siz = 0
<     integer  :: block_buf_nrecs = 0
<     integer  :: chunk_buf_nrecs = 0
<     integer  :: mpicom = 0
<     logical  :: local_dp_map=.true.
< #endif
< 
<     integer :: i,j,k,m,lchnk,ib         ! indices
<     integer :: ncol                  ! number of columns in current chunk
<     integer :: lats(pcols)           ! array of latitude indices
<     integer :: lons(pcols)           ! array of longitude indices
<     integer :: tsize                 ! amount of data per grid point passed to physics
<     integer, allocatable, dimension(:,:) :: bpter !jjr
<     real(r8), allocatable, dimension(:) :: buf1,buf2
< 
<     integer :: cpter(pcols,0:pver)   ! offsets into chunk buffer for unpacking data
<     logical :: wetq(pcnst)           ! 'wet' constituent flag
<     integer:: blksiz
<     type (T_FVDYCORE_STATE), pointer :: dyn_state   !zhh 2013-02-01
<     type (T_FVDYCORE_GRID) , pointer :: grid        ! For convenience
< !-----------------------------------------------------------------------
< !
<    dyn_state => get_dyn_state()
<    grid => dyn_state%grid     ! For convenience
< 
< !-----------------------------------------------------------------------
< ! copy data from physics data structure to dynamics data structure
< !-----------------------------------------------------------------------
<     if (local_dp_map) then
< 
< !$OMP PARALLEL DO PRIVATE (LCHNK, NCOL, I, K, M, LONS, LATS)
< 
<        do lchnk = begchunk,endchunk
<           ncol = get_ncols_p(lchnk)
<           call get_lon_all_p(lchnk, ncol, lons)
<           call get_lat_all_p(lchnk, ncol, lats)
< 
<           do k=1,plev
<              do i=1,ncol
<                 t2xy(lons(i),k,lats(i))   = phys_tend(lchnk)%dTdt (i,k)
<                 fuxy(lons(i),k,lats(i))   = phys_tend(lchnk)%dudt (i,k)
<                 fvxy(lons(i),k,lats(i))   = phys_tend(lchnk)%dvdt (i,k)
<              end do
<           end do
< 
<        end do
<     else
< 
<        tsize = 3
<        blksiz = (endlatxy-beglatxy+1)*(endlonxy-beglonxy+1)
<        allocate(bpter(blksiz,0:plev))
<        allocate(buf1(tsize*block_buf_nrecs))
<        allocate(buf2(tsize*chunk_buf_nrecs))
< 
< !$OMP PARALLEL DO PRIVATE (LCHNK, NCOL, CPTER, I, K, M)
<        do lchnk = begchunk,endchunk
<           ncol = get_ncols_p(lchnk)
< 
<           call chunk_to_block_send_pters(lchnk,pcols,pver+1,tsize,cpter)
< 
<           do k=1,plev
< 
<              do i=1,ncol
< 
<                 buf2(cpter(i,k))   = phys_tend(lchnk)%dTdt (i,k)
<                 buf2(cpter(i,k)+1) = phys_tend(lchnk)%dudt (i,k)
<                 buf2(cpter(i,k)+2) = phys_tend(lchnk)%dvdt (i,k)
< 
<              end do
< 
<           end do
< 
<        end do
< 
<        call t_barrierf ('sync_chk_to_blk', mpicom)
<        call t_startf ('chunk_to_block')
<        call transpose_chunk_to_block(tsize, buf2, buf1)
<        call t_stopf ('chunk_to_block')
< 
< #ifdef OUTER_OMP
< !$OMP PARALLEL DO PRIVATE (J, BPTER, I, K, M)
< #endif
< 
<        call chunk_to_block_recv_pters(iam+1,plon,plev+1,tsize,bpter)
<        ib=0
<        do j=beglatxy,endlatxy
<           do i=beglonxy,endlonxy
<              ib=ib+1
<              do k=1,plev
< 
<                 t2xy(i,k,j) = buf1(bpter(ib,k))
<                 fuxy(i,k,j) = buf1(bpter(ib,k)+1)
<                 fvxy(i,k,j) = buf1(bpter(ib,k)+2)
< 
<              end do
< 
<           end do
< 
<        end do
<        deallocate(bpter)
<        deallocate(buf1)
<        deallocate(buf2)
< 
<     endif
< 
<     if( grid%twod_decomp.eq.1) then
< #if defined (SPMD)
< ! Transpose from xy to yz decomposition
<       call mp_sendirr(grid%commxy, grid%ikj_xy_to_yz%SendDesc,      &
<                       grid%ikj_xy_to_yz%RecvDesc, t2xy, t2temp,         &
<                       modc=grid%modc_dynrun )
<       call mp_recvirr(grid%commxy, grid%ikj_xy_to_yz%SendDesc,      &
<                       grid%ikj_xy_to_yz%RecvDesc, t2xy, t2temp,         &
<                       modc=grid%modc_dynrun )
<       call mp_sendirr(grid%commxy, grid%ikj_xy_to_yz%SendDesc,      &
<                       grid%ikj_xy_to_yz%RecvDesc, fuxy, futemp,         &
<                       modc=grid%modc_dynrun )
<       call mp_recvirr(grid%commxy, grid%ikj_xy_to_yz%SendDesc,      &
<                       grid%ikj_xy_to_yz%RecvDesc, fuxy, futemp,         &
<                       modc=grid%modc_dynrun )
<       call mp_sendirr(grid%commxy, grid%ikj_xy_to_yz%SendDesc,      &
<                       grid%ikj_xy_to_yz%RecvDesc, fvxy, fvtemp,         &
<                       modc=grid%modc_dynrun )
<       call mp_recvirr(grid%commxy, grid%ikj_xy_to_yz%SendDesc,      &
<                       grid%ikj_xy_to_yz%RecvDesc, fvxy, fvtemp,         &
<                       modc=grid%modc_dynrun )
<       t2=t2+t2temp
<       fu=fu+futemp
<       fv=fv+fvtemp
< #endif
<     else  !jjr need define _yz
<         t2=t2+t2xy
<         fu=fu+fuxy
<         fv=fv+fvxy
<     endif
< 
< 
<     return
<   end subroutine wrf_to_dynamics_tend
< 
<   subroutine wrf_to_dynamics(phys_state, ps, t3, u3, v3, q3)  ! juanxiong
< !------------------------------------------------------------------------------
< ! Coupler for converting wrf input variables into dynamics input variables
< !------------------------------Arguments--------------------------------
<     use constituents, only: cnst_get_type_byind
< 
<     type(physics_state),intent(in), dimension(begchunk:endchunk) :: phys_state
<     real(r8), intent(inout) :: ps(plon, beglat:endlat) ! surface pressure
<     real(r8), intent(inout) :: t3(plon, beglev:endlev, beglat:endlat)  ! temperature
<     real(r8), intent(inout) :: u3(plon, beglev:endlev, beglat:endlat)  ! u-wind component
<     real(r8), intent(inout) :: v3(plon, beglev:endlev, beglat:endlat)  ! v-wind component
<     real(r8), intent(inout) :: q3(plon, beglev:endlev, 1, beglat:endlat) ! constituents
< 
< !---------------------------Local workspace-----------------------------
<     real(r8) :: dummy31(plon,beglev:endlev,beglat:endlat)
<     real(r8) :: dummy32(plon,beglev:endlev,beglat:endlat)
<     real(r8) :: dummy33(plon,beglev:endlev,beglat:endlat)
<     real(r8) :: dummy34(plon,beglev:endlev,beglat:endlat)
<     real(r8) :: dummy31xy(beglonxy:endlonxy,plev,beglatxy:endlatxy)
<     real(r8) :: dummy32xy(beglonxy:endlonxy,plev,beglatxy:endlatxy)
<     real(r8) :: dummy33xy(beglonxy:endlonxy,plev,beglatxy:endlatxy)
<     real(r8) :: dummy34xy(beglonxy:endlonxy,plev,beglatxy:endlatxy)
<     real(r8) :: t3xy(beglonxy:endlonxy, plev, beglatxy:endlatxy)        ! temp tendency
<     real(r8) :: u3xy(beglonxy:endlonxy, plev, beglatxy:endlatxy)        ! u wind tendency
<     real(r8) :: v3xy(beglonxy:endlonxy, plev, beglatxy:endlatxy)        ! v wind tendency
<     real(r8) :: q3xy(beglonxy:endlonxy, plev, 1, beglatxy:endlatxy) ! constituents
<     real(r8) :: psxy(beglonxy:endlonxy,beglatxy:endlatxy)          ! net flux
< 
< !---------------------------Local workspace-----------------------------
< #if (! defined SPMD)
<     real(r8) :: buf1(1), buf2(1)     ! transpose buffers
<     integer  :: buf1win, buf2win     ! MPI-2 window ids
<     integer  :: spmdbuf_siz = 0
<     integer  :: block_buf_nrecs = 0
<     integer  :: chunk_buf_nrecs = 0
<     integer  :: mpicom = 0
<     logical  :: local_dp_map=.true.
< #endif
< 
<     integer :: i,j,k,m,lchnk,ib         ! indices
<     integer :: ncol                  ! number of columns in current chunk
<     integer :: lats(pcols)           ! array of latitude indices
<     integer :: lons(pcols)           ! array of longitude indices
<     integer :: tsize                 ! amount of data per grid point passed to physics
<     integer, allocatable, dimension(:,:) :: bpter
<     real(r8), allocatable, dimension(:) :: buf1,buf2
<     integer :: cpter(pcols,0:pver)   ! offsets into chunk buffer for unpacking data
< 
< !---------------------------Local workspace-----------------------------
<     integer:: blksiz
<     type (T_FVDYCORE_STATE), pointer :: dyn_state
<     type (T_FVDYCORE_GRID) , pointer :: grid
< !-----------------------------------------------------------------------
< 
< !-----------------------------------------------------------------------
< ! copy data from physics data structure to dynamics data structure
< !-----------------------------------------------------------------------
< 
<    dyn_state => get_dyn_state()
<    grid => dyn_state%grid     ! For convenience
< 
<     if (local_dp_map) then
< 
< !$OMP PARALLEL DO PRIVATE (LCHNK, NCOL, I, K, M, LONS, LATS)
< 
<        do lchnk = begchunk,endchunk
<           ncol = get_ncols_p(lchnk)
<           call get_lon_all_p(lchnk, ncol, lons)
<           call get_lat_all_p(lchnk, ncol, lats)
< 
<           do k=1,plev
<              do i=1,ncol
<                if(phys_state(lchnk)%t(i,k).ne.0.0) then
<                 t3xy(lons(i),k,lats(i))   = phys_state(lchnk)%t (i,k)
<                 u3xy(lons(i),k,lats(i))   = phys_state(lchnk)%u (i,k)
<                 v3xy(lons(i),k,lats(i))   = phys_state(lchnk)%v (i,k)
<                 q3xy(lons(i),k,1,lats(i)) = phys_state(lchnk)%q(i,k,1)
<                else
<                 t3xy(lons(i),k,lats(i))   = 0.0
<                 u3xy(lons(i),k,lats(i))   = 0.0
<                 v3xy(lons(i),k,lats(i))   = 0.0
<                 q3xy(lons(i),k,1,lats(i)) = 0.0
<                endif
<              end do
<           end do
< 
<           do i=1,ncol
<             if(phys_state(lchnk)%ps(i).ne.0.0) then
<               psxy(lons(i),lats(i))   = phys_state(lchnk)%ps(i)
<             else
<               psxy(lons(i),lats(i))   = 0.0
<             end if
<           end do
< 
<        end do
<     else
< 
<        tsize = 4
<        blksiz = (endlatxy-beglatxy+1)*(endlonxy-beglonxy+1)
<        allocate(bpter(blksiz,0:plev))
<        allocate(buf1(tsize*block_buf_nrecs))
<        allocate(buf2(tsize*chunk_buf_nrecs))
< 
< !$OMP PARALLEL DO PRIVATE (LCHNK, NCOL, CPTER, I, K, M)
<        do lchnk = begchunk,endchunk
<           ncol = get_ncols_p(lchnk)
< 
<           call chunk_to_block_send_pters(lchnk,pcols,pver+1,tsize,cpter)
< 
<           do i=1,ncol
<            if(phys_state(lchnk)%ps(i).ne.0)   buf2(cpter(i,0)) = phys_state(lchnk)%ps(i)
<           end do
< 
< 
<           do k=1,plev
< 
<              do i=1,ncol
< 
<                 buf2(cpter(i,k))   = phys_state(lchnk)%t (i,k)
<                 buf2(cpter(i,k)+1) = phys_state(lchnk)%u (i,k)
<                 buf2(cpter(i,k)+2) = phys_state(lchnk)%v (i,k)
<                 buf2(cpter(i,k)+3) = phys_state(lchnk)%q(i,k,1)
< 
<              end do
< 
<           end do
< 
<        end do
< 
<        call t_barrierf ('sync_chk_to_blk', mpicom)
<        call t_startf ('chunk_to_block')
<        call transpose_chunk_to_block(tsize, buf2, buf1)
<        call t_stopf ('chunk_to_block')
< #ifdef OUTER_OMP
< !$OMP PARALLEL DO PRIVATE (J, BPTER, I, K, M)
< #endif
<        call chunk_to_block_recv_pters(iam+1,plon,plev+1,tsize,bpter)
<        ib=0
<        do j=beglatxy,endlatxy
<           do i=beglonxy,endlonxy
<              ib=ib+1
<               if( buf1(bpter(ib,0)) .ne. 0.0 ) then
<                 psxy(i,j)=buf1(bpter(ib,0))
<               else
<                 psxy(i,j)=0.0
<               end if
<              do k=1,plev
<                if( buf1(bpter(ib,k)) .ne. 0.0 ) then
<                 t3xy(i,k,j) = buf1(bpter(ib,k))
<                 u3xy(i,k,j) = buf1(bpter(ib,k)+1)
<                 v3xy(i,k,j) = buf1(bpter(ib,k)+2)
<                 q3xy(i,k,1,j) = buf1(bpter(ib,k)+3)
<                else
<                 t3xy(i,k,j) = 0.0
<                 u3xy(i,k,j) = 0.0
<                 v3xy(i,k,j) = 0.0
<                 q3xy(i,k,1,j) = 0.0
<                end if
<              end do
<           end do
<        end do
<        deallocate(bpter)
<        deallocate(buf1)
<        deallocate(buf2)
< 
<  endif
< 
<     if( grid%twod_decomp.eq.1) then
< #if defined (SPMD)
<       ! Transpose from xy to yz decomposition
<       ! ps
<       do k = 1,plev
<          do j = beglatxy,endlatxy
<             do i = beglonxy,endlonxy
<                dummy31xy(i,k,j) =psxy(i,j)
<             enddo
<          enddo
<       enddo
<       call mp_sendirr(grid%commxy, grid%ikj_xy_to_yz%SendDesc,         &
<                       grid%ikj_xy_to_yz%RecvDesc, dummy31xy, dummy31,    &
<                       modc=grid%modc_dynrun )
<       call mp_recvirr(grid%commxy, grid%ikj_xy_to_yz%SendDesc,         &
<                       grid%ikj_xy_to_yz%RecvDesc, dummy31xy, dummy31,    &
<                       modc=grid%modc_dynrun )
<       do j=beglat,endlat
<          do i=1,plon
<            if(dummy31(i,beglev,j).ne.0) then
<             ps(i,j)=dummy31(i,beglev,j)
<            endif
<          end do
<       end do
< 
<       ! t3, u3, v3, q3
<          do k = 1,plev
<             do j = beglatxy,endlatxy
<                do i = beglonxy,endlonxy
<                   dummy31xy(i,k,j) = t3xy(i,k,j)
<                   dummy32xy(i,k,j) = u3xy(i,k,j)
<                   dummy33xy(i,k,j) = v3xy(i,k,j)
<                   dummy34xy(i,k,j) = q3xy(i,k,1,j)
<                enddo
<             enddo
<          enddo
<          call mp_sendirr(grid%commxy, grid%ikj_xy_to_yz%SendDesc,         &
<                          grid%ikj_xy_to_yz%RecvDesc, dummy31xy, dummy31,    &
<                          modc=grid%modc_dynrun )
<          call mp_recvirr(grid%commxy, grid%ikj_xy_to_yz%SendDesc,         &
<                          grid%ikj_xy_to_yz%RecvDesc, dummy31xy, dummy31,    &
<                          modc=grid%modc_dynrun )
<          call mp_sendirr(grid%commxy, grid%ikj_xy_to_yz%SendDesc,         &
<                          grid%ikj_xy_to_yz%RecvDesc, dummy32xy, dummy32,    &
<                          modc=grid%modc_dynrun )
<          call mp_recvirr(grid%commxy, grid%ikj_xy_to_yz%SendDesc,         &
<                          grid%ikj_xy_to_yz%RecvDesc, dummy32xy, dummy32,    &
<                          modc=grid%modc_dynrun )
<          call mp_sendirr(grid%commxy, grid%ikj_xy_to_yz%SendDesc,         &
<                          grid%ikj_xy_to_yz%RecvDesc, dummy33xy, dummy33,    &
<                          modc=grid%modc_dynrun )
<          call mp_recvirr(grid%commxy, grid%ikj_xy_to_yz%SendDesc,         &
<                          grid%ikj_xy_to_yz%RecvDesc, dummy33xy, dummy33,    &
<                          modc=grid%modc_dynrun )
<          call mp_sendirr(grid%commxy, grid%ikj_xy_to_yz%SendDesc,         &
<                          grid%ikj_xy_to_yz%RecvDesc, dummy34xy, dummy34,    &
<                          modc=grid%modc_dynrun )
<          call mp_recvirr(grid%commxy, grid%ikj_xy_to_yz%SendDesc,         &
<                          grid%ikj_xy_to_yz%RecvDesc, dummy34xy, dummy34,    &
<                          modc=grid%modc_dynrun )
<          do k=beglev,endlev
<             do j=beglat,endlat
<                do i=1,plon
<                   if(dummy31(i,k,j).ne.0.0) then
<                   t3(i,k,j)=dummy31(i,k,j)
<                   u3(i,k,j)=dummy32(i,k,j)
<                   v3(i,k,j)=dummy33(i,k,j)
<                   q3(i,k,1,j)=dummy34(i,k,j)
<                   end if
<                end do
<             end do
<          end do
< 
< #endif
<     else
< 
<        do lchnk = beglat,endlat
<           do k = beglev,endlev
<              do i = 1,plon
<                if(t3xy(i,k,lchnk).ne.0.0) then
<                 t3(i,k,lchnk)   = t3xy (i,k,lchnk)
<                 u3(i,k,lchnk)   = u3xy (i,k,lchnk)
<                 v3(i,k,lchnk)   = v3xy (i,k,lchnk)
<                 q3(i,k,1,lchnk)   = q3xy (i,k,1,lchnk)
<                endif
<              end do
<           end do
< 
<           do i=1,plon
<             if(psxy(i,lchnk).ne.0.0)   then
<               ps(i,lchnk)  =  psxy(i,lchnk)
<             end if
<           end do
< 
<        end do
< 
<     endif
<     return
<   end subroutine wrf_to_dynamics
< 
< !===============================================================================
<   subroutine dynamics_to_wrf(phys_state, ps, t3, u3, v3, q3, pdeld)
< !------------------------------------------------------------------------------
< ! Coupler for converting physics output variables into dynamics input variables
< !------------------------------Arguments--------------------------------
<     use constituents, only: cnst_get_type_byind
<     use physconst,     only: cappa
< 
<     type(physics_state),intent(inout), dimension(begchunk:endchunk) :: phys_state
<     real(r8), intent(in) :: t3(plon, beglev:endlev, beglat:endlat)        ! temp tendency
<     real(r8), intent(in) :: u3(plon, beglev:endlev, beglat:endlat)        ! u wind tendency
<     real(r8), intent(in) :: v3(plon, beglev:endlev, beglat:endlat)        ! v wind tendency
<     real(r8), intent(in) :: pdeld(plon, beglev:endlev, beglat:endlat)     ! pressure thickness
<     real(r8), intent(in) :: ps(plon, beglat:endlat)          ! net flux
<     real(r8), intent(in) :: q3(plon, beglev:endlev, 1, beglat:endlat) ! constituents
< 
< !---------------------------Local workspace-----------------------------
<     real(r8) :: dummy3(plon,beglev:endlev,beglat:endlat)
<     real(r8) :: dummy3xy(beglonxy:endlonxy,plev,beglatxy:endlatxy)
<     real(r8) :: t3xy(beglonxy:endlonxy, plev, beglatxy:endlatxy)        ! temp tendency
<     real(r8) :: u3xy(beglonxy:endlonxy, plev, beglatxy:endlatxy)        ! u wind tendency
<     real(r8) :: v3xy(beglonxy:endlonxy, plev, beglatxy:endlatxy)        ! v ind tendency
<     real(r8) :: psxy(beglonxy:endlonxy,beglatxy:endlatxy)          ! net flux 
<     real(r8) :: q3xy(beglonxy:endlonxy, plev, 1, beglatxy:endlatxy) ! constituents
<     real(r8) :: pdeldxy (beglonxy:endlonxy,plev,beglatxy:endlatxy)
<     real(r8) :: tem2(pcols,pver) ! temporary workspace
<     real(r8) :: ftem(pcols,pver) ! temporary workspace
< !
< #if (! defined SPMD)
<     real(r8) :: buf1(1), buf2(1)     ! transpose buffers
<     integer  :: spmdbuf_siz = 0
<     integer  :: block_buf_nrecs = 0
<     integer  :: chunk_buf_nrecs = 0
<     integer  :: mpicom = 0
<     logical  :: local_dp_map=.true.
< #endif
< 
<     integer :: i,j,k,m,lchnk,ib         ! indices
<     integer :: ncol                  ! number of columns in current chunk
<     integer :: lats(pcols)           ! array of latitude indices
<     integer :: lons(pcols)           ! array of longitude indices
<     integer :: tsize                 ! amount of data per grid point passed to physics
<     integer, allocatable, dimension(:,:) :: bpter !jjr
<     real(r8), allocatable, dimension(:) :: buf1,buf2
< 
<     integer :: cpter(pcols,0:pver)   ! offsets into chunk buffer for unpacking data
<     logical :: wetq(pcnst)           ! 'wet' constituent flag
<     integer:: blksiz
<     type (T_FVDYCORE_STATE), pointer :: dyn_state   !zhh 2013-02-01
<     type (T_FVDYCORE_GRID) , pointer :: grid        ! For convenience
< !-----------------------------------------------------------------------
< !
<    dyn_state => get_dyn_state()
<    grid => dyn_state%grid     ! For convenience
<    if (grid%twod_decomp .eq. 1) then
< #if defined( SPMD )
<       do k = beglev,endlev
<          do j = beglat,endlat
<             do i = 1,plon
<                dummy3(i,k,j) = ps(i,j)
<             enddo
<          enddo
<       enddo
<       call mp_sendirr(grid%commxy, grid%ijk_yz_to_xy%SendDesc,         &
<                       grid%ijk_yz_to_xy%RecvDesc, dummy3, dummy3xy,    &
<                       modc=grid%modc_dynrun )
<       call mp_recvirr(grid%commxy, grid%ijk_yz_to_xy%SendDesc,         &
<                       grid%ijk_yz_to_xy%RecvDesc, dummy3, dummy3xy,    &
<                       modc=grid%modc_dynrun )
<       do j = beglatxy,endlatxy
<          do i = beglonxy,endlonxy
<             psxy(i,j) = dummy3xy(i,1,j)
<          enddo
<       enddo
< 
<       call mp_sendirr(grid%commxy, grid%ikj_yz_to_xy%SendDesc,         &
<                       grid%ikj_yz_to_xy%RecvDesc, u3(:,:,:),      &
<                       u3xy(:,:,:), modc=grid%modc_dynrun )
<       call mp_recvirr(grid%commxy, grid%ikj_yz_to_xy%SendDesc,         &
<                       grid%ikj_yz_to_xy%RecvDesc, u3(:,:,:),      &
<                       u3xy(:,:,:), modc=grid%modc_dynrun )
< !
<       call mp_sendirr(grid%commxy, grid%ikj_yz_to_xy%SendDesc,         &
<                       grid%ikj_yz_to_xy%RecvDesc, v3(:,:,:),      &
<                       v3xy(:,:,:), modc=grid%modc_dynrun )
<       call mp_recvirr(grid%commxy, grid%ikj_yz_to_xy%SendDesc,         &
<                       grid%ikj_yz_to_xy%RecvDesc, v3(:,:,:),      &
<                       v3xy(:,:,:), modc=grid%modc_dynrun )
< !
<       call mp_sendirr(grid%commxy, grid%ikj_yz_to_xy%SendDesc,         &
<                       grid%ikj_yz_to_xy%RecvDesc, t3(:,:,:),      &
<                       t3xy(:,:,:), modc=grid%modc_dynrun )
<       call mp_recvirr(grid%commxy, grid%ikj_yz_to_xy%SendDesc,         &
<                       grid%ikj_yz_to_xy%RecvDesc, t3(:,:,:),      &
<                       t3xy(:,:,:), modc=grid%modc_dynrun )
< 
<       call mp_sendirr(grid%commxy, grid%ikj_yz_to_xy%SendDesc,         &
<                       grid%ikj_yz_to_xy%RecvDesc, pdeld(:,:,:),   &
<                       pdeldxy(:,:,:), modc=grid%modc_dynrun )
<       call mp_recvirr(grid%commxy, grid%ikj_yz_to_xy%SendDesc,         &
<                       grid%ikj_yz_to_xy%RecvDesc, pdeld(:,:,:),   &
<                       pdeldxy(:,:,:), modc=grid%modc_dynrun )
< 
<          do k = beglev,endlev
<             do j = beglat,endlat
<                do i =1,plon
<                   dummy3(i,k,j) = q3(i,k,1,j)
<                enddo
<             enddo
<          enddo
<          call mp_sendirr(grid%commxy, grid%ijk_yz_to_xy%SendDesc,         &
<                          grid%ijk_yz_to_xy%RecvDesc, dummy3, dummy3xy,    &
<                          modc=grid%modc_dynrun )
<          call mp_recvirr(grid%commxy, grid%ijk_yz_to_xy%SendDesc,         &
<                          grid%ijk_yz_to_xy%RecvDesc, dummy3, dummy3xy,    &
<                          modc=grid%modc_dynrun )
<          do k=1,plev
<             do j = beglatxy,endlatxy
<                do i = beglonxy,endlonxy
<                   q3xy(i,k,1,j) = dummy3xy(i,k,j)
<                enddo
<             end do
<          enddo
< 
< #endif
<    else !jjr need define _xy
<       psxy(:,:)=ps(:,:)
<       t3xy(:,:,:)=t3(:,:,:)
<       u3xy(:,:,:)=u3(:,:,:)
<       v3xy(:,:,:)= v3(:,:,:)
<       pdeldxy(:,:,:)= pdeld(:,:,:)
<       q3xy(:,:,:,:)=q3(:,:,:,:)
<     end if
< 
< !-----------------------------------------------------------------------
< ! copy data from dynamics data structure to physics data structure
< !-----------------------------------------------------------------------
<     if (local_dp_map) then
< 
< !$OMP PARALLEL DO PRIVATE (LCHNK, NCOL, I, K, M, LONS, LATS)
<        do lchnk = begchunk,endchunk
<           ncol = phys_state(lchnk)%ncol
<           call get_lon_all_p(lchnk, ncol, lons)
<           call get_lat_all_p(lchnk, ncol, lats)
<           do i=1,ncol
<              phys_state(lchnk)%ps   (i)     = psxy  (lons(i),lats(i))
<           end do
< 
<           do k=1,plev
<              do i=1,ncol
<                 phys_state(lchnk)%t    (i,k)   = t3xy(lons(i),k,lats(i))
<                 phys_state(lchnk)%u    (i,k)   = u3xy(lons(i),k,lats(i))
<                 phys_state(lchnk)%v    (i,k)   = v3xy(lons(i),k,lats(i))
<                 phys_state(lchnk)%q  (i,k,1)   = q3xy(lons(i),k,1,lats(i))
<                 phys_state(lchnk)%pdel (i,k)   = pdeldxy(lons(i),k,lats(i))
<              end do
<           end do
< 
<        end do
< 
<     else
< 
<        tsize = 5
< 
<        blksiz = (endlatxy-beglatxy+1)*(endlonxy-beglonxy+1)
<        allocate(bpter(blksiz,0:plev))
<        allocate(buf1(tsize*block_buf_nrecs))
<        allocate(buf2(tsize*chunk_buf_nrecs))
< 
< #ifdef OUTER_OMP
< !$OMP PARALLEL DO PRIVATE (J, BPTER, I, K, M)
< #endif
< 
<        call block_to_chunk_send_pters(iam+1,blksiz,plev+1,tsize,bpter)
< 
< !DIR$ CONCURRENT
<          ib = 0
<          do j=beglatxy,endlatxy
<           do i=beglonxy,endlonxy
<             ib = ib + 1
<              buf1(bpter(ib,0))   = psxy(i,j)
< 
< !DIR$ CONCURRENT
<              do k=1,plev
<                 buf1(bpter(ib,k))   = t3xy(i,k,j)
<                 buf1(bpter(ib,k)+1) = u3xy(i,k,j)
<                 buf1(bpter(ib,k)+2) = v3xy(i,k,j)
<                 buf1(bpter(ib,k)+3) = q3xy(i,k,1,j)
<                 buf1(bpter(ib,k)+4) = pdeldxy(i,k,j)
<              end do
<           end do
<          end do
< 
<        call t_barrierf ('sync_blk_to_chk', mpicom)
<        call t_startf ('block_to_chunk')
<        call transpose_block_to_chunk(tsize, buf1, buf2)
<        call t_stopf  ('block_to_chunk')
< 
< !$OMP PARALLEL DO PRIVATE (LCHNK, NCOL, CPTER, I, K, M)
<        do lchnk = begchunk,endchunk
<           ncol = phys_state(lchnk)%ncol
< 
<           call block_to_chunk_recv_pters(lchnk,pcols,pver+1,tsize,cpter)
< 
<           do i=1,ncol
<              phys_state(lchnk)%ps   (i)     = buf2(cpter(i,0))
<           end do
< 
<           do k=1,plev
<              do i=1,ncol
< 
<                 phys_state(lchnk)%t    (i,k)   = buf2(cpter(i,k))
<                 phys_state(lchnk)%u    (i,k)   = buf2(cpter(i,k)+1)
<                 phys_state(lchnk)%v    (i,k)   = buf2(cpter(i,k)+2)
<                 phys_state(lchnk)%pdel (i,k)   = buf2(cpter(i,k)+2)
<                 phys_state(lchnk)%q (i,k,1) = buf2(cpter(i,k)+3)
< 
<              end do
<           end do
< 
<        end do
<        deallocate(bpter)
<        deallocate(buf1)
<        deallocate(buf2)
< 
<     endif
< 
< !-----------------------------------------------------------------------
< ! Fill auxilliary arrays in physics data structure
< !-----------------------------------------------------------------------
< !$OMP PARALLEL DO PRIVATE (LCHNK, NCOL, I, K, M, LONS, LATS)
< 
<     do lchnk = begchunk,endchunk
<        ncol = phys_state(lchnk)%ncol
< 
< ! pressure arrays
<        call plevs0(ncol, pcols, pver, &
<                    phys_state(lchnk)%ps,   phys_state(lchnk)%pint,    &
<                    phys_state(lchnk)%pmid, phys_state(lchnk)%pdel)
< 
< ! log(pressure) arrays and Exner function
<        do k=1,pver+1
<           do i=1,ncol
<              phys_state(lchnk)%lnpint(i,k) = log(phys_state(lchnk)%pint(i,k))
<           end do
<        end do
<        do k=1,pver
<           do i=1,ncol
<              phys_state(lchnk)%rpdel(i,k)  = 1._r8/phys_state(lchnk)%pdel(i,k)
<              phys_state(lchnk)%lnpmid(i,k) = log(phys_state(lchnk)%pmid(i,k))
<              phys_state(lchnk)%exner (i,k) = (phys_state(lchnk)%pint(i,pver+1) &
<                                              /phys_state(lchnk)%pmid(i,k))**cappa
<           end do
<        end do
< 
< ! Compute initial geopotential heights
<        call geopotential_t (phys_state(lchnk)%lnpint, phys_state(lchnk)%lnpmid , phys_state(lchnk)%pint  , &
<                             phys_state(lchnk)%pmid  , phys_state(lchnk)%pdel , phys_state(lchnk)%rpdel , &
<                             phys_state(lchnk)%t     , phys_state(lchnk)%q(1,1,1), rair,  gravit,  zvir    , &
<                             phys_state(lchnk)%zi    , phys_state(lchnk)%zm , ncol                )
< 
< ! Compute RH
<        call aqsat (phys_state(lchnk)%t, phys_state(lchnk)%pmid, tem2, ftem, pcols, &
<                    ncol, pver, 1, pver    )
<        phys_state(lchnk)%rh(:ncol,:) = phys_state(lchnk)%q(:ncol,:,1)/ftem(:ncol,:)*100._r8
< 
<     end do
< 
<     return
<   end subroutine dynamics_to_wrf
< #endif
< 
diff iap/Filt.F90 /work1/jjr/wangty/CAS_ESM_ColM/models/atm/cam/src/dynamics/iap/Filt.F90
242c242
<       integer, parameter :: NS = 2   ! FFT filter intensity
---
>       integer, parameter :: NS = 2   ! FFT filter intensity 
Only in /work1/jjr/wangty/CAS_ESM_ColM/models/atm/cam/src/dynamics/iap: flexib.F90.dt180_ndt2
Only in iap/: nudging_driver.F90
Only in iap/: remove
Only in /work1/jjr/wangty/CAS_ESM_ColM/models/atm/cam/src/dynamics/iap: smoother.F90.bak
diff iap/stepon.F90 /work1/jjr/wangty/CAS_ESM_ColM/models/atm/cam/src/dynamics/iap/stepon.F90
18d17
< ! Modified: He Juanxiong, 2013-09-26, for nudging and two-way coupling
235,241c234
< !wangty modify
< #ifdef wrf
< subroutine stepon_run1( ztodt, phys_state, phys_tend, wrf_state, wrf_tend,&
<                         cam_state_ac, cam_tend_ac, dyn_in, dyn_out, &
<                         nudging_state, nudging_tend, fdda, &
<                         twoway_coupling, twoway_nudging)  ! juanxiong he
< #else
---
> 
243d235
< #endif
255,258d246
< !wangty modify
< #ifdef wrf
<   use dp_coupling,    only: d_p_coupling, wrf_to_dynamics ! juanxiong he  
< #else
260d247
< #endif
269,277d255
< !wangty modify
< #ifdef wrf
<   type(physics_state), intent(inout) :: wrf_state(begchunk:endchunk) !juanxiong he
<   type(physics_tend),  intent(inout)   :: wrf_tend(begchunk:endchunk) !juanxiong he
<   type(physics_state), intent(inout) :: nudging_state(begchunk:endchunk) !juanxiong he
<   type(physics_tend),  intent(inout)   :: nudging_tend(begchunk:endchunk) !juanxiong he
<   type(physics_state), intent(inout) :: cam_state_ac(begchunk:endchunk) !juanxiong he
<   type(physics_tend),  intent(inout)   :: cam_tend_ac(begchunk:endchunk) !juanxiong he 
< #endif
280,285d257
< !wangty modify
< #ifdef wrf
<   logical, intent(inout) :: twoway_coupling  !juanxiong he
<   integer, intent(in) :: twoway_nudging  !juanxiong he
<   integer, intent(in) :: fdda  !juanxiong he
< #endif
294,304c266
< !wangty modify
< #ifdef wrf
<   !------------------------------------------------------------
<   ! juanxiong he
<   !------------------------------------------------------------
<   ! two way coupling
<   if(twoway_coupling.and.twoway_nudging.eq.0) then
<     call wrf_to_dynamics(wrf_state, ps(:,:,n3m1), t3(:,:,:,n3m1), u3(:,:,:,n3m1), &
<                          v3(:,:,:,n3m1), q3(:,:,1,:,n3m1))
<   endif
< #endif
---
> 
423,433d384
< !wangty modify
< #ifdef wrf
<   !------------------------------------------------------------
<   ! juanxiong he
<   !------------------------------------------------------------
<   ! nudging
<   if(fdda.gt.0) then
<    nudging_state=phys_state
<    nudging_tend=phys_tend
<   end if
< #endif
451,457c402
< !wangty modify
< #ifdef wrf
< subroutine stepon_run2( phys_state, phys_tend,  wrf_state, wrf_tend,&
<                         cam_state_ac, cam_tend_ac, &
<                         nudging_state, nudging_tend, dyn_in, dyn_out, &
<                         twoway_coupling, twoway_nudging )
< #else
---
> 
459d403
< #endif
467,470d410
< !wangty modify
< #ifdef wrf
<   use dp_coupling,    only: p_d_coupling, wrf_to_dynamics_tend
< #else
472d411
< #endif
475,483d413
< !wangty modify
< #ifdef wrf
<   type(physics_state), intent(in):: nudging_state(begchunk:endchunk) !juanxiong he
<   type(physics_tend), intent(in):: nudging_tend(begchunk:endchunk) !juanxiong he
<   type(physics_state), intent(inout) :: cam_state_ac(begchunk:endchunk) !juanxiong he
<   type(physics_tend),  intent(inout)   :: cam_tend_ac(begchunk:endchunk) !juanxiong he
<   type(physics_state), intent(in):: wrf_state(begchunk:endchunk)  !juanxiong he
<   type(physics_tend), intent(in):: wrf_tend(begchunk:endchunk) !juanxiong he
< #endif
486,490d415
< !wangty modify
< #ifdef wrf
<   logical, intent(in) :: twoway_coupling  !juanxiong he
<   integer, intent(in) :: twoway_nudging  !juanxiong he
< #endif
495,500d419
< !wangty modify
< #ifdef wrf
<   if(twoway_nudging.eq.0.and.twoway_coupling) then
<   call wrf_to_dynamics_tend(wrf_state, wrf_tend, t2, fu, fv) ! juanxiong he
<   end if
< #endif
507,512c426
< !wangty modify
< #ifdef wrf
< subroutine stepon_run3( ztodt, etamid, cam_out, phys_state, phys_tend, &
<                         dyn_in, dyn_out, cam_state, cam_tend, &
<                         twoway_coupling, twoway_nudging )
< #else
---
> 
514d427
< #endif
522,527d434
< !wangty modify
< #ifdef wrf
<   use dp_coupling,    only: dynamics_to_wrf ! juanxiong he
<   use prognostics,    only: pdeld  ! juanxiong he
<   use phys_buffer,    only: pbuf   ! juanxiong he
< #endif
531,538d437
< !wangty modify
< #ifdef wrf 
<   type(physics_tend), intent(inout):: phys_tend(begchunk:endchunk) ! juanxiong he
<   type(physics_state), intent(inout):: cam_state(begchunk:endchunk) ! juanxiong he
<   type(physics_tend), intent(inout):: cam_tend(begchunk:endchunk) ! juanxiong he
<   logical, intent(in) :: twoway_coupling ! juanxiong he
<   integer :: twoway_nudging ! juanxiong he
< #endif
584,590d482
< !wangty modify
< #ifdef wrf
<   if(twoway_coupling.and.twoway_nudging.eq.0) then
<   call dynamics_to_wrf (cam_state, ps(:,:,n3), t3(:,:,:,n3), u3(:,:,:,n3),&
<                         v3(:,:,:,n3), q3(:,:,1,:,n3), pdeldxy(:,:,:,n3)) ! added by Juanxiong He
<   end if
< #endif
Only in iap/: trunc.F90
